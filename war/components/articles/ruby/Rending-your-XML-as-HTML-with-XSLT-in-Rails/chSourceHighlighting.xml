<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
        
        
]]>
  </c:abstract>

  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.8em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1.2em;line-height:1.3;font-family:monospace;">
      <![CDATA[
          <div>I had a need to convert XML services that my rails app was providing into customizable html widgets tht could then be in-jested by some sort of server side includes(like NGINX's SSI). So I needed to use XSLT.
          <br />
          <br />
          When the W3C wrote the XML specification they also developed the Extensible Stylesheet Language for Transformations. XSLT provides a powerful, flexible language for transforming XML documents into something else. In this case, we're going to use it to create HTML documents.
          <br />
          <br />
          So to quickly look at how we're rendering xml currently.</div>
          <pre style="margin:1em 0;color:green;">def show
    @event = Event.find(params[:id])
    render :xml => @event
end</pre>

<div>OK so we are simply rendering only xml back from this request. Now of course we can react to any registered mime-type we want, obviously HTML is one of those. So we do something like....</div>
<pre style="margin:1em 0;color:green;">def show
    @event = Event.find(params[:id])
    responds_to do |format|
        format.html
        format.xml { render :xml => @event }
    end
end</pre>

<div>So, I'm going to assume that you've seen this responds to block before and you know that it's just going to render the show.html.erb template in our views, when html is requested.
</div>
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>
  
  
  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
      <c:title>Installing Ruby's XSLT Library</c:title>
      <c:desc>
          <c:desc1> <![CDATA[]]></c:desc1>
      </c:desc>
      <c:sourceContent type="html" title="" id="sourceContent1"
          titleStyle="padding-left:0;color:black;font-size:1.8em;background-color:white;"
          bodyStyle="background-color:white;padding:0;font-size:1.2em;line-height:1.3;font-family:monospace;">
          <![CDATA[
              <div>I'm on Mac OS-X 10.5.2 and haven't tested this install on anything else, but it's pretty simple really, unfortunately it's not a gem, but hey, it's not that hard
              <br />
              <br />
              First you'll need to download the library, you can get it from <a target="_blank" href="http://gregoire.lejeune.free.fr/ruby-xslt_0.9.2.tar.gz">here</a>
              <br />
              <br />
              Unzip that guy and in your terminal navigate to that directory, then execute the following commands(You'll need Make installed so ensure you've XCode installed on OS-X, or some sort of GCC/Make):</div>
              <pre style="margin:1em 0;color:green;">ruby extconf.rb
make
make test
make doc
sudo make install</pre>
              
              <div>Fire up irb and ensure you return true from require 'xml/xslt' if you get a false, the library hasn't installed properly, you can probably find help at http://greg.rubyfr.net/pub/packages/ruby-xslt/files/README.html</div>          ]]>
      </c:sourceContent>
      <c:comment>
          <c:comment1>
              <![CDATA[]]>
          </c:comment1>
      </c:comment>
  </c:entry>
  
  
  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
      <c:title>Getting Rails to render:</c:title>
      <c:desc>
          <c:desc1> <![CDATA[]]></c:desc1>
      </c:desc>
      <c:sourceContent type="html" title="" id="sourceContent1" style="background-color:transparent;"
          titleStyle="padding-left:0;color:black;font-size:1.8em;background-color:white;"
          bodyStyle="background-color:white;padding:0;font-size:1.2em;line-height:1.3;font-family:monospace;">
          <![CDATA[
              <div>Firstly, include your new friend in environment.rb
              require 'xml/xslt'
              
              In my application controller I've added a private method</div>
              <pre style="margin:1em 0;color:green;">def xslt(_xml, _xslt)
    xlt = XML::XSLT.new
    xlt.xml = render_to_string :xml => _xml
    xlt.xsl = _xslt
    xlt.serve
end</pre>
              
              <div>Now in your controller method(I'll use the example from above)</div>
              <pre style="margin:1em 0;color:green;">def show
    @event = Event.find(params[:id])
    respond_to do |format|
        format.html { render :inline => xslt(@event,
                      "#{RAILS_ROOT}/xslt_template/show.xslt") }
        format.xml { render :xml => @event }
    end
end</pre>
         ]]>
      </c:sourceContent>
      <c:comment>
          <c:comment1>
              <![CDATA[]]>
          </c:comment1>
      </c:comment>
  </c:entry>
  
  
  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
      <c:title>Create an XSLT Style</c:title>
      <c:desc>
          <c:desc1> <![CDATA[]]></c:desc1>
      </c:desc>
      <c:sourceContent type="html" title="" id="sourceContent1" style="background-color:transparent;"
          titleStyle="padding-left:0;color:black;font-size:1.8em;background-color:white;"
          bodyStyle="background-color:white;padding:0;font-size:1.2em;line-height:1.3;font-family:monospace;">
          <![CDATA[
              <div>You're of course going to need XSLT styles to apply to pages.
              I'll start with the XML I'm using. It's just rendered by the show method from above:</div>
              <pre style="margin:1em 0;color:green;">&lt;event&gt;
    &lt;created-at type="datetime"&gt;2008-04-23T18:36:28+10:00&lt;/created-at&gt;
    &lt;date type="date"&gt;2008-04-23&lt;/date&gt;
    &lt;id type="integer"&gt;1&lt;/id&gt;
    &lt;location&gt;Camperdown Park&lt;/location&gt;
    &lt;title&gt;Cardboard Tube Fighting&lt;/title&gt;
    &lt;updated-at type="datetime"&gt;2008-04-23T18:36:28+10:00&lt;/updated-at&gt;
&lt;/event&gt;</pre>
              
              <div>And this is the XSLT template I'll use to style this.</div>
              <pre style="margin:1em 0;color:green;">&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output method="html" /&gt;
              
&lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates select="event/location" /&gt;
    &lt;xsl:apply-templates select="event/title" /&gt;
&lt;/xsl:template&gt;
              
&lt;xsl:template match="title"&gt;
    &lt;h4&gt;
        &lt;xsl:value-of select="." /&gt;
    &lt;/h4&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="location"&gt;
    &lt;h1&gt;
        &lt;xsl:value-of select="." /&gt;
    &lt;/h1&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
          ]]>
      </c:sourceContent>
      <c:comment>
          <c:comment1>
              <![CDATA[]]>
          </c:comment1>
      </c:comment>
  </c:entry>
  
  
  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
      <c:title>Smile like a bandit!</c:title>
      <c:desc>
          <c:desc1> <![CDATA[]]></c:desc1>
      </c:desc>
      <c:sourceContent type="html" title="" id="sourceContent1" style="background-color:transparent;"
          titleStyle="padding-left:0;color:black;font-size:1.8em;background-color:white;"
          bodyStyle="background-color:white;padding:0;font-size:1.2em;line-height:1.3;font-family:monospace;">
          <![CDATA[
              terminal: script/server
              Navigate to the path of your method and voila you've just applied an XSLT style to your XML stream dynamically.
          ]]>
      </c:sourceContent>
      <c:comment>
          <c:comment1>
              <![CDATA[]]>
          </c:comment1>
      </c:comment>
  </c:entry>


</c:component>
