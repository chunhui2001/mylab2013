<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">

  <c:abstract>
    <![CDATA[]]>
  </c:abstract>

  <c:entry>
    <c:title>生成 struts2-archetype-starter 启动器项目</c:title>
    <c:desc>
      <c:desc1> <![CDATA[通过该启动器创建的项目包含所有基本元素以及大多数 Web 应用将要使用到的公共 Struts2 插件]]></c:desc1>
    </c:desc>

    <c:sourceContent type="" title=""
                     id="sourceContent1"><![CDATA[mvn archetype:generate -B  
    -DgroupId=com.test.mysite 
    -DartifactId=mysite 
    -DarchetypeGroupId=org.apache.struts 
    -DarchetypeArtifactId=struts2-archetype-starter


// 运行 Servlet 容器 (需进入 pom.xml 文件所在目录)
mvn -Djetty.port=9999 jetty:run

// 安装
mvn clean install

// 打包
mvn package]]></c:sourceContent>

    <c:sourceContent type="html" title="目录结构"
                     id="sourceContent1">
      <![CDATA[
      <div>
<img src="http://farm4.staticflickr.com/3679/13261559325_59723e80dc_b.jpg" 
      style="border:solid 1px gray;float:left;margin-right:1em;
            border-top-right-radius:8px;
            border-top-left-radius:8px;
            border-bottom-right-radius:8px;
            border-bottom-left-radius:8px;" alt="" />
<div>
  <span><span style="font-weight:bold;color:red;">src 目录</span> 是所有代码的根目录，在该目录下包含 main 目录和 test 目录，只有在 src 目录下的内容才会被打包到最终软件制品中去。</span><br />
  <span><span style="font-weight:bold;color:red;">resource 目录</span> 包含属性、XML、配置文件</span><br />
  <span><span style="font-weight:bold;color:red;">aspects 目录</span> 当 AspectJ 插件被包含进来时，会出现该目录</span><br />
  <span><span style="font-weight:bold;color:red;">groovy 目录</span> 包含 Groovy 脚本以备执行 (<a target="_blank" href="http://groovy.codehaus.org/Chinese+Home">Groovy</a> 是一种动态脚本语言，语法和 Java 很相似，可以直接执行也可以向下编译成字节码。) </span><br />  
  <span><span style="font-weight:bold;color:red;">webapp 目录</span> 对于打包成 war 文件的软件制品，该目录包含 WAR 文件所需的其它信息，而 EAR 或 JAR 不需要这些信息</span><br />
</div>
<div class="clear"></div>
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="" title="Maven2 配置文件"
                     id="sourceContent1"><![CDATA[<project>      
    <!-- modelVersion 该值表示 Maven2 的模型版本 -->
    <modelVersion>4.0.0</modelVersion> 
    
    <groupId>com.mytest.webapp</groupId>
    <artifactId>webapp</artifactId>
    
    <!-- 如果是 web 项目，那么该值总是 war (也可以是 jar) -->
    <!-- 如果项目中是一个包含了 Web 组件、EJB 组件或其它资源的 J2EE 应用，那么 packaging 的值就是 ear -->
    <packaging>war</packaging>       
    
    <!-- version 的值可以保持不变。当组件作为产品发布时，version 的值需改成 1.0，随之进一步的开发可以做相应递增。 -->
    <version>1.0-SNAPSHOT</version>
    
    <!-- 在启动器应用的代码生成之后可以修改 name、url、description 的默认值，这三个元素用来描述开发者和使用者的信息 -->
    <name>Struts 2 Starter</name>
    <url>http://www.myComp.com</url>
    <description>Struts 2 Starter</description>
    .........
</project>]]></c:sourceContent>

    <c:sourceContent type="" title="依赖项的配置"
                     id="sourceContent1"><![CDATA[<project>      
    .........
    <dependencies>
        <!-- jUnit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        
        <!-- Struts2 -->
        <dependency>
            <groupId>org.apache.struts</groupId>
            <artifactId>struts2-core</artifactId>
            <version>2.0.9</version>
        </dependency>
        
        <!-- Servlet & Jsp -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.4</version>
            <scope>provided</scope>
        </dependency>
        ........
    </dependencies>
    .........
</project>]]></c:sourceContent>

    <c:sourceContent type="" title="控制构建过程&#8212;build"
                     id="sourceContent1"><![CDATA[<project>      
    .........
    <build>
        <!-- finalName 用于覆盖最终产品名字: myapp.war (设置), myapp-1.0-SNAPSHOT.war(不设置) -->
        <finalName>myapp</finalName> 
        <plugins>
            <plugin>
                 <artifactId>maven-compiler-plugin</artifactId>   <!-- Java5 编译器 -->
                 <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                 </configuration>
            </plugin>
            <plugin>
                <groupId>org.mortbay.jetty</groupId>              <!-- Servlet 容器 -->
                <artifactId>maven-jetty-plugin</artifactId>
                <version>6.0.1</version>
                <configuration>
                    <!-- 默认 8080 端口 -->
                     
                    <!-- 告诉 Jetty 10 秒钟检查一次 war 文件，一旦发生变化就重新加载应用 -->
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                </configuration>
            </plugin>
        </plugins>
    </build>
    .........
</project>]]></c:sourceContent>

    <c:sourceContent type="" title="struts2-archetype-starter 启动器包含的插件"
                     id="sourceContent1"><![CDATA[<project>      
    .........
    <dependencies>
        <!-- sitemesh -->
        <dependency>
            <!-- sitemesh 提供一套初始用户界面 -->
            <!-- sitemesh 利用过滤器拦截 Struts2 结果然后往结果里增加其他 HTML 代码 -->
            <!-- 启动器生成的 WEB-INF/decorators.xml 文件中给出了 URL 模式与装饰器之间的映射信息 -->
            <!-- WEB-INF/decorators/main.jsp 中定义了 3 个非常有用的标签: <decorator:title />，<decorator:head />，<decorator:body /> -->
            <!-- <decorator:title /> 将原始页面的 title 插入装饰器模板 -->
            <!-- <decorator:head /> 将原始页面的 head 标签里的内容插入装饰器模板 -->
            <!-- <decorator:body /> 将原始页面的 body 标签里的内容插入装饰器模板 -->
            <!-- 原始页面并不需要引用装时器模板文件，这是一种松耦合的可选机制 -->
            <groupId>org.apache.struts</groupId>
            <artifactId>struts2-sitemesh-plugin</artifactId>
            <version>2.0.9</version>
        </dependency>
        
        <!-- spring -->
        <dependency>
            <groupId>org.apache.struts</groupId>
            <artifactId>struts2-spring-plugin</artifactId>
            <version>2.0.9</version>
        </dependency>
    </dependencies>
    .........
</project>

<!-- 修改 web.xml 配置文件，使插件工作 --> 
<context-param>
    <!-- 指定 applicationContext.xml 配置文件的存放位置 -->
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:applicationContext*.xml</param-value>
</context-param>

<listener>
    <!-- 该监听器用于访问 spring 上下文 -->
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>


<!-- 为 sitemesh 定义过滤器 -->
<filter>
    <filter-name>action2-cleanup</filter-name>
    <filter-class>org.apache.struts2.dispather.ActionContextCleanUp</filter-class>
</filter>
<filter>
    <filter-name>sitemesh</filter-name>
    <filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
</filter>
<filter>
    <filter-name>action2</filter-name>
    <filter-class>org.apache.struts2.dispather.FilterDispather</filter-class>
</filter>

<filter-mapping>
    <filter-name>action2-cleanup</filter-name>
    <filter-class>/*</filter-class>
</filter-mapping>
<filter-mapping>
    <filter-name>sitemesh</filter-name>
    <filter-class>/*</filter-class>
</filter-mapping>
<filter-mapping>
    <filter-name>action2</filter-name>
    <filter-class>/*</filter-class>
</filter-mapping>]]></c:sourceContent>
    
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>
  
  <c:entry style="margin-top:2em;">
    <c:title>显示第一个页面 index.action</c:title>
    <c:desc>
      <c:desc1> <![CDATA[运行 servlet 容器, jetty:run --> http://localhost:8080/app --> http://localhost:8080/app/index.action ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="IndexAction.java" style="border-bottom:none;"
                      id="sourceContent1"><![CDATA[@Conversion()
public class IndexAction extends ActionSupport {
    // Struts2 为每个请求创建一个新的 action 实例，所以实例中类的成员变量是每个请求独有的，因此可以使用该成员变量传递数据 (当然也可以使用方法中的局部变量)
    // Struts1.x 在多个请求中共享 action 实例，无法保证线程安全，因此只能使用方法中的局部变量
    private Date now = new Date(System.currentTimeMillis());
    
    @TypeConversion(converter = "com.fdar.apress.s2.DateConverter")
    public Date getDateNow() { 
        return this.now;        // 任何类属性都可以在获取方法和设置方法中使用
    }
          
    public String execute() {
        // 使用方法中的局部变量
        now = new Date(System.currentTimeMillis());
        return SUCCESS;
    }
}]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" style="border-top:none;"
                      id="sourceContent1"><![CDATA[<!-- src/main/resources/struts.xml -->
<struts>
    <package name="myPackage" extends="struts-default">
        <action name="index" class="com.mypackagename.IndexAction">
            <!-- 注意该 action 没有提供 namespace 属性 -->
            <!-- result 的 name 属性默认是 success，type 属性默认是 jsp -->
            <result>/jsp/index.jsp</result>
        </action>
    </package>
</struts>]]></c:sourceContent>
    
    <c:sourceContent type="" title="/jsp/index.jsp"
                      id="sourceContent1"><![CDATA[<%@taglib prefix="s" uri="/struts-tags" %>
      
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <title>Index</title>
        <s:head />
    </head>
    <body>
        <s:form action="helloWorld">
            <s:textfield name="name" label="What is your name?" />
            <s:textfield name="dateNow" label="What is the date?" />
                
            <s:submit />
        </s:form>
    </body>
</html>]]></c:sourceContent>
    <c:sourceContent type="" title="helloWorldAction.java" style="border-bottom:none;"
                      id="sourceContent1"><![CDATA[@Validation()      // 类级别注释告诉 Struts2 该类具有验证功能
@Conversion()
public class HelloWorldAction extends ActionSupport {
    private Date now;
    private String name;
    
    @TypeConversion (converter = "com.mypackage.DateConverter")
    @RequiredFieldValidator (message = "Please enter the date")
    public void setDateNow(Date now) {
        this.now = now;
    }
    
    public Date getDateNow() {
        return this.now;
    }
    
    @RequiredStringValidator (message = "Please enter a name", tirm = true)
    public void setName(String name) {
        this.name = name;
    }
    
    public String getName() {
        return this.name;
    }
    
    public String execute() thorws Exception {
        return SUCCESS;
    }
}]]></c:sourceContent>
    <c:sourceContent type="" title="" style="border-top:none;border-bottom:none;"
                      id="sourceContent1"><![CDATA[<!-- src/main/resources/struts.xml -->
<struts>
    <package name="myPackage" extends="struts-default">
        <!-- 让 Spring 管理 action 的创建，需将 class 属性设置成 spring bean 的 id -->
        <action name="helloWorld" class="helloWorldAction">
            <result name="input">/jsp/index.jsp</result>
            <result>/jsp/helloWrold.jsp</result>
        </action>
    </package>
</struts>]]></c:sourceContent>
    <c:sourceContent type="" title="" style="border-top:none;"
                      id="sourceContent1"><![CDATA[<!-- src/main/resources/applicationContext.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC 
       "-//SPRING//DTD BEAN//EN" 
       "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
  <bean id="helloWorldAction"
        class="com.mystruts.web.HelloWorldAction" singleton="false" />
</beans>]]></c:sourceContent>

    <c:sourceContent type="" title="/jsp/helloWrold.jsp"
                  id="sourceContent1"><![CDATA[<%@taglib prefix="s" uri="/struts-tags" %>
      
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <title>Hello world!</title>
        <s:head />
    </head>
    <body>
        Hello <s:property name="name" />，today is <s:property name="dateNow" />
    </body>
</html>]]></c:sourceContent>

    <c:sourceContent type="" title="自定义数据类型转换"
                  id="sourceContent1"><![CDATA[/* Struts2 可以处理许多基本数据类型的转换，如: Boolean、char、Character、int、Integer、float、Float、etc. */
/* 可以编写自定义类型转换器，实现特殊转换 */
      
public class DateConverter extends StrutsTypeConverter {          
    public Object convertFromString (Map context, String[] values, Class toClass) {
        // values 定义为数组类型，是为了处理单个表单名传递多个值得情况
        if (values != null && values.length > 0 
                && values[0] != null && values[0].length() > 0) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
                  
            try {
                return sdf.parse(values[0]);
            } catch (ParseException e) {
                throw new TypeConversionException (e);
            }
                  
            return null;
        }
    }
    
    public String convertToString (Map context, Object o) {
        if (o instanceof Date) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
            return sdf.format((Date) o);
        }
        
        return "";
    }
}]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>测试 action</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title=""
              id="sourceContent1"><![CDATA[public class IndexActionTest extends TestCase {
    public void testIndexAction () throws Exception {
        IndexAction   indexAction = new IndexAction();
        String result = indexAction.execute();
              
        // 也可以为 action 的获取方法和设置方法设置断言
        assertEquals(Action.SUCCESS, result);
    }
}]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
      <c:title>我的第一个应用 s2app</c:title>
      <c:desc>
        <c:desc1> <![CDATA[s2app 是一个社区娱乐应用，可以为喜爱的选手投票，并可以看到投票结果。]]></c:desc1>
      </c:desc>
      <c:sourceContent type="html" title="业务用例1：注册新活动"
                id="sourceContent1"><![CDATA[
                1、查询现存活动判定新活动是否存在 (此项可选，用户可以跳过这项继续下面的步骤) <br />
                2、用户需要登陆 (如果用户没有注册，用户还需要注册)<br />
                3、创建活动，指定活动名称、开始时间、结束时间、投票期限以及时差等等<br />
                4、将选手增加到活动中去]]></c:sourceContent>
      <c:sourceContent type="html" title="业务用例2：投票"
                  id="sourceContent1"><![CDATA[
                  1、登陆 (如果没有注册还需要事先注册) <br />
                  2、登记到用户想要投票的活动<br />
                  3、投票给参加活动的选手]]></c:sourceContent>
      <c:sourceContent type="html" title="业务用例3：查看投票结果"
                  id="sourceContent1"><![CDATA[
                  1、活动结束后马上出现结果，而且能让所有用户看到 (不管用户是否登陆)]]></c:sourceContent>
  
      <c:sourceContent type="html" title="系统用例" style="margin-top:1em;"
                id="sourceContent1"><![CDATA[
                1、注册、更新用户配置、上传头像<br />
                2、创建活动、用户登录、用户注销<br />
                3、搜索活动<br />
                4、发布活动信息<br />
                5、登记到某个活动<br />
                6、投票<br />
                7、查看活动结果]]></c:sourceContent>
  
      <c:sourceContent type="html" title="系统用例" style="margin-top:1em;"
                id="sourceContent1"><![CDATA[
                1、注册、更新用户配置、上传头像<br />
                2、创建活动、用户登录、用户注销<br />
                3、搜索活动<br />
                4、发布活动信息<br />
                5、登记到某个活动<br />
                6、投票<br />
                7、查看活动结果]]></c:sourceContent>
      <c:sourceContent type="html" title="集成技术" style="margin-top:1em;"
                  id="sourceContent1"><![CDATA[
                  1、Hibernate： 使用 JPA (Java Persistence API) 为应用的持久化提供对象关系映射<br />
                  2、Spring：提供业务服务，这是一个将 Struts2 的 action 与持久化层隔开的架构层<br />
                  3、Acegi： 可选组件，用户提供授权和身份验证服务<br />
                  4、Rome： 用来为共享数据产生 RSS Feed<br />
                  5、GWT 和 Dojo： 提供 Ajax 界面]]></c:sourceContent>
  
    
      <c:comment>
        <c:comment1>
          <![CDATA[]]>
        </c:comment1>
      </c:comment>
    </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>s2app 的领域模型</c:title>
    <c:desc>
      <c:desc1> <![CDATA[每个应用都需要用类来表示应用的核心概念，类还包含核心概念之间的不同关系。类和关系一起形成了应用的领域模型。]]></c:desc1>
      <c:desc1> <![CDATA[在敏捷开发过程中，领域模型是逐步完善的。]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title=""
              id="sourceContent1"><![CDATA[
      <img src="//farm4.staticflickr.com/3801/13372272974_306d9d22a2_b.jpg" alt="" />   <br />
      <br />
      <p style="margin:.2em 0">
          <span style="color:red;font-weight:bold;">Event</span> 是模型中的核心领域对象，它为活动的所有基本信息提供属性。该信息被分割成 Progress枚举、Location、Address 和 Broadcase类。
      </p>
      <p style="margin:.2em 0">
          <span style="color:red;font-weight:bold;">Progress</span> 枚举类型提供活动存在的生命周期状态。每个状态允许用户执行特定的任务，例如没有人能够在 CLOSED 或 NO_STARTE 状态时投票。
      </p>
      <p style="margin:.2em 0">
          <span style="color:red;font-weight:bold;">Location</span> 提供关于活动举办场所的信息，它有两个子类： Address 类提供物理地址，Broadcast 类提供有关活动转播电视台的信息。
      </p>
      <p style="margin:.2em 0">
          <span style="color:red;font-weight:bold;">User</span> 描述当前 Web 应用的当前用户。在本应用中用户不能同时是选手。
      </p>
      <p style="margin:.2em 0">
          <span style="color:red;font-weight:bold;">Contestant</span> 包含 Event 中的选手信息，选手就是参与竞赛活动的人，那些登记到活动的用户可以为选手投票。
      </p>
      <p style="margin:.2em 0">
          <span style="color:red;font-weight:bold;">Voter</span> 描述活动与用户之间的关系，在用户登记投票时就会创建一个 Voter 类实例。当用户投票时，被选定的活动选手就会被记录下来。
      </p>
    ]]></c:sourceContent>
    
    
    
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
      <c:title>敏捷开发</c:title>
      <c:desc>
        <c:desc1> <![CDATA[敏捷开发将注意力集中在使提供的功能让用户直接受益的活动上，同时严格控制功能的膨胀。]]></c:desc1>
        <c:desc1> <![CDATA[产品开发被分割成多个更小的迭代过程 (每个迭代过程平均 2-6 个星期)]]></c:desc1>
        <c:desc1> <![CDATA[在每次迭代中，待完成特性要经历挑选、计划、实现、测试以及由客户或产品经理签出等阶段。]]></c:desc1>
        <c:desc1> <![CDATA[在每次迭代完成后还要检查整个迭代过程，看看还有哪些方面需要完善 (例如: 特性实现方面、管理方面、过程方面)]]></c:desc1>
      </c:desc>
      <c:sourceContent type="html" title=""
                id="sourceContent1"><![CDATA[
        
      ]]></c:sourceContent>
    
    
    
      <c:comment>
        <c:comment1>
          <![CDATA[]]>
        </c:comment1>
      </c:comment>
    </c:entry>

  <c:entry style="margin-top:2em;">
        <c:title>为 s2app 集成持久化层</c:title>
        <c:desc>
          <c:desc1> <![CDATA[本应用将使用 Hibernate 提供的 JPA 扩展，而不是使用自定义 Hibernate 映射机制。]]></c:desc1>
          <c:desc1> <![CDATA[JPA 是 J2EE 映射和持久化数据到数据库的标准方案。]]></c:desc1>
        </c:desc>
        <c:sourceContent type="" title="添加 Hibernate 依赖"
                  id="sourceContent1"><![CDATA[<project>
  <repositories>
      <!-- 添加 Hibernate 本地存储库 -->
      <repository>
          <id>jboss</id>
          <url>http://repository.jboss.com/maven2</url>
      </repository>
  </repositories>
          
  <dependencies>
    <!-- hibernate -->
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate</artifactId>
        <version>3.2.1.ga</version>
    </dependency>
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-annotations</artifactId>
        <version>3.2.1.ga</version>
    </dependency>
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-entitymanager</artifactId>
        <version>3.2.1.ga</version>
    </dependency>
    
    <!-- mysql -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>3.1.14</version>
    </dependency>
    
    <!-- JPA (理论上 JPA 依赖项需要到 sun 网站上下载，但是 JBoxx 存储库提供了 JPA 依赖而无需手动安装本地依赖。) -->
    <dependency>
        <groupId>javax.persistence</groupId>
        <artifactId>persistence-api</artifactId>
        <version>1.0</version>
    </dependency>
    <dependency>
        <groupId>javax.transaction</groupId>
        <artifactId>jta</artifactId>
        <version>1.0.1B</version>
    </dependency>
  </dependencies>
</project>]]></c:sourceContent>

    <c:sourceContent type="" title="创建 MySQL 数据库"
                  id="sourceContent1">
      
    </c:sourceContent>
        <c:comment>
          <c:comment1>
            <![CDATA[]]>
          </c:comment1>
        </c:comment>
      </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>创建 MySQL 数据库</c:title>
    <c:desc>
      <c:desc1> <![CDATA[MySQL 下载地址: <a href="http://dev.mysql.com/download/mysql/4.1.html">http://dev.mysql.com/download/mysql/4.1.html</a> ]]></c:desc1>
    </c:desc>
    

    <c:sourceContent type="html" title=""
                  id="sourceContent1">
<![CDATA[1. 创建数据库： create database s2app;<br />
2. 创建的数据库结构图如下： <br />
<img width="500px" src="//farm4.staticflickr.com/3779/13376885253_372dcbe485_b.jpg" alt="" />]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>配置 JPA</c:title>
    <c:desc>
      <c:desc1> <![CDATA[ ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="/src/main/resources/META-INF/persistence.xml"
                  id="sourceContent1"><![CDATA[<persistence>
    <persistence-unit name="s2appsql">
        <!-- 使用 Hibernate 提供的 JPA 实现 (也可以使用 Top Link 或者 IBM 提供的 JPA 实现) -->
        <provider>org.hibernate.ejb.HibernatePersistence</provider>
        <properties>
            <property name="hibernate.dialect"
                      value="org.hibernate.dialect.MySQLDialect" />
            <property name="hibernate.connection.driver_class"
                      value="com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource" />
            <property name="hibernate.connection.url"
                      value="jdbc:mysql://localhost/s2app" />
            <property name="hibernate.connection.username" value="root" />
            <property name="hibernate.connection.password" value="password" />
            <property name="hibernate.hbm2ddl.auto" value="update" />
            <property name="hibernate.archive.autodetection" value="class" />
            <property name="hibernate.show_sql" value="true" />
            <property name="hibernate.format_sql" value="true" />
        </properties>
    </persistence-unit>
</persistence>]]></c:sourceContent>
    <c:sourceContent type="" title="persistence.xml 文件中与数据库相关的属性"
                  id="sourceContent1">
      <![CDATA[...]]>
    </c:sourceContent>
    <c:sourceContent type="" title="persistence.xml 文件中与 Hibernate 相关的属性"
                  id="sourceContent1">
      <![CDATA[...]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>
  </c:component>