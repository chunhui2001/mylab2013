<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">

  <c:abstract>
    <![CDATA[Hibernate 是一个非常流行的 ORM 框架，JPA 是一个使用持久化技术的新标准接口。可以使用 JPA 标准编码，然后底层使用 Hibernate。]]>
  </c:abstract>

  <c:entry>
    <c:title>使用接口隐藏实现</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title=""
                     id="sourceContent1"><![CDATA[public interface PortfolioServiceInterface {
    public Boolean userExists (String username);
    public void updateUser (User user);
    public void addImage (File image);
    public User authenticateUser (String username, String password);
    public Collection getUsers ();
    public Collection getAllPortfolios ();
    public User getUser (String username);
    public User getUser (Long userid);
    public Portfolio getPortfolio (Long id);
    public User getDefaultUser ();
    public void persistUser (User user);
    public Boolean contains (User user);
    public void updatePortfolio (Portfolio portfolio);
}]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[Spring 的 applicationContext.xml 文件会告诉我们如何创建对象，所以这里完全移除了创建对象的代码。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>重构之后的动作</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title=""
                     id="sourceContent1"><![CDATA[public class Login extends ActionSupport implements SessionAware {
    private String username;
    
    public String getUsername () {
        retur this.username;
    }
    
    public void setUsername (String username) {
        this.username = username;
    }    
    
    public String password;
    
    public String getPassword () {
        return this.password;
    }
    
    public void setPassword (String password) {
        this.password = password;
    }
    
    private PortfilioServiceInterface portfolioService;
      
    public void setPortfolioService (PortfolioService portfolioService) {
        this.portfolioService = portfolioService;
    }
      
    public PortfolioService getPortfolioService() {
        return this.portfolioService;
    }
    
    public void execute () {
        User user = getPortfolioService().authenticateUser (getUsername(), getPassword());
        
        if (user == null) {
            return INPUT;
        } else {
            session.put (Struts2PortfolioConstants.USER, user);
        }
        
        return SUCCESS;
    }
    
    private Map session;
    
    public void setSession (Map session) {
        this.session = session;
    } 
}]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[Spring 的 applicationContext.xml 文件会告诉我们如何创建对象，所以这里完全移除了创建对象的代码。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>将 Spring 添加到 Struts2</c:title>
    <c:desc>
      <c:desc1><![CDATA[取得 Spring 的 <a target="_blank" href="http://www.springframework.org">spring.jar</a> 文件，
      并让 Spring 提供一个对 Struts2 ObjectFactory 的扩展。]]></c:desc1>
      <c:desc1> <![CDATA[使用 <a target="_blank" href="http://cwiki.apache.org/S2PLUGINS/home.html">struts2-spring-plugin-2.x.x.jar</a> 插件为 ObjectFactory 提供的扩展，管理 Struts2 动作的创建过程。]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title=""
                     id="sourceContent1"><![CDATA[<!-- 将 struts2-spring-plugin-2.x.x.jar 和 spring.jar 添加到类路径。 -->
<!-- 启用 Spring 应用程序上下文监听器，在 web.xml 中添加如下节点 -->
<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>


<!-- 在 Spring 配置文件中把 Struts2 动作声明为 Spring Bean 对象。 -->
<!-- 默认情况下，ContextLoaserListener 创建的 Spring 容器会查找 /WEB-INF/applicationContext.xml 文件中的元数据。 -->
<!-- 可以指定不同的位置，也可以指定多个文件。 -->]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>让 Spring 管理动作、拦截器、和结果的创建</c:title>
    <c:desc>
      <c:desc1>
        <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="applicationContext.xml"
                     id="sourceContent1"><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
    
    <bean id="portfolioService" class="manning.packagename.PortfolioServiceImpl" />
    
    <!-- 默认情况下，Spring Bean 以单例模式创建，这并不适合 Struts2 动作。 -->
    <!-- 为了在每次需要 Login 动作的时候都让 Spring 创建一个新的 Login 实例，需要把 scope 属性设置为 prototype。 -->
    <!-- 如果想让框架请求 Spring 创建一个 Spring Bean，我们需要在 Struts2 动作映射中引用 Spring Bean 的 ID -->
    <bean id="springManagedLoginAction" class="mypackagename.Login"
          scope="prototype">
        <property name="portfolioService" ref="portfolioService" />
    </bean>
</beans>


<!-- 集成 Spring 的最后一件事, 使用 Spring Bean ID 填充 class 属性 -->
<action name="Login" class="springManagedLoginAction">
    <result type="redirectAction">
        <param name="actionName">AdminPortfolio</param>
        <param name="namespace">/chapterEight/secure</param>        
    </result>
    
    <result name="input">/chapterEight/Login.jsp</result>
</action>]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>使用自动连线将依赖注入到动作、拦截器、结果</c:title>
    <c:desc>
      <c:desc1>
        <![CDATA[]]>
      </c:desc1>
    </c:desc>
    <c:sourceContent type="" title="applicationContext.xml"
                     id="sourceContent1">
      <![CDATA[。。。]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>
</c:component>