<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">

  <c:abstract>
    <![CDATA[]]>
  </c:abstract>

  <c:entry>
    <c:title>OGNL 之表达式语言</c:title>
    <c:desc>
      <c:desc1> <![CDATA[OGNL 包含两件事：表达式语言和类型转换器]]></c:desc1>
      <c:desc1> <![CDATA[OGNL 创建了数据流经框架的路径。帮助将数据从请求参数移动到动作的 JavaBean 属性，并且从这些属性移动到将要呈现的 HTML 页面。]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="一个使用 OGNL 表达式语言的 Struts2 标签" 
                     id="sourceContent1"><![CDATA[<h5>The <s:property value="portfolieName" /> Portfolio</h5>]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[Struts2 property 标签从某个 Java 对象的一个属性中取值。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[OGNL 可以访问 Java 对象上的方法，但是表达式语言的设计思路是简化对数据的访问。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>OGNL 之类型转换</c:title>
    <c:desc>
      <c:desc1> <![CDATA[OGNL 包含两件事：表达式语言和类型转换器]]></c:desc1>
      <c:desc1> <![CDATA[每一次数据移入或移出 Java 环境，必须在驻留在 HTML 中的字符串数据和合适的 Java 数据类型之间发生数据转换。]]></c:desc1>
      <c:desc1> <![CDATA[OGNL 提供种类繁多的数据转换，包括原始类型也包括各种各样的集合类型]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title=""
                     id="sourceContent1"><![CDATA[]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>OGNL 如何融入框架</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="数据进入和离开框架的路径"
                     id="sourceContent1">
                       <![CDATA[
                     <img src="http://farm8.staticflickr.com/7304/12785383085_a2278e9891_b.jpg" alt="数据进入和离开框架的路径" />
                     ]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>数据如何传入框架</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title=""
                     id="sourceContent1">
      <![CDATA[]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[Struts2 建立在 Servlet API 之上，请求参数被作为名值对存储，名字和值都是 String 类型。当请求进入框架时，请求数据被放到 HttpServletRequest 对象上公开给 Java 语言。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[params 拦截器将会把请求对象的数据转移到 ValueStack 上，同时把参数的名字映射到 ValueStack 上的一个真实属性， 并且把请求参数的名字解析为一个 OGNL 表达式用于在 ValueStack 上定位正确的目标属性。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[当框架自动将参数转移到动作对象时，动作对象被置于叫做 ValueStack 的对象上。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[ValueStack 是一种虚拟对象，他能够把它包含的对象的属性像自己的属性一样提供出来。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[例如请求参数 user.age：ValueStack 提供了它包的的对象的属性。因此 ValueStack 确实有一个 user 属性，紧接着 user 有一个 叫做 age 的属性。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>数据如何流出框架</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title=""
                     id="sourceContent1">
      <![CDATA[]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[当结果开始自己的呈现过程时，它通过 Struts2 标签中的 OGNL 表达式语言访问 ValueStack。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[这些标签会通过使用 OGNL 表达式引用特定值从 ValueStack 中的取得数据。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>内建的类型转换器 &#8212; 立即可用的类型转换器</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title=""
                     id="sourceContent1">
      <![CDATA[<span style="font-weight:bold;">&radic;</span> String,有时候 String 就是 String<br />
<span style="font-weight:bold;">&radic;</span> boolean/Boolean, true 和 false 字符串可以被转换为 Boolean 的原始类型和对象类型<br />
<span style="font-weight:bold;">&radic;</span> char/Character, 原始类型或者对象类型<br />
<span style="font-weight:bold;">&radic;</span> int/Integer、float/Float、long/Long、double/Double, 原始类型或者对象类型<br />
<span style="font-weight:bold;">&radic;</span> Date, 当前 Locale 的 SHORT 格式的字符串版本 (例如：12/10/1971)<br />
<span style="font-weight:bold;">&radic;</span> Array, 每一个字符串元素必须能够转换为数组的类型<br />
<span style="font-weight:bold;">&radic;</span> List, 默认情况下使用 String 填充。<br />
<span style="font-weight:bold;">&radic;</span> Map, 默认情况下使用 String 填充。]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[当框架定位到一个给定的 OGNL 表达式指向的 Java 属性时，它会查找相应的类型转换器。如果类型在上述列表中，则不需要做任何事情，等着接收数据就行。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>使用 OGNL 表达式从表单字段名映射到属性</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="指向 ValueStack 上特定属性的 OGNL 表达式"
                     id="sourceContent1"><![CDATA[<s:form action="Register">
    <s:textfield name="user.userName" lable="User Name" />
    <s:password name="user.password" lable="Password" />
    <s:textfield name="user.portfolioName" lable="Enter a name" />
    <s:textfield name="user.age" lable="Enter your age as a double" />
    <s:textfield name="user.birthday" lable="Enter birthday. (mm/dd/yy)" />
</s:form>
]]></c:sourceContent>
    
    <c:sourceContent style="margin-top:1em;"
      type="" title="User 对象的 JavaBean 属性"
      id="sourceContent1"><![CDATA[private User user;
      
public User getUser() {
    return this.user;
}
      
public void setUser(User user) {
    this.user = user;
}
]]></c:sourceContent>

    <c:sourceContent style="margin-top:1em;"
      type="" title="User 类"
      id="sourceContent1"><![CDATA[public class User {
    private String userName;
    private String password;
    private String protfolioName;
    private Double age;
    private Date birthday;
    
    public String getUserName() {
        return this.userName;
    }
    
    public void setUserName(String userName) {
        this.userName = userName;
    }
    
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    
    public String getPortfolioName() {
        return this.portfolioName;
    }
    
    public void setPortfolioName(String portfolioName) {
        this.portfolioName = portfolioName;
    }
    
    public Double getAge() {
        return this.age;
    }
    
    public void setAge(Double age) {
      this.age = age;
    }
    
    public Date getBirthday() {
        return this.birthday;
    }
    
    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }
}]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[像 user.birthday 这样的 OGNL 表达式会先找到到动作上的 user 属性, 之后再找到 user 对象上的 birthday 属性。这变成了以下的代码片段:<br />
        <span style="color:green;font-weight:bold;">getUser().getBirthday()</span>]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[OGNL 看到 birthday 属性是 Date 类型，会定位到 String-to-Date 类型转换器。如果待转换的数据非法则抛出一个异常。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[注意类型转换和验证之间的区别，验证代码通过 validation 或者 workflow 拦截器对 validate() 方法的调用而触发。而类型转换发生在 HTTP 字符串绑定到 Java 类时，例如在 params 拦截器转移请求数据时发生。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[类型转换错误导致用户被返回到输入页面，可以自定义类型转换问题的错误消息。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>OGNL 数据转移之数组</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="JSP 表单"
                     id="sourceContent1"><![CDATA[<s:form action="ArrayDataTransferTest">
    <s:textfield name="ages" lable="Ages" />
    <s:textfield name="ages" lable="Ages" />
    <s:textfield name="ages" lable="Ages" />
    
    <s:textfield name="names[0]" lable="names" />
    <s:textfield name="names[1]" lable="names" />
    <s:textfield name="names[2]" lable="names" />
</s:form>]]></c:sourceContent>


    <c:sourceContent type="" title="Action of JavaBean" style="margin-top:1em;"
                     id="sourceContent1"><![CDATA[private Double[] ages;
      
public Double[] getAges() {
    return this.ages;
}
    
public void setAges(Double[] ages) {
    this.ages = ages;
}
    
private String[] names;
    
public String[] getNames() {
    return this.names;
}
    
public void setNames(String[] names) {
    this.names = names;
}]]></c:sourceContent>

    
    <c:comment>
      <c:comment1>
        <![CDATA[这个表单提交 4 个请求参数，前三个字段使用相同的名字。这会提交一个带有三个值得请求参数，这在 HTTP 是有效地。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[请求参数列表如下： <br />
        <table>
            <thead>
                <tr>
                  <th style="padding: 0 .5em;">参数名</th><th style="padding: 0 .5em;">参数值</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                  <td style="padding: 0 .5em;">ages</td><td style="padding: 0 .5em;">11,22,33</td>
                </tr>
                <tr>
                  <td style="padding: 0 .5em;">names[0]</td><td style="padding: 0 .5em;">name1</td>
                </tr>
                <tr>
                  <td style="padding: 0 .5em;">names[1]</td><td style="padding: 0 .5em;">name2</td>
                </tr>
                <tr>
                  <td style="padding: 0 .5em;">names[2]</td><td style="padding: 0 .5em;">name3</td>
                </tr>
            </tbody>
        </table>]]>
      </c:comment1>
    </c:comment>
  </c:entry>
</c:component>