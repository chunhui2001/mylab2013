<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">

  <c:abstract>
    <![CDATA[在开发 AuthenticationInterceptor 拦截器之前应该先整理出一些角色:<br />
    AuthenticationInterceptor 不做身份验证，它只是阻止没有通过身份验证的用户访问安全的动作。<br />
    身份验证由登陆动作完成，登陆动作把用户对象存储在会话作用域映射中。<br />
    AuthenticationInterceptor 检查用户对象是否出现在会话中。验证失败就重定向到登陆页面，终止工作流。]]>
  </c:abstract>

  <c:entry>
    <c:title>com.opensymphony.xwork2.interceptor.Interceptor</c:title>
    <c:desc>
      <c:desc1> <![CDATA[编写自定义拦截器时需要实现 com.opensymphony.xwork2.interceptor.Interceptor 接口]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="" id="sourceContent1"><![CDATA[public interface Interceptor extends Serializable {
    void destory();
    void init();
    String intercept(ActionInvocation invocation) throws Exception;
}]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[其中 interceptor() 方法被 ActionInvocation.invoke() 方法调用。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[如果想编写一个具有参数化类型的拦截器，可以实现 com.opensymphony.xwork2.interceptor.MethodFilterInterceptor 类。因为身份验证拦截器不需要过滤方法，所以我们直接实现 interceptor 接口。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>Login 动作</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent 
      type="" 
      title="Login 动作验证用户身份并将用户存储在会话作用域中" 
      id="sourceContent1"><![CDATA[package manning.chapterFour;


import java.util.Map;

import org.apache.struts2.interceptor.SessionAware;

import manning.chapterFour.utils.PortfolioService;
import manning.chapterFour.utils.User;
import manning.chapterFour.utils.Struts2PortfolioConstants;

import com.opensymphony.xwork2.ActionSupport;

public class Login extends ActionSupport implements SessionAware {
	public String execute(){
		
		User user = getPortfolioService().authenticateUser( getUsername(), getPassword() ); 
		if ( user == null )	{
			/* User not valid, return to input page. */
			return INPUT;
		}
		else{
			session.put( Struts2PortfolioConstants.USER, user );
		}
		
		return SUCCESS;
	}	
	
	/* JavaBeans Properties to Receive Request Parameters */	
	private String username;
	private String password;
	private Map session;


	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	
	public void validate(){
		
		/* Retrieve our simple portfolio service object. */
		PortfolioService ps = getPortfolioService();
		
		/* Check that fields are not empty */
		if ( getPassword().length() == 0 ){			
			addFieldError( "password", getText("password.required") );
		}
		if ( getUsername().length() == 0 ){			
			addFieldError( "username", getText("username.required") );
		}

	}
	
	/*  
	 * Simple way to retrieve our business logic and data peristence
	 * object.  Late versions of the portfolio app will intergrate with
	 * more sophisticated technologies for these services.
	 */
	public PortfolioService getPortfolioService( ) 	{
		
		return new PortfolioService();		
	}

  // 使用 SessionAware 接口以便让会话作用域的映射方便地注入到设置方法。这是 defaultStack 中的 ServletConfigInterceptor 提供的服务之一。
	public void setSession(Map session) {
		this.session = session;		
	}
}]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[如果想编写一个具有参数化类型的拦截器，可以实现 com.opensymphony.xwork2.interceptor.MethodFilterInterceptor 类。因为身份验证拦截器不需要过滤方法，所以我们直接实现 interceptor 接口。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>AuthenticationInterceptor</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent
      type=""
      title="Login 动作验证用户身份并将用户存储在会话作用域中"
      id="sourceContent1"><![CDATA[package manning.chapterFour.utils;

import java.util.Map;

import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.Interceptor;

public class AuthenticationInterceptor implements Interceptor {
	public void destroy() {	}
	public void init() {	}

	public String intercept( ActionInvocation actionInvocation ) throws Exception {
		/* Get the session map from the invocation context ( the ActionContext actually )
		 * and check for the user object.  Note, we are not going directly to the Servlet
		 * API's session object, even though this is most likely the map being returned 
		 * by this code; we need to keep our Struts 2 components cleanly separated from the 
		 * Servlet API so that our testing can be as simple as faking a map, rather than
		 * faking Servlet API objects.
		 */
		Map session = actionInvocation.getInvocationContext().getSession();
		
		/* As a side effect of the structure of this sample application, we might have
		 * stale tokens.  By stale, we mean that a perhaps a user logged in under a different
		 * version of this app, then came to this version.  This would mean that the
		 * User token stored in the session would belong to a different package, as per
		 * our chapter based package structure.  We will handle this by purging any stale
		 * tokens before doing the true work of this interceptor.
		 */		
		purgeStaleTokens(session);
		
		User user = (User) session.get( Struts2PortfolioConstants.USER );
		
		/* 
		 * If use doesn't exist return the LOGIN control string.  This will cause the 
		 * execution of this action to stop and the request will return the globally defined
		 * login result.
		 */
		if (user == null) {
		    return Action.LOGIN;
		} 		
		
		/*
		 * If the user is logged in, get the action, inject the user, then continue the 
		 * execution of this request by invoking the rest of the interceptor stack, and ultimately,
		 * the action. 
		 */
		else {				
		    Action action = ( Action ) actionInvocation.getAction();
		    
		    if (action instanceof UserAware) {
		        ((UserAware)action).setUser(user);
		    }
		    
		    /*
		     * We just return the control string from the invoke method.  If we wanted, we could hold the string for
		     * a few lines and do some post processing.  When we do return the string, execution climbs back out of the 
		     * recursive hole, through the higher up interceptors, and finally arrives back at the actionInvocation itself,
		     * who then fires the result based upon the result string returned.
		     */
		    System.out.println("Logged in: interceptor");
		    return actionInvocation.invoke();
		}
	}
	
	private void purgeStaleTokens (Map session ){		
		/* Due to the structure of our sample app, we might have a User token of a 
		 * different type stored, i.e. a User set into the session scope by one of
		 * the other versions of the app, a different chapter package's User. 
		 * 
		 * If the User token is not of the right type, we'll just throw it away.
		 * A sort of forced logout when switching between versions of the application.
		 */	
		Object userToken = session.get( Struts2PortfolioConstants.USER );
		if ( !( userToken instanceof User ) ) session.remove (Struts2PortfolioConstants.USER ) ;		
	}	
}]]></c:sourceContent>

    <c:sourceContent
      type=""
      title="UserAware"
      id="sourceContent1"><![CDATA[package manning.chapterFour.utils;

/*
 * Simple interface for actions that want have the user object injected.  
 */

public interface UserAware {	
	public void setUser( User user );	
}]]></c:sourceContent>
    <c:sourceContent
      type=""
      title="Struts2PortfolioConstants"
      id="sourceContent1"><![CDATA[package manning.chapterFour.utils;

public interface Struts2PortfolioConstants {	
	public static final String USER = "user";
}]]>    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[拦截器实例在动作之间共享。虽然每个请求都会创建动作的一个新实例，但是拦截器会重用。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[拦截器是无状态的，不要再拦截器中存储与当前正在处理的请求相关的数据。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[拦截器应该只把它的处理逻辑应用在请求数据上，你可以通过 ActionInvocation 访问这些已经存储在不同对象的数据。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>声明拦截器并构建新的默认栈</c:title>
    <c:desc>
      <c:desc1> <![CDATA[把所有需要权限验证的动作放在同一个包中，并构建一个包含 AnthenticationInterceptor 拦截器的自定义栈。之后把它声明为这个安全包的默认拦截器引用。]]></c:desc1>
    </c:desc>
    <c:sourceContent
      type=""
      title=""
      id="sourceContent1"><![CDATA[<package name="name1" namespace="name1/secure" extends="struts-default">
      <interceptors>
          <!-- 声明拦截器 (将 Java 类映射到一个逻辑名) -->
          <interceptor name="authenticationInterceptor" class="packageName.AuthenticationInterceptor" />
          
          <!-- 加入拦截器栈 -->
          <interceptor-stack name="secureStack">
              <!-- 如果没有经过验证则尽快结束请求 -->
              <interceptor-ref name="authenticationInterceptor" />
              <interceptor-ref name="defaultStack" />
          </interceptor-stack>
      </interceptors>
      
      <!-- 设为默认拦截器 -->
      <default-interceptor-ref name="secureStack" />      
      ...
</package>]]></c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[将所有需要权限验证的动作放在这个包中。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[这个包内的所有动作都会有身份验证和自动返回登陆页的功能。]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>Interceptor 总结</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent
      type=""
      title=""
      id="sourceContent1">
      <![CDATA[]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[将常见任务的功能模块化之后，可以简单地使用声明性架构来自定义拦截器栈，以满足特定动作或者包内所有动作的需求。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[Struts2 框架的整个执行模型的核心是 ActionInvocation。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[ActionInvocation 实际上管理着执行过程，它提供一个递归的 invoke() 方法作为进入执行过程的入口点。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[ActionInvocation 跟踪执行过程的状态，并且每次 invoke() 方法被调用时都调用下一个拦截器，知道最终动作被执行。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[熟悉 Struts2 提供的最新拦截器集合，是节省时间、避免重复劳动的关键。]]>
      </c:comment1>
    </c:comment>
  </c:entry>
</c:component>