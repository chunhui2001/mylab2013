<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:entry>
    <c:title>com.opensymphony.xwork2.Action 接口</c:title>
    <c:desc>
      <c:desc1><![CDATA[  ]]></c:desc1>
    </c:desc>
    <c:sourceContent id="sourceContent1">
    <![CDATA[ 
    // 该接口只定义了一个方法
    String execute() throws Exception ;

    // 该接口提供了一些有用的常量, 这些常量可以用作返回值来选择合适的结果。
    public static final String ERROR = "error";
    public static final String INPUT = "input";
    public static final String LOGIN = "login";
    public static final String NONE = "none";
    public static final String SUCCESS = "success";]]>
    </c:sourceContent>
  </c:entry>
  
  <c:entry style="margin-top:1.5em;">
    <c:title>com.opensymphony.xwork2.ActionSupport 类</c:title>
    <c:desc>
      <c:desc1><![CDATA[ 该类提供了 Action 接口和其它几个有用接口的默认实现, 提供了诸如数据验证、错误消息本地化等功能。 ]]></c:desc1>
      <c:desc1>
        <![CDATA[ 这个类的实现也提供了一个优秀的实例来研究 —— 动作如何与拦截器 (interceptor) 协作，来达成日常任务强大的可重用的解决方案。 
                         （ 即: 拦截器控制服务的执行，动作实现接口提供被拦截器调用的方法。)]]></c:desc1>
      <c:desc1>
        <![CDATA[ 值得思考的是: 如何把诸如数据验证这样的横切任务通过使用拦截器和接口剥离到动作的执行逻辑之外。]]>
      </c:desc1>
    </c:desc>
    <c:sourceContent id="sourceContent1">
      <![CDATA[ 
    public class Register extends ActionSupport {
      public String execute () {
        User user = new User();
        user.setPassword(getPassword());
        user.setUserName(getUserName());
        
        return SUCCESS;
      }
      
      private String userName;
      private String password;
      private String portfolioName;
      
      public String getPortfolioName () {
        return this.portfolioName;
      }
      
      public void setPortfolioName ( String portfolioName ) {
        this.portfolioName = portfolioName;
      }
      
      public String getUserName () {
        return this.userName;
      }
      
      public void setUserName ( String userName ) {
        this.userName = userName;
      }
      
      public String getPassword () {
        return this.password;
      }
      
      public void setPassword ( String password ) {
        this.password = password;
      }
      
      // validate() 继承自 com.opensymphony.xwork2.Validateable 接口
      public void validate () {
        if ( getPassowrd().length == 0 ) {
        
          // addFieldError() 继承自 ActionSupport 
          addFieldError ("password", "Password is required!");
        }
        
        if ( getUserName().length == 0 ) {
          addFieldError ("userName", "UserName is required!");
        }
        
        if ( userExists(getUserName()) ) {
          addFieldError ("userName", "The user already exists!");
        }
      }
    }]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[该动作提供了 validate () 方法， 并且被 workflow 拦截器调用。
        如果验证不合法会通过 ActionSupport 的超类提供的方法创建和存储错误消息。<span style="color:rgb(0, 211, 255);font-weight:bold;">( 注意: 该方法没有返回值 )</span>]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:1.5em;">
    <c:title>com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor 拦截器</c:title>
    <c:desc>
      <c:desc1><![CDATA[ActionSupport 实现了两个接口并与 DefaultWorkflowInterceptor 拦截器配合提供基本的验证。]]></c:desc1>
      <c:desc1><![CDATA[该拦截器被称作工作流拦截器, 因为验证失败时候会把处理流程重定向到输入页面。]]></c:desc1>
    </c:desc>
    <c:sourceContent id="sourceContent1">
    <![CDATA[ 
    <!-- 来自 struts-defult.xml 文件的 DefaultWorkflowInterceptor 声明 -->
    <interceptor name="workflow" 
                 class="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor" />
                 
    <interceptor-stack name="defaultStack">
    
      <!-- params 拦截器将请求数据转移到动作对象之上 -->
      <interceptor-ref name="params" />
      
      <!-- workflow 拦截器必须在数据转移到动作对象之后出发 -->
      <interceptor-ref name="workflow">
        <param name="excludeMethons">input, back, cancel, browse</param>
      </interceptor-ref>
    </interceptor-stack>    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[在所有验证逻辑执行完毕之后，处理流程回到 workflow 拦截器并检查验证逻辑是否产生了错误消息。
        如果找到了错误消息 workflow 拦截器会改变请求的工作流程。( 即: 立即终止请求处理，将用户带回到输入表单，并在表单中显示合适的错误消息。 )]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[<span style="color:red;font-weight:bold;text-decoration:underline;">workflow 拦截器致力于将横切任务从动作的执行逻辑中转移出去。</span>
        当 workflow 拦截器触发时，它首先在动作上查找 valicate() 方法。这个方法通过 com.opensymphony.xwork2.Validateable 公开出来。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[控制流的分离使得 workflow 拦截器在进入动作的 execute() 方法之前可以终止整个请求处理并且重定向回输入页面。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[<span style="color:red;font-weight:bold;text-decoration:underline;">com.opensymphony.xwork2.ValidationAware</span> 接口定义了存储和获取错误消息的方法。
        如果发现错误信息，会选择名字为 input 的结果。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[虽然验证方法仍然在动作内部，但是这并没有污染最重要的关注点分离。验证逻辑与动作执行逻辑清楚的分离了。这使得我们的动作关注自身纯粹的工作单元。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[将验证逻辑从 execute() 方法中抽出成为可读性更强的辅助方法。验证的工作流程也从动作的工作流程中抽出，workflow 拦截器控制着验证逻辑的执行。]]>
      </c:comment1>
      <c:comment1>
        <![CDATA[<span style="color:red;font-weight:bold;text-decoration:underline;">动作如何与拦截器协作</span>]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:1.5em;">
    <c:title>消息本地化</c:title>
    <c:desc>
      <c:desc1><![CDATA[ActionSupport 实现了两个接口，它们协作提供了本地化消息文本功能。]]></c:desc1>
    </c:desc>
    <c:sourceContent id="sourceContent1">
      <![CDATA[ 
      com.opensymphony.xwork2.TextProvider    // 提供了对消息的访问
    
    
      public void validate () {
        if ( getPassowrd().length == 0 ) {        
          addFieldError("password", getText("password.required"));
        }
        
        if ( getUserName().length == 0 ) {
          addFieldError("userName", getText("username.required"));
        }
        
        if ( userExists(getUserName()) ) {
          addFieldError("userName", getText("username.exists"));
        }
      }
        
        
      // 与 Register 动作关联的属性文件，把它放在包含 Register 动作的 Java 包中。
      Register.properties
        
      password.required=Password is required!
      username.required=UserName is required!
      username.exists=The user already exists!
      
      
      
      
      com.opensymphony.xwork2.LocaleProvider    // 提供了一个基本的国际化解决方案, getLocale() 根据浏览器发来的地域设置取得用户所在的地域，并根据地域定位属性文件。
                                                // package.properties
                                                // package_es.properties 为当前地域提供属性文件]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:1.5em;">
    <c:title>向对象传递数据</c:title>
    <c:desc>
      <c:desc1><![CDATA[使用复杂对象而不是简单的 JavaBean 属性实现数据的转移，基于应用程序域对象转移、验证、绑定数据。]]></c:desc1>
      <c:desc1><![CDATA[有两种选择实现这样深层次的数据转移：<br />
      1. 公开一个复杂对象作为 JavaBean 属性<br />
      2. 使用被称为 ModelDriven 的动作，这涉及到一个简单的接口和另一个默认的拦截器。]]></c:desc1>
    </c:desc>
    <c:sourceContent id="sourceContent1">
<![CDATA[// 将 User 作为 JavaBean 的属性      
private User user;
      
public void setUser(User user) {
  this.user = user;
}
      
public User getUser() {
  return this.user;
}
      
public String execute () {
  // The user's data already migrated successed
        
  return SUCCESS;
}
      
      
      
// 引用数据的方式需要做的改变
<s:textfield name="user.userName" lable="User Name: " />
]]></c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[域对象用作数据转移的一个潜在危险是: 一些敏感的数据属性被公开给客户端！]]>
      </c:comment1>
    </c:comment>
  </c:entry>
</c:component>