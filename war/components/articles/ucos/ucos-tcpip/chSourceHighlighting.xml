<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
<div>
  实时多任务操作系统(RTOS)是嵌入式应用软件的基础和开发平台。目前，商品化的RTOS可支持从8BIT的8051到32BIT的PowerPC及DSP等几十个系列的嵌入式处理器。提供高质量源代码RTOS的著名公司主要集中在美国。
</div>
<div style="margin-top:.625em;">
  目前在中国大多数嵌入式软件开发还是基于处理器直接编写，没有采用商品化的RTOS，不能将系统软件和应用软件分开处理。<b style="color:red;">RTOS是一段嵌入在目标代码中的软件，用户的其它应用程序都建立在RTOS之上。</b>不但如此，<b style="color:blue;">RTOS还是一个可靠性和可信性很高的实时内核，将CPU时间、中断、I/O、定时器等资源都包装起来，留给用户一个标准的API，并根据各个任务的优先级，合理地在不同任务之间分配CPU时间</b>。
</div>
<div style="margin-top:.625em;">
  &mu;C/TCP-IP由3个任务组成，一个用于处理包接收(接收任务)，一个用于异步发送缓冲区的释放，一个用于管理定时器，根据配置可能会有第四个任务用于处理回环操作。
</div>
<div style="margin-top:.625em;">
  &mu;C/TCP-IP确保其实现独立于底层RTOS
</div>
<ul style="list-style: disc;margin-left: 1.5em;">
  <li>net_bsd.c/h</li>
  <li>net_sock.c/h</li>
</ul>
]]>
  </c:abstract>

  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[汇编语言]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.425em;font-family:monospace;">
                     <![CDATA[
<h3 style="color:green;">历史</h3>
<div>
  最早的时候编写程序就是手写二进制指令，然后通过各种开关输入计算机，比如要做加法了，就按一下开关。后来，发明了纸袋打孔机，通过在纸袋上打孔，将二进制指令自动输入计算机。
</div>
<div style="margin-top:.625em;">
  为了解决二进制指令的可读性问题，工程师将那些指令写成了八进制。二进制转八进制是轻而易举的，但是八进制的可读性也不行。人们发现用格式化标记文本书写这些指令具有更好的可读性。内存地址也不在直接引用，而是用标签表示。
</div>
<div style="margin-top:.625em;">
  在将汇编语言交给CPU执行之前，需要借助工具将一条条的汇编指令翻译成二进制字节码，这个步骤就叫做 assembling，完成这个步骤的过程叫做 assembler。翻译工具处理的格式化文本叫做 assembly code。标准化以后，称为 assembly language，缩写为 asm，中文叫做汇编语言。
</div>
<div style="margin-top:.625em;">
  <img width="580px" style="margin1: auto;" src="/images/ucos/asm2.png" />
</div>
<div style="margin-top:.625em;">
  每一种CPU的机器指令都是不一样的，因此对应的汇编语言也不一样。本文介绍的是最常见的x86汇编语言，即Inter公司的CPU使用的那一种。
</div>

<h3 style="color:green;margin-top:.625em;">什么是汇编语言</h3>
<div>
  汇编语言是低级语言，它专门用来控制硬件，直接描述／控制CPU的运行。如果你想了解CPU到底干了些什么，以及代码的运行步骤，就一定要学习汇编语言。
</div>
<div style="margin-top:.625em;">
  CPU本身只是一个将很多晶体管经过精密加工紧密排列在一起的集成电路，只会顺序的执行一条条的指令，输入一条指令就执行一次，执行完了停下来，等待下一条指令。CPU上的晶体管数量越多执行指令的速度就越快。这些指令都是二进制的，被称为操作码（opcode）。<br />
  例如：加法指令／00000011。编译器的作用就是将高级语言写好的程序，翻译成一条条的操作码。
</div>
<div style="margin-top:.625em;">
  二进制程序是可读性不友好的，从众多0和1的组合中根本看不出来机器干了什么。为了解决可读性问题，以及偶尔的编辑需求，就诞生了汇编语言。
</div>
<div style="margin-top:.325em;">
  <img width="580px" style="margin1: auto;" src="/images/ucos/asm1.png" />
</div>
<div style="margin-top:.625em;">
  汇编语言是二进制指令的可读性文本格式，与指令是一一对应的关系。比如：加法指令／00000011，对应汇编语言的语法格式是／ADD。只要还原成二进制，汇编语言就可以被CPU直接执行，所以他是最底层的低级语言。
</div>

<h3 style="color:green;margin-top:.625em;">寄存器</h3>
<h3 style="color:green;margin-top:.625em;">寄存器种类</h3>
<h3 style="color:green;margin-top:.625em;">内存模型 Heap</h3>
<h3 style="color:green;margin-top:.625em;">内存模型 Stack</h3>
<h3 style="color:green;margin-top:.625em;">CPU指令</h3>
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[简化的 &mu;C/TCP-IP 模块及模块之间关系图]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1em;font-family:monospace;">
                     <![CDATA[
<div>
  <div style="float:left;width:420px;font-size:.625em;">
    <img width="100%" src="/images/ucos/uctcpip-model.jpg" />
    <div style=" width:100%;margin-top:1em;">
      <h3 style="color:green;">RTOS必备条件</h3>
      <ul style="list-style: disc;margin-left: 1.5em;line-height:1.625em;">
        <li>必须至少创建三个任务: 接收任务、发送缓冲区释放任务、定时任务</li>
        <li>提供信号量管理，&mu;C/TCP-IP需要为每个套接字创建至少2个信号量和4个&mu;C/TCP-IP内部使用的信号量</li>
        <li>提供定时器管理任务</li>
        <li>如果使用BSD的select()功能，端口必须支持在多个OS对象上的阻塞(pending)</li>
      </ul>
    </div>

  </div>
  <div style="float:left;margin-left:.5em;width:460px;font-size:.625em;">
    <table>
      <thead>
        <tr>
          <th style="width:60px;text-align:right;">模块</th>
          <th>文件</th>
          <th style="width:180px;">说明</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align:right;">&mu;C/LIB</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>lib_def.h</li>
            <li>lib_mem.*</li>
            <li>lib_mem_a.*</li>
          </ul></td>
          <td>
            所有标准库函数都已被重写, 用于提高安全性. 例如: strcpy(), memset(), etc.
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">BSD套接字API层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>net_bsd.c/h</li>
            <li>net_sock.c/h</li>
          </ul></td>
          <td>
            BSD套接字API, 用于开发 TCP/IP 应用。属于 &mu;C/TCP-IP 的一部分
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">&mu;C/TCP-IP层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li style="color: blue;"><b>TCP/IP协议相关文件:</b></li>
            <li>ARP(net_arp.*)</li>
            <li>ICMP(net_icmp.*)</li>
            <li>IGMP(net_igmp.*)</li>
            <li>IP(net_ip.*)</li>
            <li>TCP(net_tcp.*)</li>
            <li>UDP(net_udp.*)</li>
          </ul><ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
            <li style="color: blue;"><b>辅助性文件:</b></li>
            <li>ASCII码转换(net_ascii.*)</li>
            <li>缓存管理(net_buf.*)</li>
            <li>TCP/UDP连接管理(net_conn.*)</li>
            <li>计数器管理(net_ctr.*)</li>
            <li>统计(net_stat.*)</li>
            <li>定时器管理(net_tmr.*)</li>
            <li>其他(net_util.*)</li>
          </ul><ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
            <li style="color: blue;"><b>各种头文件:</b></li>
            <li>主要&mu;C/TCP-IP头文件(net_c.h)</li>
            <li>错误码文件(net_err.h)</li>
            <li>各种&mu;C/TCP-IP数据类型(net_type.h)</li>
            <li>各种定义(net_def.h)</li>
            <li>调试相关(net_dbg.h)</li>
            <li>配置定义(net_cfg_net.h)</li>
          </ul></td>
          <td>
            包含大部分的与CPU、RTOS 和编译器无关的代码
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">网络接口(IF)层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>net_if.*</li>
            <li>lnet_if_*.*</li>
          </ul></td>
          <td>
            包含几种类型的网络接口, 当前版本的 &mu;C/TCP-IP 仅支持以太网接口
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">网络设备驱动层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>net_bsp.c</li>
          </ul></td>
          <td>
            这一层处理硬件细节, 例如: 如何<b>初始化设备</b>、如何使能或禁止<b>设备中断</b>、如何知道接收<b>数据包的大小</b>、如何从帧缓存中<b>读一个数据包</b>, 以及如何向设备<b>写入一个数据包</b>
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">物理(PHY)层</td>
          <td>&mdash;&nbsp;&mdash;&nbsp;&mdash;&nbsp;&mdash;</td>
          <td>
            设备接口需要初始化和控制，Micri&mu;m 提供了一个通用的PHY驱动，可控制大多数以太网物理层设备
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">CPU层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>cpu_a.asm</li>
            <li>cpu.h</li>
            <li>cpu_def.h</li>
          </ul></td>
          <td>
            <div>▪▪ &mu;C/TCP-IP可用于处理8位、6位、32位甚至64位CPU, 但<b style="color:blue">必须配置CPU的相关信息</b>。不论CPU是大端模式还是小端模式，也不论CPU是如何禁止和使能中断，CPU层都将这种信息定义为16位或32位变量的C数据类型</div>
            <div style="margin-top:.325em;">▪▪ CPU相关文件在 ...\&mu;c-CPU目录下, 用于配置&mu;C/TCP-IP适应不同的CPU。</div>
            <div style="margin-top:.325em;">▪▪ 可<b style="color:blue;">修改 cpu*.* 文件</b>或根据&mu;C-CPU目录提供的示例文件创建新文件。修改现有文件更方便。</div>
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">实时操作系统(RTOS)层</td>
          <td>&mdash;&nbsp;&mdash;&nbsp;&mdash;&nbsp;&mdash;</td>
          <td>
            该层让 &mu;C/TCP-IP 独立于RTOS
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="clear"></div>
</div>
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[&mu;C/TCP-IP 任务模型]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div>
  &mu;C/TCP-IP使用的BSD套接字API可以访问内部结构和变量。<b style="color:red;">一个二值信号量(类似全局锁)用于控制数据的访问并保持互斥</b>，为了读写数据任务在访问数据前需获得该二值信号量，并在完成访问后释放它。
</div>
<div style="margin-top:.325em;">
  应用任务无需关心这个信号量和数据的任何信息，因为&mu;C/TCP-IP已经将其用户函数封装了。
</div>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="μC/TCP-IP 任务和优先级" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

<div>
  <div style="float:left;width:420px;font-size:.625em;">
    <img width="100%" src="/images/ucos/ucos-tcpip-task.jpeg" />
  </div>
  <div style="float:left;margin-left:.5em;width:460px;font-size:.625em;">
    <h3 style="color:green;">▪▪ 当设置任务优先级时，通常推荐使用μC/TCP-IP服务的任务优先级要高于μC/TCP-IP内部任务优先级。</h3>
      <h3 style="color:green;">▪▪ 但使用μC/TCP-IP服务的应用任务应该适时主动交出CPU使用权。例如：应用任务可以延时、挂起、或等待μC/TCP-IP服务，这样做是为了在一个应用任务发送大量数据的时候，减少饥饿问题的出现。</h3>
      <h3 style="color:green;">▪▪ 推荐发送释放任务的优先级高于所有使用μC/TCP-IP服务的应用任务优先级，但是定时器任务、和接受任务的优先级要低于所有其他应用任务的优先级。</h3>
  </div>
  <div class="clear"></div>
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="接收一个数据包" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

<div>
  <div style="float:left;width:420px;font-size:.625em;">
    <img width="100%" src="/images/ucos/uctcpip_send.jpg" />
    <div style=" width:100%;margin-top:1em;">
      <h3 style="color:green;">RTOS必备条件</h3>
      <ul style="list-style: disc;margin-left: 1.5em;line-height:1.625em;">
        <li>必须至少创建三个任务: 接收任务、发送缓冲区释放任务、定时任务</li>
        <li>提供信号量管理，&mu;C/TCP-IP需要为每个套接字创建至少2个信号量和4个&mu;C/TCP-IP内部使用的信号量</li>
        <li>提供定时器管理任务</li>
        <li>如果使用BSD的select()功能，端口必须支持在多个OS对象上的阻塞(pending)</li>
      </ul>
    </div>

  </div>
  <div style="float:left;margin-left:.5em;width:460px;font-size:.625em;">
    <table>
      <thead>
        <tr>
          <th style="width:60px;text-align:right;">1</th>
          <th>1</th>
          <th style="width:180px;">1</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align:right;">1</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>1</li>
            <li>1</li>
            <li>1</li>
          </ul></td>
          <td>
            1
          </td>
        </tr>
        
      </tbody>
    </table>
  </div>
  <div class="clear"></div>
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="发送一个数据包" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
未完待续
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>






  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[&mu;C/TCP-IP 任务模型]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div>
  &mu;C/TCP-IP使用的BSD套接字API可以访问内部结构和变量。<b style="color:red;">一个二值信号量(类似全局锁)用于控制数据的访问并保持互斥</b>，为了读写数据任务在访问数据前需获得该二值信号量，并在完成访问后释放它。
</div>
<div style="margin-top:.325em;">
  应用任务无需关心这个信号量和数据的任何信息，因为&mu;C/TCP-IP已经将其用户函数封装了。
</div>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="μC/TCP-IP 任务和优先级" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

<div>
  <div style="float:left;width:420px;font-size:.625em;">
    <img width="100%" src="/images/ucos/ucos-tcpip-task.jpeg" />
  </div>
  <div style="float:left;margin-left:.5em;width:460px;font-size:.625em;">
    <h3 style="color:green;">▪▪ 当设置任务优先级时，通常推荐使用μC/TCP-IP服务的任务优先级要高于μC/TCP-IP内部任务优先级。</h3>
      <h3 style="color:green;">▪▪ 但使用μC/TCP-IP服务的应用任务应该适时主动交出CPU使用权。例如：应用任务可以延时、挂起、或等待μC/TCP-IP服务，这样做是为了在一个应用任务发送大量数据的时候，减少饥饿问题的出现。</h3>
      <h3 style="color:green;">▪▪ 推荐发送释放任务的优先级高于所有使用μC/TCP-IP服务的应用任务优先级，但是定时器任务、和接受任务的优先级要低于所有其他应用任务的优先级。</h3>
  </div>
  <div class="clear"></div>
</div>
]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>





  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[嵌入式STM32开发环境之Keil5的安装]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<pre>
▪▪ Keil uVision5主程序: Keil_uVision_MDK522.exe
▪▪ F1xx 系列芯片支持包: Keil.STM32F1xx_DFP.2.1.0.pack
▪▪ F4xx 系列芯片支持包: Keil.STM32F4xx_DFP.2.13.0.pack
▪▪ 以及 Keil 注册机: keygen.exe
▪▪ Cube 软件安装包: en.stm32cubemx.zip
▪▪ F1xx 系列标准外设库: STM32F10x_StdPeriph_Lib_V3.5.0.zip
▪▪ F4xx 系列标准外设库: stm32f4_dsp_stdperiph_lib.zip
▪▪ 采用标准外设库建好的F103的工程模版: STM32F103C8xx_Keil工程模版.zip
▪▪ 采用标准外设库建好的F407的工程模版: STM32F407ZGxx_Keil工程模版.zip
</pre>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
keil (Keil_uVision_MDK522.exe) 安装完成后, 先不着急打开它。
</div>

<div style="margin-top:.325em;">
找到上面的芯片支持包(文件名类似 Keil.STM32F1xx_DFP.2.1.0.pack)，直接双击，自动完成安装芯片支持包。芯片支持包必须正确安装对应的型号，开发F几系列的芯片就安装F几的支持包，安装了芯片支持包，建立标准工程的时候才能找到相应的芯片。
</div>

<div style="margin-top:.325em;">
接下来打开 Keil uVision5, 并用右键管理员模式运行注册机，如果报毒则关闭杀毒软件。
</div>
<ul style="list-style: disc;margin-left: 1.5em;">
  <li>依次点击 keil 菜单左上角的 File>License Management 打开授权管理</li>
  <li>将 CID 中的内容复制到注册机的CID框</li>
  <li>在注册机的 Target 中选择 ARM，接着选 MDK Professional，如下图</li>
</ul>
<div>
  <img width="360px" src="/images/ucos/keil-crack.png" />
</div>

<div style="margin-top:.625em;">
  点击 Generate 按钮，生成注册码，复制注册码到左侧的 New License ID Code: 里，点击 Add Lic 按钮添加许可, key出现 2020 的字样说明注册OK了。
</div>
<div>
  <img width="460px" src="/images/ucos/keil-lisense.png" />
</div>

]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="新建 STM32 工程" id="sourceContent1" 
                     style="background-color:white;margin-top:2em;"
                     titleStyle="padding-left:0;color:blue;font-size:1.5em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
STM32 有两种主流方法建立工程：<br />

方法一是采用标准外设库，一步步自己搭建工程；方法二是采用最新的 HAL 库，使用 Cube 软件自动建立工程。方法二比较简单省事。
</div>

<h3 style="margin-top:.625em;">方法一</h3>
<div style="margin-top:0em;">
需要下载对应芯片的标准外设库: <br />
▪▪ STM32F10x_StdPeriph_Lib_V3.5.0.zip 或 stm32f4_dsp_stdperiph_lib.zip
</div>
<div style="margin-top:.625em;">
有了芯片的标准外设库，就可以开始建立工程了。标准外设库建立工程的步骤，网上有非常多的参考教程，暂时不重复写了。
</div>
<div style="margin-top:.625em;">
▪▪ 一个采用标准外设库建好的F103的工程模板：STM32F103C8xx_Keil工程模版.zip
</div>
<div style="margin-top:.625em;">
▪▪ 标准外设库的F407的工程模板：STM32F407ZGxx_Keil工程模版.zip
</div>

<h3 style="margin-top:.625em;">方法二</h3>
<div style="margin-top:0em;">
Cube 软件是一个图形化的配置软件，我们只需要点一点鼠标，就能自动生成代码，轻松完成复杂的工程配置。而且不需要事先手动下载 HAL 库，Cube 软件自动建立工程时，会自动下载相应的 HAL 库。我们只需要安装好 Cube 就可以了。
</div>

<div style="margin-top:.625em;">
如果你的电脑上没有 Java 的环境，Cube 安装程序它会提示安装 Cube 之前需要先安装一个 Java 的运行环境，为什么又跟 Java 有关系？估计 Cube 软件是用 Java 开发的，那么它运行的时候需要一个 Java 的环境。先安装 Java 环境，再安装 Cube 就 OK 了。<br />
▪▪  en.stm32cubemx.zip
</div>

]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>




  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[uCOS-II移植到STM32上的详细步骤]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<pre>
▪▪ 去 uCOS-II 官网下载要移植芯片CPU的相关资料，不一定完全对应，找最相似的系列
▪▪ 编程环境一般有两种，分别是 IAR 和 MDK, 根据自己的编程环境进行下载
▪▪ 本案例需要将 uC/OS-II 移植到 STM32F103ZET6 上, 而官网提供的案例是基于 IAR 环境的, 所以要基于 IAR 进行更改
▪▪ 使用 MDK 创建一个无操作系统的最简单程序, 确保这个程序能够使用
▪▪ 移植的最大改动主要有两部分，一个是头文件的增减, 另外一个是向量表中 PendSV_Handler 和 SysTick_Handler 的修改
▪▪ 网上传的一大堆关于 OS_CPU.h 的更改还有各种函数的分析, 这部分不需要移植者去修改，
▪▪ 官网提供的案例都已经提供了 OS_CPU.h 相关的修改，除非你选择的CPU是比较偏的.
</pre>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="创建一个无操作系统的简单裸板系统" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:blue;font-size:1.5em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<h3 style="color:green;">创建源文件工程文件夹</h3>
<pre>
+ CMSIS
+ STM32F10x_StdPeriph
+ Usr
+ List
+ Output
</pre>

<h3 style="color:green;">CMSIS包含内核接口相关文件</h3>
<pre>
- core_cm3.h
- core_cm3.c
- stm32f10x.h
- startup_stm32f10x_hd.s
- system_stm32f10x.h
- system_stm32f10x.c
</pre>

<h3 style="color:green;">STM32F10x_StdPeriph 包含固件驱动文件, 这里把 STM32F10x 的固件全部复制过来</h3>
<pre>
- 略
</pre>

<h3 style="color:green;">Usr 包含其他文件</h3>
<pre>
- stm32f10x_conf.h
- stm32f10x_it.h
- stm32f10x_it.c
- main.c          # 里边要有一个 main 函数, 否则编译会报错
</pre>

<h3 style="color:green;">List 和 Output 存放编译期间的产出物</h3>
<pre>
- 略
</pre>

<h3 style="color:green;">创建后的工程目录结构</h3>
<pre>
+ uCOS-STM32F1
  + CMSIS
    - core_cm3.h
    - core_cm3.c
    - stm32f10x.h
    - startup_stm32f10x_hd.s
    - system_stm32f10x.h
    - system_stm32f10x.c
  + User
    - stm32f10x_conf.h
    - stm32f10x_it.h
    - stm32f10x_it.c
    - main.c
  + STM32F10x_StdPeriph
    - 略
  + List
    - 略
  + Output
    - 略
</pre>

]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="简单裸板系统 —— 选配配置" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:blue;font-size:1.5em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<h3 style="color:green;">界面截图</h3>
<div>
  <img width="100%" src="/images/ucos/keil/keil界面-截图.png" />
</div>

<h3 style="color:green;margin-top:.625em;">Output 选项</h3>
<div>
  这里勾选了 Create HEX File 选项, 同时将项目输出放到了之前创建的 Output 文件夹
</div>
<div>
  <img src="/images/ucos/keil/keil-config-output.png" />
</div>

<h3 style="color:green;margin-top:.625em;">Listing 选项</h3>
<div>
  将 List 产生的文件放入之前创建的 List 文件夹下
</div>

<h3 style="color:green;margin-top:.625em;">c/c++ 配置选项</h3>
<pre>
  ▪▪ 在 Define 选项中，填入: USE_STDPERIPH_DRIVER,STM32F10X_HD 这是告诉编译器使用标准外设库
  ▪▪ 还有选择CPU的类型，其中CPU类型需要根据你选择移植的CPU进行适当修改.
  ▪▪ Include Paths 是要包含的头文件路径，这里为了保险起见, 将项目中的所有包含 *.h 文件的文件夹都包含进去。
</pre>
<div>
  <img src="/images/ucos/keil/keil-config-c_c++.png" />
</div>

<h3 style="color:green;margin-top:.625em;">Debug 配置选项</h3>
<div>
  这里使用的是 JLink 进行烧写调试, 所以选择了 JLink / J-Trace Cortex
</div>
<div>
  <img src="/images/ucos/keil/keil-config-debug.png" />
</div>

<h3 style="color:green;margin-top:.625em;">Debug - Settings 配置选项</h3>
<div>
  这里要勾选 Reset and Run, 这样做的目的是: 每次烧写下载完毕后, CPU 进行复位并运行.
</div>
<div>
  <img src="/images/ucos/keil/keil-config-debug-settings.png" />
</div>

<h3 style="color:green;margin-top:.625em;">Utilities 配置选项</h3>
<div>
  <img src="/images/ucos/keil/keil-config-utilities.png" />
</div>

<h3 style="color:green;margin-top:.625em;">Target 配置选项</h3>
<div>
  <img width="610px" src="/images/ucos/keil/keil-config-target-com1.png" />
</div>

<div style="color:red;font-size:1.325em;margin-top:.625em;">
  至此，配置完毕，编译一下，没有错误，创建一个简单的点亮 LED 程序，验证一下即可。
</div>
]]>
    </c:sourceContent>



    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>






  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[移植 uCOS-II 到 STM32F10X 上]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<pre>
▪▪ 去 uCOS-II 官网下载基于 STM32 的移植工程案例，里面的移植文档 AN-1018 中是作者写的移植文档，移植前多看看该文档
</pre>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:blue;font-size:1.5em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

<div>
  <img src="/images/ucos/keil/ucosii-to-stm32.png" />
</div>
https://wenku.baidu.com/view/08422b52c5da50e2524d7f65?ivk_sa=1023194j&from=timeline
]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>




</c:component>
