<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
<div>
  实时多任务操作系统(RTOS)是嵌入式应用软件的基础和开发平台。目前，商品化的RTOS可支持从8BIT的8051到32BIT的PowerPC及DSP等几十个系列的嵌入式处理器。提供高质量源代码RTOS的著名公司主要集中在美国。
</div>
<div style="margin-top:.625em;">
  目前在中国大多数嵌入式软件开发还是基于处理器直接编写，没有采用商品化的RTOS，不能将系统软件和应用软件分开处理。<b style="color:red;">RTOS是一段嵌入在目标代码中的软件，用户的其它应用程序都建立在RTOS之上。</b>不但如此，<b style="color:blue;">RTOS还是一个可靠性和可信性很高的实时内核，将CPU时间、中断、I/O、定时器等资源都包装起来，留给用户一个标准的API，并根据各个任务的优先级，合理地在不同任务之间分配CPU时间</b>。
</div>
<div style="margin-top:.625em;">
  &mu;C/TCP-IP由3个任务组成，一个用于处理包接收(接收任务)，一个用于异步发送缓冲区的释放，一个用于管理定时器，根据配置可能会有第四个任务用于处理回环操作。
</div>
<div style="margin-top:.625em;">
  &mu;C/TCP-IP确保其实现独立于底层RTOS
</div>
<ul style="list-style: disc;margin-left: 1.5em;">
  <li>net_bsd.c/h</li>
  <li>net_sock.c/h</li>
</ul>
]]>
  </c:abstract>

  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[简化的 &mu;C/TCP-IP 模块及模块之间关系图]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1em;font-family:monospace;">
                     <![CDATA[
<div>
  <div style="float:left;width:420px;font-size:.625em;">
    <img width="100%" src="/images/ucos/uctcpip-model.jpg" />
    <div style=" width:100%;margin-top:1em;">
      <h3 style="color:green;">RTOS必备条件</h3>
      <ul style="list-style: disc;margin-left: 1.5em;line-height:1.625em;">
        <li>必须至少创建三个任务: 接收任务、发送缓冲区释放任务、定时任务</li>
        <li>提供信号量管理，&mu;C/TCP-IP需要为每个套接字创建至少2个信号量和4个&mu;C/TCP-IP内部使用的信号量</li>
        <li>提供定时器管理任务</li>
        <li>如果使用BSD的select()功能，端口必须支持在多个OS对象上的阻塞(pending)</li>
      </ul>
    </div>

  </div>
  <div style="float:left;margin-left:.5em;width:460px;font-size:.625em;">
    <table>
      <thead>
        <tr>
          <th style="width:60px;text-align:right;">模块</th>
          <th>文件</th>
          <th style="width:180px;">说明</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align:right;">&mu;C/LIB</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>lib_def.h</li>
            <li>lib_mem.*</li>
            <li>lib_mem_a.*</li>
          </ul></td>
          <td>
            所有标准库函数都已被重写, 用于提高安全性. 例如: strcpy(), memset(), etc.
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">BSD套接字API层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>net_bsd.c/h</li>
            <li>net_sock.c/h</li>
          </ul></td>
          <td>
            BSD套接字API, 用于开发 TCP/IP 应用。属于 &mu;C/TCP-IP 的一部分
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">&mu;C/TCP-IP层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li style="color: blue;"><b>TCP/IP协议相关文件:</b></li>
            <li>ARP(net_arp.*)</li>
            <li>ICMP(net_icmp.*)</li>
            <li>IGMP(net_igmp.*)</li>
            <li>IP(net_ip.*)</li>
            <li>TCP(net_tcp.*)</li>
            <li>UDP(net_udp.*)</li>
          </ul><ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
            <li style="color: blue;"><b>辅助性文件:</b></li>
            <li>ASCII码转换(net_ascii.*)</li>
            <li>缓存管理(net_buf.*)</li>
            <li>TCP/UDP连接管理(net_conn.*)</li>
            <li>计数器管理(net_ctr.*)</li>
            <li>统计(net_stat.*)</li>
            <li>定时器管理(net_tmr.*)</li>
            <li>其他(net_util.*)</li>
          </ul><ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
            <li style="color: blue;"><b>各种头文件:</b></li>
            <li>主要&mu;C/TCP-IP头文件(net_c.h)</li>
            <li>错误码文件(net_err.h)</li>
            <li>各种&mu;C/TCP-IP数据类型(net_type.h)</li>
            <li>各种定义(net_def.h)</li>
            <li>调试相关(net_dbg.h)</li>
            <li>配置定义(net_cfg_net.h)</li>
          </ul></td>
          <td>
            包含大部分的与CPU、RTOS 和编译器无关的代码
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">网络接口(IF)层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>net_if.*</li>
            <li>lnet_if_*.*</li>
          </ul></td>
          <td>
            包含几种类型的网络接口, 当前版本的 &mu;C/TCP-IP 仅支持以太网接口
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">网络设备驱动层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>net_bsp.c</li>
          </ul></td>
          <td>
            这一层处理硬件细节, 例如: 如何<b>初始化设备</b>、如何使能或禁止<b>设备中断</b>、如何知道接收<b>数据包的大小</b>、如何从帧缓存中<b>读一个数据包</b>, 以及如何向设备<b>写入一个数据包</b>
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">物理(PHY)层</td>
          <td>&mdash;&nbsp;&mdash;&nbsp;&mdash;&nbsp;&mdash;</td>
          <td>
            设备接口需要初始化和控制，Micri&mu;m 提供了一个通用的PHY驱动，可控制大多数以太网物理层设备
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">CPU层</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>cpu_a.asm</li>
            <li>cpu.h</li>
            <li>cpu_def.h</li>
          </ul></td>
          <td>
            <div>▪▪ &mu;C/TCP-IP可用于处理8位、6位、32位甚至64位CPU, 但<b style="color:blue">必须配置CPU的相关信息</b>。不论CPU是大端模式还是小端模式，也不论CPU是如何禁止和使能中断，CPU层都将这种信息定义为16位或32位变量的C数据类型</div>
            <div style="margin-top:.325em;">▪▪ CPU相关文件在 ...\&mu;c-CPU目录下, 用于配置&mu;C/TCP-IP适应不同的CPU。</div>
            <div style="margin-top:.325em;">▪▪ 可<b style="color:blue;">修改 cpu*.* 文件</b>或根据&mu;C-CPU目录提供的示例文件创建新文件。修改现有文件更方便。</div>
          </td>
        </tr>
        <tr>
          <td style="text-align:right;">实时操作系统(RTOS)层</td>
          <td>&mdash;&nbsp;&mdash;&nbsp;&mdash;&nbsp;&mdash;</td>
          <td>
            该层让 &mu;C/TCP-IP 独立于RTOS
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="clear"></div>
</div>
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[&mu;C/TCP-IP 任务模型]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div>
  &mu;C/TCP-IP使用的BSD套接字API可以访问内部结构和变量。<b style="color:red;">一个二值信号量(类似全局锁)用于控制数据的访问并保持互斥</b>，为了读写数据任务在访问数据前需获得该二值信号量，并在完成访问后释放它。
</div>
<div style="margin-top:.325em;">
  应用任务无需关心这个信号量和数据的任何信息，因为&mu;C/TCP-IP已经将其用户函数封装了。
</div>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="μC/TCP-IP 任务和优先级" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

<div>
  <div style="float:left;width:420px;font-size:.625em;">
    <img width="100%" src="/images/ucos/ucos-tcpip-task.jpeg" />
  </div>
  <div style="float:left;margin-left:.5em;width:460px;font-size:.625em;">
    <h3 style="color:green;">▪▪ 当设置任务优先级时，通常推荐使用μC/TCP-IP服务的任务优先级要高于μC/TCP-IP内部任务优先级。</h3>
      <h3 style="color:green;">▪▪ 但使用μC/TCP-IP服务的应用任务应该适时主动交出CPU使用权。例如：应用任务可以延时、挂起、或等待μC/TCP-IP服务，这样做是为了在一个应用任务发送大量数据的时候，减少饥饿问题的出现。</h3>
      <h3 style="color:green;">▪▪ 推荐发送释放任务的优先级高于所有使用μC/TCP-IP服务的应用任务优先级，但是定时器任务、和接受任务的优先级要低于所有其他应用任务的优先级。</h3>
  </div>
  <div class="clear"></div>
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="接收一个数据包" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

<div>
  <div style="float:left;width:420px;font-size:.625em;">
    <img width="100%" src="/images/ucos/uctcpip_send.jpg" />
    <div style=" width:100%;margin-top:1em;">
      <h3 style="color:green;">RTOS必备条件</h3>
      <ul style="list-style: disc;margin-left: 1.5em;line-height:1.625em;">
        <li>必须至少创建三个任务: 接收任务、发送缓冲区释放任务、定时任务</li>
        <li>提供信号量管理，&mu;C/TCP-IP需要为每个套接字创建至少2个信号量和4个&mu;C/TCP-IP内部使用的信号量</li>
        <li>提供定时器管理任务</li>
        <li>如果使用BSD的select()功能，端口必须支持在多个OS对象上的阻塞(pending)</li>
      </ul>
    </div>

  </div>
  <div style="float:left;margin-left:.5em;width:460px;font-size:.625em;">
    <table>
      <thead>
        <tr>
          <th style="width:60px;text-align:right;">模块</th>
          <th>文件</th>
          <th style="width:180px;">说明</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align:right;">&mu;C/LIB</td>
          <td><ul style="list-style: disc;margin-left: 1.5em;">
            <li>lib_def.h</li>
            <li>lib_mem.*</li>
            <li>lib_mem_a.*</li>
          </ul></td>
          <td>
            所有标准库函数都已被重写, 用于提高安全性. 例如: strcpy(), memset(), etc.
          </td>
        </tr>
        
      </tbody>
    </table>
  </div>
  <div class="clear"></div>
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="发送一个数据包" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
1
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>




</c:component>
