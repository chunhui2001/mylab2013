<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:content style="margin-top:1.5em;">
    <![CDATA[ 
 
    ]]>
  </c:content>




  <c:entry style="margin-top:2em;">
    <c:title></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     bodyStyle="background-color:white;padding:0;">
      <![CDATA[
         <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">定义变量</b><br />
    $var_name = 0; <br />
    <br />
    
    echo $var_name <b>.</b> " hello &lt;br /&gt;"; (PHP 将<b>单引号</b>中间的字符串当作纯文本解析)<br /> 
    echo "$var_name hello &lt;br /&gt;"; (PHP 将尝试解析<b>双引号</b>中间的变量)<br />
    二者等价
    
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">PHP 支持的基本数据类型</b> <br />
    <ul>
      <li><b>Integer </b> </li>
      <li><b>Float </b> </li>
      <li><b>String </b> </li>
      <li><b>Boolean </b> </li>
      <li><b>Array </b> </li>
      <li><b>Object </b> </li>
      <li><b>NULL </b> </li>
      <li><b>resource </b> 不能直接操作一个 resource 变量，他们通常都被函数返回，而且必须作为参数传递给其它函数。</li>
    </ul>
    
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">声明和使用常量</b> <br />
    define ('CONST_NAME', 100); <br />
    define ('CONST_NAME1', '100'); <br />
    <b>引用常量不需要 $, 常量只可以保存 Boolean, Integer, Float, String</b>
    
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">变量的作用域</b> <br />
    
    
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">超级全局变量</b> <br />
    <ul>
      <li><b>$_GET </b> </li>
      <li><b>$_POST </b> </li>
      <li><b>$_GLOBALS </b> </li>
      <li><b>$_SERVER </b> </li>
      <li><b>$_COOKIE </b> </li>
      <li><b>$_FILES </b> </li>
      <li><b>$_ENV </b> </li>
      <li><b>$_REQUEST </b> </li>
      <li><b>$_SESSION </b> </li>
    </ul>
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">错误抑制操作符 @</b> <br />
    $a = @(57/0); 相当于 try {}
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">执行操作符 ``</b> PHP 试着将<b>反向单引号</b>之间的命令当作服务器端命令来执行<br />
    $out = `ls -al`;<br />
    得到一个目录列表并将该列表中
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">数组操作符</b> <br />
    <ul>
      <li><b>+</b> 联结 两个数组</li>
      <li><b>==</b> 等价 具有相同的键值对</li>
      <li><b>===</b> 恒等 具有相同的键值对和顺序</li>
      <li><b>!= / &lt;&gt; </b> 非等价 </li>
      <li><b>!==  </b> 非恒等</li>
    </ul>
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">类型操作符</b> <br />
    <ul>
      <li><b>$obj instanceof ClassA</b></li>
    </ul>
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">获取或设置变量类型</b> <br />
    <ul>
      <li><b>gettype($a); 该函数返回表示该变量数据类型的字符串，bool, float, int 等等。如果变量不是标准类型之一，则返回 unknown type</b></li>
    </ul>
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">测试变量数据类型</b> <br />
    <ul>
      <li><b>is_array()</b> 检查变量是否是数组</li>
      <li><b>is_double(), is_float(), is_real() </b> 检查变量是否是浮点数</li>
      <li><b>is_long(),is_int(), is_integer() </b> 检查变量是否是整数</li>
      <li><b>is_string()</b>  检查变量是否是字符串</li>
      <li><b>is_bool() </b> 检查变量是否是布尔值</li>
      <li><b>is_object() </b> 检查变量是否是一个对象</li>
      <li><b>is_resource() </b> 检查变量是否是一个资源</li>
      <li><b>is_null() </b> 检查变量是否是 null</li>
      <li><b>is_scalar() </b> 检查变量是否是一个标量，即：整数、布尔值、字符串、浮点数</li>
      <li><b>is_numeric() </b> 检查变量是否是任何类型的数字或数字字符串</li>
      <li><b>is_callable() </b> 检查变量是否是一个有效的函数名称</li>
    </ul>
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">测试变量状态</b> <br />
    <ul>
      <li><b>isset()</b> 检查一个变量是否存在，可以传递一个由逗号分隔的数组。如果所有变量都设置了，则返回 true。</li>
      <li><b>unset()</b> 销毁传入的变量，无返回值</li>
      <li><b>empty()</b> 检查一个变量是否存在，并且非 null 和 非 0</li>
    </ul>
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">变量的重解释</b> <br />
    <ul>
      <li><b>int intval()</b> 将传入的变量转换为整数</li>
      <li><b>float floatval()</b> 将传入的变量转换为浮点数</li>
      <li><b>string stringval()</b> 将传入的变量转换为字符串</li>
    </ul>
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">处理文件</b> <br />
    <ul>
      <li><b style="color:green;">$fo = fopen("$_SERVER['DOCUMENT_ROOT']/../orders/orders.txt", "w");</b> </li>
      <li><b>fopen()</b> 需要两个或 3、4 个参数， 通常使用两个。</li>
      <li><b>$_SERVER['DOCUMENT_ROOT']</b> 返回当前 web 服务器的跟目录</li>
    </ul>
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">返回多个值</b> <br />
    <ul>
      <li>使用 php 特有的语言构造 <b>list()</b>, 可以接收函数返回的多个值。 </li>
    </ul>
    <br />
    <div>
      &lt;?php <br />
      &nbsp;&nbsp;&nbsp;&nbsp;  $colors = array ("red", "green", "blue"); <br />
      &nbsp;&nbsp;&nbsp;&nbsp;  list ($red, $green, $blue) = $colors; <br />
      ?&gt; <br />
    </div>
    <br />
    <ul>
      <li>根据这个构造可以联想到怎样从函数返回多个值.</li>
    </ul>
    <br />
    <br />
    <br />
    <b style="color:rgb(195, 18, 219);font-size:2em;line-height:2em;">函数库</b> <br />
    <div>
      &lt;?php? <br />
      &nbsp;&nbsp;&nbsp;&nbsp;    function localTax ($grossIncome, $taxRate) { <br />
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        // .. <br />
      &nbsp;&nbsp;&nbsp;&nbsp;    } <br />
      &nbsp;&nbsp;&nbsp;&nbsp;     <br />
      &nbsp;&nbsp;&nbsp;&nbsp;    function stateTax ($grossIncome, $taxRate, $age) { <br />
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        // .. <br />
      &nbsp;&nbsp;&nbsp;&nbsp;    } <br />
      &nbsp;&nbsp;&nbsp;&nbsp;     <br />
      &nbsp;&nbsp;&nbsp;&nbsp;    function medicare ($grossIncome, $medicateRate) { <br />
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        // .. <br />
      &nbsp;&nbsp;&nbsp;&nbsp;    } <br />
      ?&gt;
       <br />
      <br />
      可以将该库保存到 taxes.libraty.php 文件中, 然后使用 <b>include(), include_once(), require(), require_once()</b> 将该函数插入到脚本中，
      也可以使用 PHP 的 <b>auto_prepend</b> 配置指令自动完成文件插入.
      <br />
      <br />
      &lt;?php  <br />
      &nbsp;&nbsp;&nbsp;&nbsp;     require_once("taxes.libraty.php"); <br />
      ?&gt;
      
    </div>
    ]]>
    </c:sourceContent>



    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;color:rgb(195, 18, 219);font-size:3em;">
    <c:title>极限编程</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     bodyStyle="background-color:white;padding:0;font-size:2em;font-size:2em;line-height:1.2em;">
      <![CDATA[
         <ul style="list-style:decimal;padding-left:1.5em;">
          <li>提前计划</li>
          <li>较少的前期设计 (尽量不要深入细节)，并确保一直能够对设计进行更改</li>
          <li>尽可能快地让实际的应用程序运行起来</li>
          <li>频繁的重构 <br />(重构不会添加新特性，而是对现有代码执行<b>移动</b>、<b>拆分</b>、<b>合并</b>、<b>删除</b>、<b>重命名</b>)</li>
          <li>避免凭直觉试着更改代码，直到代码起作用为止。</li>
          <li>先编写测试代码，在简单的设计，然后再写代码，在重构，在测试</li>
         </ul>
    ]]>
    </c:sourceContent>


    <c:sourceContent type="" title="PHP Hello world!" id="sourceContent1"
                     bodyStyle="background-color:white;padding:0;">
      <![CDATA[
class HelloWorld {
    public $world = "World";
    
    function __construct ($world) {
        $this->world = $world;
    }
    
    function getHtml() {
        return "<html>". 
               "<head>My First PHP Page!</head>".
               "<body><h1>Hello " . $this->world . " !</h1></body>". 
               "</html>"   
    }
}


$greeting = new HelloWorld ("Chunhui");
echo $greeting->getHtml();
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="继承和关键字 extends" id="sourceContent1"
                         bodyStyle="background-color:white;padding:0;">
      <![CDATA[
class HtmlDocument extends Document {
     function getHtml () {
        return "<html>". 
               "<head>My First PHP Page!</head>".
               "<body><h1>Hello " . $this->getContent() . " !</h1></body>". 
               "</html>"   
    }
    
    function getContent () {
      return "";
    }
}

class HelloWorld extends HtmlDocument {
    public $world = "World";
    
    function __construct ($world) {
        $this->world = $world;
    }
    
    function getContent () {
      return $this->world;
    }
}
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="继承构造函数" id="sourceContent1"
                             bodyStyle="background-color:white;padding:0;">
      <![CDATA[
class Document {
    protected $title;
    protected $text;

    function __construct ($title, $text) {
        $this->title = $title;
        $this->text = $text;
    }
}

class Article extends Document {
    private $introduction;
    
    /*
      继承构造函数在很多时候可能不是一个好的主意，
      如果继承的层次太深，可能会让重构的工作更加困难。
      最好将所有父类构造函数中的代码复制到子类中，这可以增加代码可读性，而且改起来也方便。
      这种小范围的重复不会带来什么问题。
    */
    function __construct ($title, $text, $introuduction) {
      parent::__construct($title, $text);
      $this->introuduction = $introuduction;
    }
}
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="异常处理" id="sourceContent1"
                             bodyStyle="background-color:white;padding:0;">
      <![CDATA[
/*
  在 PHP 4 中处理错误的简单方法是在出错时使用 die()
*/

// die 版本的错误处理
public function getDatabaseName() {
    if (!array_key_exists ('DB_NAME', $_ENV)) {
        die ("Environment variable DB_NAME is not set");
    }
  
    return $_ENV["DB_NAME"];
}

// throw new Exception 
public function getDatabaseName () {
    if (!array_key_exists ('DB_NAME', $_ENV)) {
        throw new Exception ("Environment variable DB_NAME is not set");
    }
  
    return $_ENV["DB_NAME"];
}

// try { } catch { }
public function getDatabaseName () {
    $config = new Config();
    
    try {
        $config->getDatabaseName();
    } catch (Exception $e) {
        $logger->log($e->getMessage());
        header ("Location : " . "unrecoverable.php");
    }
}
    ]]>
    </c:sourceContent>
    
    <c:sourceContent type="" title="创建自己的异常类" id="sourceContent1"
                             bodyStyle="background-color:white;padding:0;">
      <![CDATA[
class ConfigurationException extends Exception {
    const SQL_SYNTAX_ERROE = 1;
    const DB_CONNECTION_ERROR = 2;
}
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="对象引用的工作原理" id="sourceContent1"
                             bodyStyle="background-color:white;padding:0;">
      <![CDATA[
$user = new User;
$user->email = "lou@example.com";

$sameuser = $user;          
$user->email = "new@example.com";

在 PHP4 中改变 $user 的数据并不会影响 $sameuser, 因为在 PHP4 中使用赋值或从函数返回对象时，PHP4 会创建对象的副本。 
在 PHP5 中改变 $user 的数据将同时影响 $sameuser, 因为在 PHP5 中使用赋值或从函数返回对象时，PHP5 会使用对象的引用。 

or 
$sameuser = &$user;
& 会生成一个符号表别名
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="PHP 中的方法重载" id="sourceContent1"
                             bodyStyle="background-color:white;padding:0;">
      <![CDATA[
// 在 PHP5 中使用 __call() 实现带可变参数的方法重载
// 将重载行为放到一个抽象基类中
abstract class OverloadableObject {
    function __call ($name, $args) {
        $method = $name . "_" . count($args);
        if (!method_exists ($method)) {
            throw new Exception ("Call to undefined method " . get_class($this). "::$method");
        }
        
        return call_user_func_array (array ($this, $method), $args);
    }
}

// 定义子类
class Multiplier extends OverloadableObject {
    function multipliter_2 ($one, $two) {
        return $one * $two;
    }
    
    function multiplier_3 ($one, $two, $three) {
        return $one * $two * $three;
    }
}

// 使用 (如果调用了未定义的方法， __call() 会根据参数个数生成一个新方法)
$multiplier = new Multiplier;
echo $multiplier->multipliter (3, 6);
echo $multiplier->multipliter (3, 6, 9);
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="利用 PHP5 特有的重载特性实现面向切面编程" id="sourceContent1"
                             bodyStyle="background-color:white;padding:0;">
      <![CDATA[
// 记录日志是使用面向切面编程的绝好场景
// 定义一个 LoggingClass 类，并在父类的 __call() 方法中控制记录日志的过程
class LoggingClass {
    function __call ($method, $args) {
        $method = "_$method";
        
        if (!method_exists ($method)) {
            throw new Exception ("Call to undefined method " . get_class($this) . "::$method");
        }
        
        $log = Log::singleton ('file', '/tmp/user.log', 'Methods', 'NULL', LOG_INFO);        
        $log->log("Just starting method " . $method);        
        $return = call_user_func_array (array ($this, $method), $args);        
        $log->log("Just finished method " . $method);
        
        return $return;
    }
}


// 带有可记录日志方法的类
// 在本例中 init() 和 before() 方法将被记录到日志中
class DateAndTime extends LoggingClass{
    private $timestamp;

    function __construct ($timestamp = FALSE) {
        $this->init($timestamp);
    }
    
    protected function _init ($timestamp) {
        $this->timestamp = $timestamp ? $timestamp : time();
    }
    
    function getTimestamp () {
        return $this->timestamp;
    }
    
    protected function _before (DateAndTime $other) {
        return $this->timestamp < $other->getTimestamp();
    }
}
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="自动加载类" id="sourceContent1"
                             bodyStyle="background-color:white;padding:0;">
      <![CDATA[
...
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  <c:entry style="margin-top:2em;color:rgb(195, 18, 219);font-size:3em;">
    <c:title>有效使用 PHP 类</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="PHP5 能够拦截和重新定义属性访问" id="sourceContent1"
                     bodyStyle="background-color:white;padding:0;font-size:2em;font-size:2em;line-height:1.2em;">
      <![CDATA[
// Document 类的简单版本
class Document {
    public $text;
}

// 添加拦截器
// 1. 将变量从 $text 改为 $_text, 并添加了 __set() 和 __get() 方法
// 2. 如果要使用原来的名称获取 $text = $document->text, PHP5 将执行 __get('text') 
// 3. 然后 __get() 方法将会生成对 getText() 的调用.
// 4. $document->text 将作为一般的公共实例变量来使用，但实际调用时 getText() 和 setText()。
//    我们可以添加额外的处理，而无需改变客户代码
class Document {
    private $_text;
    
    private function __get ($name) {
        $method = "get" . $name;
        return $this->$method();
    }
    
    private function __set ($name, $value) {
        $method = "set" . $name;
        return $this->$method($value);
    }
    
    function getText () {
        return $this->_text;
    }
    
    function setText ($text) {
        $this->_text = $text;
    }
}
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="final 类和方法" id="sourceContent1"
                     bodyStyle="background-color:white;padding:0;font-size:2em;font-size:2em;line-height:1.2em;">
      <![CDATA[
..
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="静态类和方法" id="sourceContent1"
                     bodyStyle="background-color:white;padding:0;font-size:2em;font-size:2em;line-height:1.2em;">
      <![CDATA[
Product::find("name");
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;color:rgb(195, 18, 219);font-size:3em;">
    <c:title>面向对象原则</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="" id="sourceContent1"
                     bodyStyle="background-color:white;padding:0;font-size:2em;font-size:2em;line-height:1.2em;">
      <![CDATA[

    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>
</c:component>
