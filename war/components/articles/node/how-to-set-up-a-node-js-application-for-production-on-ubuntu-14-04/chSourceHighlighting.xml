<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
<div style="margin-bottom:.7em;">
  Node.js is an open source Javascript runtime environment for easily building server-side and networking applications. The platform runs on Linux, OS X, FreeBSD, and Windows, and its applications are written in JavaScript. Node.js applications can be run at the command line but we will teach you how to run them as a service, so they will automatically restart on reboot or failure, so you can use them in a production environment.
</div>

<div style="margin-bottom:.7em;">
In this tutorial, we will cover setting up a production-ready Node.js environment that is composed of two Ubuntu 14.04 servers; one server will run Node.js applications managed by PM2, while the other will provide users with access to the application through an Nginx reverse proxy to the application server.
</div>

<div style="margin-bottom:.7em;">
The CentOS version of this tutorial can be found <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-centos-7" target="_blank">here</a>.
</div>
]]>
  </c:abstract>

  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title>Prerequisites</c:title>
    <c:desc>
      <c:desc1> <![CDATA[
      
      ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>
This guide uses two Ubuntu 14.04 servers with private networking (in the same datacenter). We will refer to them by the following names:
</div>
<ul style="list-style-type: disc;padding-left: 1.5em;margin: .5em 0;color: gray;">
  <li><b>app:</b> The server where we will install Node.js runtime, your Node.js application, and PM2</li>
  <li><b>web:</b> The server where we will install the Nginx web server, which will act as a reverse proxy to your application. Users will access this server's public IP address to get to your Node.js application.
</li>
</ul>
<div>
It is possible to use a single server for this tutorial, but you will have to make a few changes along the way. Simply use the localhost IP address, i.e. 127.0.0.1, wherever the app server's private IP address is used.
</div>
<div style="margin-top:1em;">
Here is a diagram of what your setup will be after following this tutorial:
</div>
<div style="margin-top:1em;">
  <img src="/images/node/node_diagram.png" style="max-width:100%" />
</div>
<div style="margin-top:1em;">
Before you begin this guide, you should have a regular, non-root user with sudo privileges configured on both of your servers--this is the user that you should log in to your servers as. You can learn how to configure a regular user account by following steps 1-4 in our initial server setup guide for Ubuntu 14.04.
</div>
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>






  <c:entry style="margin-top:2em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title>Install Node.js</c:title>
    <c:desc>
      <c:desc1> <![CDATA[
      
      ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>
We will install the latest LTS release of Node.js, on the app server. On the app server, let's update the apt-get package lists with this command:
</div>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo apt-get update && sudo apt-get install git
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:1em;">
Go to the Node.js Downloads page and find the Linux Binaries (.tar.xz) download link. Right-click it, and copy its link address to your clipboard. At the time of this writing, the latest LTS release is 4.2.3. If you prefer to install the latest stable release of Node.js, go to the appropriate page and copy that link.
</div>
<div>
Change to your home directory and download the Node.js source with wget. Paste the download link in place of the highlighted part:
</div>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ wget https://nodejs.org/dist/v4.2.3/node-v4.2.3-linux-x64.tar.gz
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Now extract the tar archive you just downloaded into the node directory with these commands:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ mkdir node
$ tar xvf node-v*.tar.?z --strip-components=1 -C ./node
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Next, we'll configure the global prefix of npm, where npm will create symbolic links to installed Node packages, to somewhere that it's in your default path. We'll set it to /usr/local with this command:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ mkdir node/etc
$ echo 'prefix=/usr/local' > node/etc/npmrc
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Now we're ready to move the node and npm binaries to our installation location. We'll move it into /opt/node with this command:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo mv node /opt/
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
At this point, you may want to make root the owner of the files:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo chown -R root: /opt/node
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Lastly, let's create symbolic links of the node and npm binaries in your default path. We'll put the links in /usr/local/bin with these commands:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo ln -s /opt/node/bin/node /usr/local/bin/node
$ sudo ln -s /opt/node/bin/npm /usr/local/bin/npm
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Verify that Node is installed by checking its version with this command:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ node -v
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
The Node.js runtime is now installed, and ready to run an application! Let's write a Node.js application.
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  




  <c:entry style="margin-top:2em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title>Install PM2</c:title>
    <c:desc>
      <c:desc1> <![CDATA[
      
      ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:1em;">
Now we will install PM2, which is a process manager for Node.js applications. PM2 provides an easy way to manage and daemonize applications (run them as a service).
</div>
<div>
We will use Node Packaged Modules (NPM), which is basically a package manager for Node modules that installs with Node.js, to install PM2 on our app server. Use this command to install PM2:
</div>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo npm install pm2 -g
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  




  <c:entry style="margin-top:2em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title>Manage Application with PM2</c:title>
    <c:desc>
      <c:desc1> <![CDATA[
        <div style="font-size:1.1em;">
      PM2 is simple and easy to use. We will cover a few basic uses of PM2.</div>
      ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="Start Application" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:0em;">
The first thing you will want to do is use the pm2 start command to run your application, hello.js, in the background:
</div>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ pm2 start hello.js
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:0em;">
This also adds your application to PM2's process list, which is outputted every time you start an application:
</div>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
┌──────────┬────┬──────┬──────┬────────┬───────────┬────────┬────────────┬──────────┐
│ App name │ id │ mode │ PID  │ status │ restarted │ uptime │     memory │ watching │
├──────────┼────┼──────┼──────┼────────┼───────────┼────────┼────────────┼──────────┤
│ hello    │ 0  │ fork │ 5871 │ online │         0 │ 0s     │ 9.012 MB   │ disabled │
└──────────┴────┴──────┴──────┴────────┴───────────┴────────┴────────────┴──────────┘

    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:1em;">
As you can see, PM2 automatically assigns an App name (based on the filename, without the .js extension) and a PM2 id. PM2 also maintains other information, such as the PID of the process, its current status, and memory usage.
</div>
<div style="margin-bottom:1em;">
Applications that are running under PM2 will be restarted automatically if the application crashes or is killed, but an additional step needs to be taken to get the application to launch on system startup (boot or reboot). Luckily, PM2 provides an easy way to do this, the startup subcommand.</div>
<div style="margin-bottom:1em;">
The startup subcommand generates and configures a startup script to launch PM2 and its managed processes on server boots. You must also specify the platform you are running on, which is ubuntu, in our case:</div>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ pm2 startup ubuntu
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
The last line of the resulting output will include a command (that must be run with superuser privileges) that you must run:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
[PM2] You have to run this command as root
[PM2] Execute the following command :
[PM2] sudo su -c "env PATH=$PATH:/opt/node/bin pm2 startup ubuntu -u sammy --hp /home/sammy"
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Run the command that was generated (similar to the highlighted output above) to set PM2 up to start on boot (use the command from your own output):
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo su -c "env PATH=$PATH:/opt/node/bin pm2 startup ubuntu -u sammy --hp /home/sammy"
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Other PM2 Usage (Optional)" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:1em;">
PM2 provides many subcommands that allow you to manage or look up information about your applications. Note that running pm2 without any arguments will display a help page, including example usage, that covers PM2 usage in more detail than this section of the tutorial.
</div>
<div style="margin-bottom:1em;">
Stop an application with this command (specify the PM2 App name or id):
</div>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ pm2 stop example
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Restart an application with this command (specify the PM2 App name or id):
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ pm2 restart example
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
The list of applications currently managed by PM2 can also be looked up with the list subcommand:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ pm2 list
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
More information about a specific application can be found by using the info subcommand (specify the PM2 App name or id):    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ pm2 info example
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
The PM2 process monitor can be pulled up with the monit subcommand. This displays the application status, CPU, and memory usage:   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ pm2 monit
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Now that your Node.js application is running, and managed by PM2, let's set up the reverse proxy.  ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>




  




  <c:entry style="margin-top:2em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title>Set Up Reverse Proxy Server</c:title>
    <c:desc>
      <c:desc1> <![CDATA[
        
      ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:1em;">
Now that your application is running, and listening on a private IP address, you need to set up a way for your users to access it. We will set up an Nginx web server as a reverse proxy for this purpose. This tutorial will set up an Nginx server from scratch. If you already have an Nginx server setup, you can just copy the location block into the server block of your choice (make sure the location does not conflict with any of your web server's existing content).</div>
<div style="margin-bottom:0em;">
On the web server, let's update the apt-get package lists with this command:</div>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo apt-get update
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Then install Nginx using apt-get:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo apt-get install nginx
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Now open the default server block configuration file for editing:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo vi /etc/nginx/sites-available/default
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Delete everything in the file and insert the following configuration. Be sure to substitute your own domain name for the server_name directive (or IP address if you don't have a domain set up), and the app server private IP address for the APP_PRIVATE_IP_ADDRESS. Additionally, change the port (8080) if your application is set to listen on a different port:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
server {
    listen 80;

    server_name example.com;

    location / {
        proxy_pass http://APP_PRIVATE_IP_ADDRESS:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:1em;">
This configures the web server to respond to requests at its root. Assuming our server is available at example.com, accessing http://example.com/ via a web browser would send the request to the application server's private IP address on port 8080, which would be received and replied to by the Node.js application.</div>
<div style="margin-bottom:0em;">
You can add additional location blocks to the same server block to provide access to other applications on the same web server. For example, if you were also running another Node.js application on the app server on port 8081, you could add this location block to allow access to it via http://example.com/app2:</div>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
location /app2 {
    proxy_pass http://APP_PRIVATE_IP_ADDRESS:8081;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
}
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Once you are done adding the location blocks for your applications, save and exit. On the web server, restart Nginx:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
$ sudo service nginx restart
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Assuming that your Node.js application is running, and your application and Nginx configurations are correct, you should be able to access your application via the reverse proxy of the web server. Try it out by accessing your web server's URL (its public IP address or domain name).    ]]>
    </c:sourceContent>

    
    <c:sourceContent type="html" title="Conclusion" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:black;font-size:1.6em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-bottom:1em;">
Congratulations! You now have your Node.js application running behind an Nginx reverse proxy on Ubuntu 14.04 servers. This reverse proxy setup is flexible enough to provide your users access to other applications or static web content that you want to share. Good luck with your Node.js development!</div>
<div style="margin-bottom:0em;">
Also, if you are looking to encrypt transmissions between your web server and your users, here is a tutorial that will help you get HTTPS (TLS/SSL) support set up.</div> ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


</c:component>
