<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
Promise 是一个标准，它描述了异步调用的返回结果，包括正确返回结果和错误处理。关于详细的说明文档可以参考 <a target="_blank" href="http://promisesaplus.com/?source=Blog_Email_%5BPromises%20for%20better%20%5D">Promises/A+</a> 。目前实现 promise 标准的模块有很多，如 <a href="https://github.com/kriskowal/q" target="_blank">Q</a>、<a target="_blank" href="https://github.com/petkaantonov/bluebird?source=Blog_Email_[Promises%20for%20better%20]">bluebird</a> 和 <a href="https://github.com/medikoo/deferred?source=Blog_Email_[Promises%20for%20better%20]" target="_blank">Deferred</a>，下面我们以 Q 为例，介绍一下 promise 在 nodejs 中的使用方法。 
]]>
  </c:abstract>

  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title>将一般的异步调用的函数转换为 promise 风格的函数</c:title>
    <c:desc>
      <c:desc1> <![CDATA[
      
      ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.8em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1.2em;line-height:1.3;font-family:monospace;">
      <![CDATA[
<div>比如一般情况下，我们异步读取文件会写出下面的代码:</div>
<pre style="font-size:.8em;border:solid 1px gainsboro;margin:.5em 0; padding:1em;background-color:#ECECEC;">fs.readFile("test.txt",function(err,data){
  if(!err){
    console.log(data);
  }else{
    console.error(err);
  }
});</pre>

<div style="margin-top:1.5em;">我们可以把 fs.readFile 函数封装为 promise 风格的函数，如下：</div>
<pre style="font-size:.8em;border:solid 1px gainsboro;margin:.5em 0; padding:1em;background-color:#ECECEC;">var preadFile = function(file){
  fs.readFile(file,function(err,data){
    var deferred = Q.defer();
    if(!err){
      deferred.resolve(data);
    }else{
      deferred.reject(err);
    }

    return deferred.promise;
  });
}</pre>

<div style="margin-top:1.5em;">这样我们就可以这样调用这个方法了：</div>
<pre style="font-size:.8em;border:solid 1px gainsboro;margin:.5em 0; padding:1em;background-color:#ECECEC;">//then 的第一个参数是正确处理函数，第二个参数是错误处理函数
preadFile("test.txt").then(console.log,console.error);</pre>

<div style="margin-top:1.5em;">在 nodejs 中我们回去数据时，时常遇回调函数的返回结果需要传递给下一个回调函数，到时很大的回调函数嵌套， promise 
可以很轻松的在回调函数之间传递参数，看下面的例子：</div>
<pre style="font-size:.8em;border:solid 1px gainsboro;margin:.5em 0; padding:1em;background-color:#ECECEC;">var fun1 = function (data,cb) {
  cb(null,data+" fun1");
}

var fun2 = function (data,cb) {
  cb(null,data+" fun2");
}

var fun3 = function (data,cb) {
  cb(null,data+" fun3");
}

function main(data,cb){
  fun1(data,function(err,data){
    if(!err){
      fun2(data,function(err,data){
        if(!err){
          fun3(data,cb);
        }else{
          cb(err);
        }
      });
    }else{
      cb(err);
    }
  });
}</pre>

<div style="margin-top:1.5em;">可以看到 main 函数为了得到数据，需要嵌套调用 fun1 , fun2 和 fun3 ，如果需要调用很多函数，那么会形成很大的回调函数嵌套调用，导致代码看起来很丑陋，而且不容易维护，下面我们改用 promise 重写这段代码：</div>
<pre style="font-size:.8em;border:solid 1px gainsboro;margin:.5em 0; padding:1em;background-color:#ECECEC;">var Q = require("q");
var fun1 = function (data) {
  var deferred = Q.defer();
  deferred.resolve(data+" fun1");
  return deferred.promise;
}

var fun2 = function (data) {
  var deferred = Q.defer();
  deferred.resolve(data+" fun2");
  return deferred.promise;
}

var fun3 = function (data) {
  var deferred = Q.defer();
  deferred.resolve(data+" fun3");
  return deferred.promise;
}

function main(data,cb){
   fun2("test")
     .then(fun3)
     .then(fun4)
     .done(function(data){
       cb(null,data);//ok 获得的最终数据为 --->"test fun1 fun2 fun3"
     },function(err){
       cb(err);//failed
     });
}</pre>

<div style="margin-top:1.5em;">收集各个回调函数产生的数据：有时候我们需要执行很多回调函数，然手把这个回调函数的数据一齐传递给一个函数处理，此时我们可以使用 all 和 spread 方法，参看如下代码：</div>
<pre style="font-size:.8em;border:solid 1px gainsboro;margin:.5em 0; padding:1em;background-color:#ECECEC;">var Q = require("q");
var fun1 = function (data) {
  var deferred = Q.defer();
  deferred.resolve(data+" fun1");
  return deferred.promise;
}

var fun2 = function (data) {
  var deferred = Q.defer();
  deferred.resolve(data+" fun2");
  return deferred.promise;
}

var fun3 = function (data) {
  var deferred = Q.defer();
  deferred.resolve(data+" fun3");
  return deferred.promise;
}

Q.all([
  fun2("test1"),fun3("test2"),fun4("test3")
  ]).spread(function(){
    console.log(arguments);//获得的参数为('test1 fun1', 'test2 fun2', 'test3 fun3' )
  });</pre>


<div style="margin-top:1.5em;"><b>统一处理错误：</b>传统的回调函数方式使用的话，我们需要在每一个回调函数里判断是否有错误需要处理，这样会存在很多冗余代码，使用 promise 的话，可以使用 done 或者 fail 统一在一个函数中处理错误，如第上面的例子一样，使用 done 方法的第二个参数处理错误。</div>
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  
</c:component>
