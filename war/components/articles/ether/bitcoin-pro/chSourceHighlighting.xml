<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract style="font-size:1em;line-height:1.6em;">
    <![CDATA[
<div style="margin-bottom:1em;">
比特币使用了公开密钥系统. 每一个钱币都包括了其拥有者的公开密匙。当钱币从用户A支付给用户B时, A将B的公开密匙添加到钱币中, 然后这个钱币又被A用私人密码匙来签封。B现在即拥有了这个钱币并且可以将来使用，而A就不可能再次使用这个钱币，因为以前的交易记录以被全体网络计算机收录维护。在每笔交易前，钱币的有效性都必须经过检验确认。
</div>

<div style="background-color:blanchedalmond;padding:.425em .865em;color:black;margin-top:.325em;border-radius: 15px;text-shadow: 0px 0px 14px #ff0000;">
  <h4>Unspent Transaction Output</h4>
  <div style="margin-top:.625em;">
  在比特币中，一笔交易“在黑盒子里”实际运作的方式是：花费一种东西的集合，这种东西被称为“未被花费的交易输出”（即 “UTXO” ），这些输出由一个或多个之前的交易所创造，并在其后制造出一笔或多笔新的 UTXO，可以在未来的交易中花费。
  </div>
  <div style="margin-top:.625em;">
    一个用户的余额因此并不是作为一个数字储存起来的；而是用他占有的 UTXO 的总和计算出来的。每一笔 UTXO 可以被理解为一个 “coin（币）”：它有面额、有一个所有者。而且，一笔交易若要有效，必须满足的两个规则是：
  </div>
  <ul style="margin-top:.325em;list-style: none;margin-left: 1em;">
    <li>&#x278A; 该交易必须包含一个有效的签名，来自它所花费的 UTXO 的拥有者；</li>
    <li>&#x278B; 被花费的 UTXO 的总面额必须等于或者大于该交易产生的 UTXO 的总面额。</li>
  </ul>
  <div style="margin-top:.625em;">
如果一个用户想要发送一笔交易，发送 X 个币到一个特定的地址。有时候，他们拥有的 UTXO 的一些子集组合起来面值恰好是 X，在这种情况下，他们可以创造一个交易：花费他们的 UTXO 并创造出一笔新的价值 X 的 UTXO，由目标地址占有。
  </div>
  <div style="margin-top:.625em;">
    当这种完美的配对不可能的时候，用户就必须打包其和值大于 X 的 UTXO 输入集合，并添加一笔拥有第二个目标地址的 UTXO，称为“变更输出”，分配剩下的币到一个由他们自己控制的地址。
  </div>
</div>
<div style="margin-top:1em;">
<b>### Original Bitcoin client/API calls list</b><br />
JSONRPC 接口列表 https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list<br />
<b>### Mastering Bitcoin</b><br />
一本电子书: https://www.oreilly.com/library/view/mastering-bitcoin/9781491902639/ch01.html<br />
<b>### blockchain</b><br />
https://www.blockchain.com<br />
<b>### blockchair</b><br />
https://blockchair.com<br />
<b>### 区块链钱包—BTC离线签名交易(java)</b><br />
https://blog.csdn.net/chengke8882/article/details/100696092
</div>

]]>
  </c:abstract>
  
  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<div style="color:blue;font-size:1.2em;">Connecting Bitcoin Nodes Via JSON RPC</div>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div style="margin-bottom:.425em;">
  万事开头难，做 bitcoin 开发最基础的事情可能是先有一个主网或测试网节点, 以下网站可以帮你创建一个主网或测试网节点<a href="https://blockdaemon.com/">点这</a>, 需要注册并登录。创建节点的时候选择 shard node 是免费的，需要绑定信用卡，扣1美元，以后一直免费用。
</div>
<div style="margin-bottom:.425em;">
  <b style="font-size:1.2em;"><a href="https://blockdaemon.com/">Blockdaemon Bitcoin nodes</a></b> expose an RPC interface for connecting and interactions. 
</div>
<div style="color:burlywood;">
  &euro; 该服务提供的接口很多功能被过滤了不能查询 UTXO, 但是可以查询块高和查询交易状态。
</div>
]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="Connecting:" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:.625em;line-height:1em;font-family:monospace;">
      <![CDATA[
<div>
  <img style="width:100%;margin:auto;" 
    src="/images/ether/btc-dedicated-cURL-connect.jpeg" />
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Command Line cURL" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1.425em;background-color:white;margin-top:1em;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.425em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:.825em;">
  <img style="width:100%;margin:auto;" 
    src="/images/ether/btc-core-connect.jpeg" />
</div>
<div style="margin-bottom:.425em;">
节点创建完毕后可以通过以下命令测试节点是否正常。
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1.425em;background-color:white;margin-top:.25em;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.25em;font-family:monospace;">
      <![CDATA[
curl --user blockdaemon:blockdaemon \
     --data '{"method":"getblockchaininfo","params":[],"id":1,"jsonrpc":"2.0"}' \
     -H "Content-Type: application/json" -X POST https://<node endpoint>
   ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  
  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<div style="color:blue;font-size:1.2em;">How to Generate Bitcoin Addresses in Java</div>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div style="margin-bottom:.225em;">
用代码创建一个用于收取比特币的钱包地址, 有很多钱包软件可以通过私钥导入到比特币钱包中。
</div>]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:.825em;line-height:1.825em;font-family:monospace;">
      <![CDATA[
<div>
下面这篇描述了生成一个比特币钱包地址的详细步骤, 遗憾的是实际生成的地址并不可用, 但是可以将这篇文章作为理论参考: 
</div>
<div style="margin-bottom:.225em;">
<a href="https://www.novixys.com/blog/generate-bitcoin-addresses-java/">https://www.novixys.com/blog/generate-bitcoin-addresses-java/</a>
</div>

<div style="margin-bottom:.225em;">
为此我在 github 上找到了一个专门用于生成比特币地址的 java 桌面工具: <a href="https://github.com/MrMaxweII/Bitcoin-Address-Generator/releases/download/V3.1.0/CoinAddressGeneratorV3.1.0.jar">点这下载该工具</a> 
</div>
<div style="margin-bottom:.225em;">
该工具源码里支持所有主流加密货币的钱包地址生成,甚至包括以太坊地址: BTC, BCH, BSV, LTC, BCH-T, BSV-T, BTC-T, LTC-T (-T代表的是对应的测试网地址)
</div>
<div style="margin-bottom:.225em;">
虽然是一个桌面程序，但是可以直接复制里边的核心代码，集成到自己的项目中用于生成钱包地址，工具界面截图: 
</div>
<div style="margin-bottom:.225em;">
<img style="width:100%;margin:auto;" 
    src="/images/ether/7FA13A66-5BFA-4325-9B43-35880D48697D.png" />
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1.425em;background-color:white;margin-top:1.5em;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.325em;font-family:monospace;margin-top:1.25em;">
      <![CDATA[
<div style="margin-bottom:.225em;">
抄袭代码后可以通过以下链接验证你的地址是否真正有效: 
</div>
<div style="margin-bottom:.225em;">
<b>BCH:</b> <span style="color:green;">https://blockchair.com/bitcoin-cash/address/这里替换你生成的地址</span>
</div>
<div style="margin-bottom:.225em;">
<b>BSV:</b> <span style="color:green;">https://blockchair.com/bitcoin-sv/address/这里替换你生成的地址</span>
</div>
<div style="margin-bottom:.225em;">
<b>BTC:</b> <span style="color:green;">https://www.blockchain.com/btc/address/这里替换你生成的地址</span>
</div>
<div style="margin-bottom:.625em;">
<b>LTC:</b> <span style="color:green;">https://blockchair.com/litecoin/address/这里替换你生成的地址</span>
</div>
<div style="margin-bottom:.225em;">
以下是一个正确的主网地址打开后的截图: <b style="color:red;">12zeCvN7zbAi3JDQhC8tU3DBm35kDEUNiB</b>
</div>
<div style="margin-bottom:.225em;">
<img style="width:100%;margin:auto;" 
    src="/images/ether/BE580030-C69A-4707-AE6C-4B3F3A09CB52.png" />
</div>
<div style="margin-bottom:.625em;">
也可以直接查询地址余额: <br /> 
<b style="color:blue;">(主网,接口and网页) <br />https://api.blockchair.com/bitcoin-cash/dashboards/address/12zeCvN7zbAi3JDQhC8tU3DBm35kDEUNiB</b><br /> 
<b style="color:blue;">https://www.blockchain.com/btc/address/12zeCvN7zbAi3JDQhC8tU3DBm35kDEUNiB</b><br /> <br /> 
<b style="color:blue;">(测试网,接口and网页) <br />https://api.blockchair.com/bitcoin/testnet/dashboards/address/mpQnMXrxbkkQxwfNQqGMyz1mHmrAfiJYCG</b><br /> 
<b style="color:blue;">https://live.blockcypher.com/btc-testnet/address/mpQnMXrxbkkQxwfNQqGMyz1mHmrAfiJYCG/</b>
</div>
<div style="margin-bottom:.225em;">
查询一个地址上的 UTXO: <br /> 
<b style="color:blue;">(测试网，接口) <br />https://api.blockcypher.com/v1/btc/test3/addrs/mpQnMXrxbkkQxwfNQqGMyz1mHmrAfiJYCG/full?limit=10000?unspentOnly=true&includeScript=true</b>
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="List of address prefixes &amp;mdash; 常用地址前缀一览表" id="sourceContent1"
                     titleStyle="padding-left:0;color:darkmagenta;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:.625em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<table>
  <thead>
    <tr>
      <th style="border: dashed 1px;padding: 5px 10px;">Decimal prefix</th>
      <th style="border: dashed 1px;padding: 5px 10px;">Hex</th>
      <th style="border: dashed 1px;padding: 5px 10px;">Example use</th>
      <th style="border: dashed 1px;padding: 5px 10px;width: 85px;">Leading symbol(s)</th>
      <th style="border: dashed 1px;padding: 5px 10px;">Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">0</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">00</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Pubkey hash <a href="https://en.bitcoin.it/wiki/Transaction#Pay-to-PubkeyHash">(P2PKH address)</a></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">1</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">5</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">05</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Script hash <a href="https://en.bitcoin.it/wiki/Pay_to_script_hash">(P2SH address)</a></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">3</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">3EktnHQD7RiAE6uzMj2ZifT9YgRrkSgzQX</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">128</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">80</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Private key (<a href="https://en.bitcoin.it/wiki/Wallet_import_format">WIF</a>, uncompressed pubkey)</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">5</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">5Hwgr3u458GLafKBgxtssHSPqJnYoGrSzgQsPwLFhLNYskDPyyA</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">128</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">80</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Private key (WIF, compressed pubkey)</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">K or L</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">L1aW4aubDFB7yfras2S1mN3bqg9nwySY8nkoLmJebSLD5BWv3ENZ</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">4 136 178 30</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">0488B21E</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"><a href="https://en.bitcoin.it/wiki/BIP_0032">BIP32</a> pubkey</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">xpub</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">xpub661MyMwAqRbcEYS8w7XLSVeEsBXy79zSzH1J8vCdxAZningWLdN3<br />zgtU6LBpB85b3D2yc8sfvZU521AAwdZafEz7mnzBBsz4wKY5e4cp9LB</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">4 136 173 228</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">0488ADE4</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">BIP32 private key</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">xprv</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">xprv9s21ZrQH143K24Mfq5zL5MhWK9hUhhGbd45hLXo2Pq2oqzMMo63o<br />StZzF93Y5wvzdUayhgkkFoicQZcP3y52uPPxFnfoLZB21Teqt1VvEHx</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">111</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">6F</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Testnet pubkey hash</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">m or n</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">mipcBbFg9gMiCh81Kj8tqqdgoZub1ZJRfn</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">196</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C4</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Testnet script hash</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">2</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">2MzQwSSnBHWHqSAqtTVQ6v47XtaisrJa1Vc</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">239</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">EF</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Testnet Private key (WIF, uncompressed pubkey)</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">9</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">92Pg46rUhgTT7romnV7iGW6W1gbGdeezqdbJCzShkCsYNzyyNcc</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">239</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">EF</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Testnet Private key (WIF, compressed pubkey)</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">c</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">cNJFgo1driFnPcBdBX8BrJrpxchBWXwXCvNH5SoSkdcF6JXXwHMm</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">4 53 135 207</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">043587CF</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Testnet BIP32 pubkey</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">tpub</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">tpubD6NzVbkrYhZ4WLczPJWReQycCJdd6YVWXubbVUFnJ5KgU5MDQrD9<br />98ZJLNGbhd2pq7ZtDiPYTfJ7iBenLVQpYgSQqPjUsQeJXH8VQ8xA67D</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">4 53 131 148</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">04358394</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Testnet BIP32 private key</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">tprv</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">tprv8ZgxMBicQKsPcsbCVeqqF1KVdH7gwDJbxbzpCxDUsoXHdb6SnTPY<br />xdwSAKDC6KKJzv7khnNWRAJQsRA8BBQyiSfYnRt6zuu4vZQGKjeW4YF</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">&nbsp;</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">&nbsp;</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Bech32 pubkey hash or script hash</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">bc1</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">&nbsp;</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">&nbsp;</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Bech32 testnet pubkey hash or script hash</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">tb1</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx</td>
    </tr>
  </tbody>
</table>
   ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:.5em;">
    <c:title><![CDATA[<div style="color:blue;font-size:1.2em;">比特币开发之 &mdash; Testnet & Segnet & Regtest</div>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<a target="_blank" href="/images/ether/bitcoin-testnet-tutorial-for-developers.png">RUN YOUR OWN NODE FOR BITCOIN TESTNET (FOR BLOCKCHAIN DEVELOPERS)</a>
        ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="Testnet &amp;mdash; 比特币的试验场" id="sourceContent1"
                     titleStyle="padding-left:0;color:darkmagenta;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
Testnet 是用于测试的区块链，网络和货币的总称。 testnet 是一个功能齐全的在线P2P网络，包括钱包，测试比特币（testnet币），挖矿以及类似主干网的所有其他功能。实际上它和主网只有两个区别：testnet 币是毫无价值的，挖掘难度足够低，任何人都可以相对容易地使用testnet币）。
</div>
<div style="margin-top:.325em;">
任何打算在比特币主干网上用于生产的软件开发都应该首先在 testnet 上用测试币进行测试。这样可以保护开发人员免受由于软件错误而导致的金钱损失，也可以保护网络免受由于软件错误导致的意外攻击。
</div>
<div style="margin-top:.325em;">
然而，保持测试币的无价值和易挖掘并不容易。尽管有来自开发商的呼吁，但还是有人使用先进的设备（GPU和ASIC）在testnet上挖矿。这就增加了难度，使用CPU挖矿不可能，导致获取测试币非常困难，以致于人们开始赋予其一定价值，所以测试币并不是毫无价值。结果，时不时地testnet必须被报废并重新从创始区块启动，重新进行难度设置。
</div>
<div style="margin-top:.325em;">
目前的 testnet 被称为 testnet3，是 testnet 的第三次迭代，于2011年2月重启，重置了之前的 testnet 网络的难度。
</div>
<div style="margin-top:.325em;">
请记住，<b style="color:red;">testnet3 是一个大区块链，在 2017 年初超过 20 GB</b>。完全同步需要一天左右的时间，并占用您的计算机资源。它不像主干网，也不是“轻量级”。运行 testnet 节点的一个好方法就是将其运行为一个专用的虚拟机镜像（例如，VirtualBox，Docker，Cloud Server等）。
</div>
<h4 style="margin-top:.625em;color:blueviolet;">使用 testnet</h4>
<div style="margin-top:.325em;">
像几乎所有其他比特币软件一样，Bitcoin Core 完全支持在 testnet 网络运行而不是只能在主干网上运行，还允许您进行测试币挖矿并运行一个 testnet 全节点。
</div>
<div style="margin-top:.325em;">
如果要在 testnet 上启动 Bitcoin Core，而不是在主干网启动，您可以使用 testnet 开关：<br />
<span style="color:green;">$ bitcoind -testnet</span>
</div>
<div style="margin-top:.325em;">
在日志中，您应该会看到，bitcoind 正在默认 bitcoind 目录的 testnet3 子目录中构建一个新的区块链：<br />
<span style="color:green;">bitcoind: Using data directory /home/username/.bitcoin/testnet3</span>
</div>
<div style="margin-top:1.325em;">
要连接 bitcoind，可以使用 bitcoin-cli 命令行工具，但是要记得切换到 testnet 模式：
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli -testnet getinfo
> {
    "version": 130200,
    "protocolversion": 70015,
    "walletversion": 130000,
    "balance": 0.00000000,
    "blocks": 416,
    "timeoffset": 0,
    "connections": 3,
    "proxy": "",
    "difficulty": 1,
    "testnet": true,
    "keypoololdest": 1484801486,
    "keypoolsize": 100,
    "paytxfee": 0.00000000,
    "relayfee": 0.00001000,
    "errors": ""
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.25em;">
      <![CDATA[
您还可以使用 getblockchaininfo 命令确认 testnet3 区块链的详细信息和同步进度：
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli -testnet getblockchaininfo
> {
    "chain": "test",
    "blocks": 1088,
    "headers": 139999,
    "bestblockhash": "0000000063d29909d475a1c4ba26da64b368e56cce5d925097bf3a2084370128",
    "difficulty": 1,
    "mediantime": 1337966158,
    "verificationprogress": 0.001644065914099759,
    "chainwork": "0000000000000000000000000000000000000000000000000000044104410441",
    "pruned": false,
    "softforks": [
   
    [...]
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.25em;">
      <![CDATA[
<div>
在 testnet3 上，你也可以运行使用其他语言和框架实现的全节点来实验和学习，例如 btcd（用Go编写）和 bcoin（用JavaScript编写）。
</div>
<div style="margin-top:.325em;">
  在2017年初，testnet3 支持主网的所有功能，也包括在主干网络上尚未激活的隔离见证（Segregated Witness &mdash; 见[segwit]隔离见证章节）。因此 testnet3 也可用于测试隔离见证功能。
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Segnet &amp;mdash; 隔离见证测试网络" id="sourceContent1"
                     titleStyle="padding-left:0;color:darkmagenta;font-size:1em;background-color:white;font-size:1.2em;margin-top:.825em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
2016年，启动了一个特殊用途的测试网络，以帮助开发和测试隔离见证（也称为segwit;见[segwit]）。 该测试区块链称为 segnet，可以通过运行 Bitcoin Core 的特殊版本（分支）来连接。
</div>
<div style="margin-top:.325em;">
  由于已经将 segwit 添加到 testnet3 中，因此后来不再使用 segnet 来测试 egwit 功能。在将来，我们可能会看到其他专门用于测试单个功能或主要架构更改（如segnet）的测试网络区块链。
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Regtest &amp;mdash; 本地区块链" id="sourceContent1"
                     titleStyle="padding-left:0;color:darkmagenta;font-size:1em;background-color:white;font-size:1.2em;margin-top:.825em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
Regtest 代表“回归测试”，是一种比特币核心功能，允许您创建本地区块链以进行测试。与 testnet3（它是一个公共和共享的测试区块链）不同，regtest 区块链旨在作为本地测试的封闭系统运行。您从头开始启动 regtest 区块链，创建一个本地的创世区块。您可以将其他节点添加到网络中，或者使用单个节点运行它来测试 Bitcoin Core 软件。
</div>
<div style="margin-top:.325em;">
要在 regtest 模式下启动 Bitcoin Core，您可以使用 regtest 标志：<br />
<span style="color:green;">$ bitcoind -regtest</span>
</div>
<div style="margin-top:.325em;">
就像使用 testnet 一样，Bitcoin Core 将在 bitcoind 默认目录的 regtest 子目录下初始化一个新的区块链：<br />
<span style="color:green;">bitcoind: Using data directory /home/username/.bitcoin/regtest</span>
</div>
<div style="margin-top:.325em;">
要使用命令行工具，还需要指定 regtest 标志。 我们来试试 getblockchaininfo 命令来检查 regtest 区块链：
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli -regtest getblockchaininfo
> {
    "chain": "regtest",
    "blocks": 0,
    "headers": 0,
    "bestblockhash": "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",
    "difficulty": 4.656542373906925e-10,
    "mediantime": 1296688602,
    "verificationprogress": 1,
    "chainwork": "0000000000000000000000000000000000000000000000000000000000000002",
    "pruned": false,
    [...]
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.825em;">
      <![CDATA[
你可以看到，还没有任何区块。 让我们开始挖一些（500块），赚取奖励：
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli -regtest generate 500
> [
    "7afed70259f22c2bf11e406cb12ed5c0657b6e16a6477a9f8b28e2046b5ba1ca",
    "1aca2f154a80a9863a9aac4c72047a6d3f385c4eec5441a4aafa6acaa1dada14",
    "4334ecf6fb022f30fbd764c3ee778fabbd53b4a4d1950eae8a91f1f5158ed2d1",
    "5f951d34065efeaf64e54e91d00b260294fcdfc7f05dbb5599aec84b957a7766",
    "43744b5e77c1dfece9d05ab5f0e6796ebe627303163547e69e27f55d0f2b9353",
     [...]
    "6c31585a48d4fc2b3fd25521f4515b18aefb59d0def82bd9c2185c4ecb754327"
  ]
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.825em;">
      <![CDATA[
挖掘所有这些块只需要几秒钟，这样就可以很容易地进行测试。 如果您检查您的钱包余额，您将看到您获得了前400个区块的奖励（Coinbase的奖励必须挖满100块之后才能花费）:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli -regtest getbalance
> 12462.50000000
   ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:.5em;">
    <c:title><![CDATA[<div style="color:blue;font-size:1.2em;">比特币测试币</div>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.45em;font-family:monospace;">
      <![CDATA[
<h5>目前支持对testnet中的交易进行查询的网站有: </h5>
<ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
  <li>Blockchain.info Testnet Explorer</li>
  <li>Bitcoin Testnet on Blockr.io</li>
  <li>Bitcoin Testnet on insight.bitpay.com</li>
  <li>BlockTrail Testnet Explorer, Testnet API and Testnet Faucet</li>
  <li>BlockCypher Testnet Explorer(推荐)</li>
</ul>
<h5 style="margin-top:.825em;">测试币水笼头: </h5>
<ul style="margin-top:.325em;list-style: none;margin-left: 1em;">
  <li>&#x278A; https://coinfaucet.eu/en/btc-testnet/</li>
  <li>&#x278B; https://bitcoinfaucet.uo1.net/</li>
</ul>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="创建你自己的测试网节点 bitcoin-testnet-box" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1.425em;background-color:white;margin-top:1em;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.25em;font-family:monospace;">
      <![CDATA[
$ docker pull chunhui2001/bitcoin-testnet-box
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1.425em;background-color:white;margin-top:1em;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.25em;margin-top:1.2em;">
      <![CDATA[
<div>
  The docker image will run two bitcoin nodes in the background and is meant to be attached to allow you to type in commands. The image also exposes the two JSON-RPC ports from the nodes if you want to be able to access them from outside the container.
</div>
<div style="margin-top:.625em;">
  This will start up two nodes using the two datadirs <b>1</b> and <b>2</b>. They will only connect to each other in order to remain an isolated private testnet. Two nodes are provided, as one is used to generate blocks and it's balance will be increased as this occurs (imitating a miner). You may want a second node where this behavior is not observed.
</div>
<ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
  <li><b>Node 1</b> will listen on port 19000, allowing <b>node 2</b> to connect to it.</li>
  <li><b>Node 1</b> will listen on port 19001 and <b>node 2</b> will listen on port 19011 for the JSON-RPC server.</li>
</ul>
   ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>
  
  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<div style="color:blue;font-size:1.2em;">UTXO的定义（交易，输入输出）</div>]]></c:title>
    <c:desc>
      <c:desc1>
       <![CDATA[
       转自: <a href="https://blog.csdn.net/liudaoqiang_tj/article/details/81545002">
        https://blog.csdn.net/liudaoqiang_tj/article/details/81545002</a>
       ]]>
        
      </c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
  在比特币系统中并没有账户的概念，有的是遍布全网区块链的UTXO。所谓UTXO是指关联比特币地址的比特币金额的集合，是一个包含数据和可执行代码的数据结构。一个UTXO的基本单位是“聪”，“聪”是比特币的最小计量单位，一个比特币等于10^8聪。一个UTXO一旦被创建则不可分割，只能当做交易的输入被花费掉，花费后产生新的UTXO，花费后产生新的UTXO，这样周而复始地实现货币的价值转移。因此我们使用的比特币钱包看到的账户余额实际上时UTXO聚合计算的产物。
</div>
<div style="margin-top:.625em;">
  比特币的交易由交易输入和交易输出组成，UTXO是交易输入和输出的一部分，所以说UTXO是交易最基本的组成单元。
</div>
<div style="margin-top:.625em;">
一个交易输入指向特定的UTXO，并且包含签名脚本，这个签名脚本用来满足UTXO的花费条件，为真则宣布自己对这笔资金拥有所有权。实际上节点在构造交易时会根据一定的算法选择一定数量的UTXO，同时生成相应的脚本签名作为输入的一部分加入到交易中。
</div>
<div style="margin-top:.625em;">
每一个交易输出都伴随着资金的转移，交易输出包含一定数量的比特币和锁定脚本。锁定脚本作为资产指向一个比特币地址而设置的花费条件，只有满足这个花费条件的人才可以花费这笔资金。
</div>
<div style="margin-top:.625em;">
总得来说，交易的输入和输出总是在大多数交易中都会同时出现，这样就实现比特币资金的价值转移，当然还有一种交易模型有些特殊，它只有输出，这就是比特币区块中第一笔交易称为 coinbase 交易，也称这为创币交易，它没有输入，是系统用于对矿工工作量证明的奖励，稳定增加相应的货币供应。
</div>
<div style="margin-top:.625em;">
UTXO作为比特币独创的价值转移基本单元。比特币网络安全运行多年证明UTXO模型经受住考验，是与账户差异化的一种金融交易模式，对整个金融行业具有重大的积极影响！UTXO和Account各有各的优劣，在区块链项目和落地场景中选择合适的模型是极为关键的。目前<b style="color:green;">比特币采用UTXO</b>，以<b style="color:green;">太坊选用的是Account</b>，其它绝大多数区块链项目都基于这两种模型或变种。UTXO和Account的特点小编总结如下：
</div>
<ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
  <li><b>UTXO: </b>原理简单、易于扩展、高度并行、隐匿性强</li>
  <li><b>Account: </b>易于理解、节省空间、易于实现、模式成熟</li>
</ul>
<div style="margin-top:.625em;">
UTXO 还是 Account 模型是原链就需要确定的重要数据结构，团队的选择还是聚焦在两种典型的模型系统中，Account 模型和 UTXO 模型，和其他大多数区块链设计一样，选择了模型就决定了协议层的重要实现，两种模型各有利弊，不同区块链针对想聚焦的场景自身会有判断。
</div>
<div style="background-color:blanchedalmond;padding:.425em .865em;color:red;margin-top:.325em;border-radius: 15px;text-shadow: 0px 0px 14px #ff0000;">
  <div style="margin-top:.625em;">
  在比特币中，一笔交易“在黑盒子里”实际运作的方式是：花费一种东西的集合，这种东西被称为“未被花费的交易输出”（即 “UTXO” ），这些输出由一个或多个之前的交易所创造，并在其后制造出一笔或多笔新的 UTXO，可以在未来的交易中花费。
  </div>
  <div style="margin-top:.625em;">
    一个用户的余额因此并不是作为一个数字储存起来的；而是用他占有的 UTXO 的总和计算出来的。<br /> 每一笔 UTXO 可以被理解为一个 “coin（币）”：它有面额、有一个所有者。而且，一笔交易若要有效，必须满足的两个规则是：
  </div>
  <ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
    <li>1）该交易必须包含一个有效的签名，来自它所花费的 UTXO 的拥有者；</li>
    <li>2）被花费的 UTXO 的总面额必须等于或者大于该交易产生的 UTXO 的总面额。</li>
  </ul>
  <div style="margin-top:.625em;">
如果一个用户想要发送一笔交易，发送 X 个币到一个特定的地址。有时候，他们拥有的 UTXO 的一些子集组合起来面值恰好是 X，在这种情况下，他们可以创造一个交易：花费他们的 UTXO 并创造出一笔新的价值 X 的 UTXO，由目标地址占有。
  </div>
  <div style="margin-top:.625em;">
    当这种完美的配对不可能的时候，用户就必须打包其和值大于 X 的 UTXO 输入集合，并添加一笔拥有第二个目标地址的 UTXO，称为“变更输出”，分配剩下的币到一个由他们自己控制的地址。
  </div>
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="设计的易实现性 — 以太坊 弃UTXO用账户模型" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
  以太坊黄皮书的设计者 Gavin Wood 对 UTXO 的理解十分深刻，既然 UTXO 有这么多的优点，他为什么弃用 UTXO了？这时你应该提出个问题，以太坊的最大亮点是什么？你肯定会回答：智能合约。正是因为智能合约的考虑，Gavin Wood 要基于 UTXO 去实现图灵完备的智能合约（功能多样性的超级电脑）是困难的。而账户模型是天然的面向对象的，对每一笔交易，都会在相对应账户上进行记录(nonce++)。为了易于管理账户，而引入了世界状态，每一笔交易都会改变这个世界状态。这和现实世界是相对应的，每一个微小的改变，都会改变这个世界。
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="追求更高的性能" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
以太坊的账户模型很容易的实现了超级电脑模型。然而，性能一直是一道难以逾越的坎。在性能方面，utxo 天然的可以并行运行，而基于世界状态的以太坊难以扩展。Gavin Wood 当然是认识到这一点的，但要去改变，很难。那到不如用带有函数式编程特点的 rust 去重写以太坊，也算是一种折中方案。
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="比原链的思考" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
马克思哲学的否定之否定规律，事物的发展变化是螺旋式上升的。在区块链领域也是适合的，前进一步，也需要后退半步。基于 UTXO 模型去实现堆栈式虚拟机，那还是会失去灵活性，用 UTXO 去结合以太坊EVM, 难度极大，也是不太实用的，这好比用 haskell 语言，去实现 cpp 风格的面向对象编程, 看不到有什么实际的意义。世界上没有银弹，比原链必须舍弃部分，妥协部分才能更好地适应场景。
</div>
<div style="margin-top:.625em;">
我们在采用了比特币 UTXO 的易于并行运算的模型前提下，还做了针对性的改进，加了个资产号字段，使不同的资产可以在同一笔交易中处理转换，只要满足总输入等于总输出就可以。
</div>
<div style="margin-top:.625em;">
<img src="/images/ether/utxo-butxo.jpeg" />
</div>
<div style="margin-top:.625em;">
但为了数据易于管理，易于编程，我们引入以太坊的世界状态的概念，每一种资产都维持一个全局世界状态，该全局世界状态具有快速可查找，不可更改，简单易提供证明的特性。它的具体实现会参考以太坊的PAT树（一种扩展的基数树），比特币的 merkle 树，以及 cosmos 的 IAVL 树（一种不可更改的平衡二叉树）。每一种资产的所有 outputs 在一个全局的 UTXO 数据库中会有一个索引计数（每一个 output 的计数不能超过1，保持并行计算时，一个 output 最多能被一个 BVM 实例所使用，确保了数据一致性）。BVM 是比原链实现的智能合约虚拟机模型， 每一笔交易的的执行，都会实例化一个BVM实例，只有在BVM实例中，各资产的世界状态才能在保持有效性，一致性的前提下更新状态。BVM可以并行创造多个”合约沙盒”实例, 在沙盒中合约的运行不受外界影响。
</div>
<div style="margin-top:.625em;">
比原链创造的初衷是解决数字资产登记流转的问题，对于公有链项目保持简洁、高效，专注、就是保障安全，新的扩展型UTXO模型正是基于这种场景实现的融合和改进。
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="区块" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
想要了解区块到底是什么，最简单快捷的办法就是分析它的数据结构，以 Bitcoin 中的区块 #514095 为例：
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[

{
　　"hash":"00000000000000000018b0a6ae560fa33c469b6528bc9e0fb0c669319a186c33",
　　"confirmations":1009,
　　"strippedsize":956228,
　　"size":1112639,
　　"weight":3981323,
　　"height":514095,
　　"version":536870912,
　　"versionHex":"20000000",
>> "merkleroot":"5f8f8e053fd4c0c3175c10ac5189c15e6ba218909319850936fe54934dcbfeac", <<
　　"tx":[
　　  // ...
　　],
　　"time":1521380124,
　　"mediantime":1521377506,
　　"nonce":3001236454,
　　"bits":"17514a49",
　　"difficulty":3462542391191.563,
　　"chainwork":"0000000000000000000000000000000000000000014d2b41a340e60b72292430",
>> "previousblockhash":"000000000000000000481ab128418847dc25db4dafec464baa5a33e66490990b", <<
　　"nextblockhash":"0000000000000000000c74966205813839ad1c6d55d75f95c9c5f821db9c3510"
}
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
<div>
  在这个 Block 的结构体中，previousblockhash 和 merkleroot 是两个最重要的字段；前者是一个哈希指针，它其实是前一个 Block 的哈希，通过 previousblockhash 我们能递归地找到全部的 Block，也就是整条主链，后者是一个 Merkle 树的根，Merkle 树中包含整个 Block 中的全部交易，通过保存 merkleroot，我们可以保证当前 Block 中任意交易都不会被修改。
</div>
<div style="margin-top:.625em;">
  Ethereum 的区块链模型虽然与 Bitcoin 有非常大的不同，但是它的 Block 结构中也有着类似的信息：
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
{
    "author":"0x00d8ae40d9a06d0e7a2877b62e32eb959afbe16d",
    "difficulty":"0x785042b0",
    "extraData":"0x414952412f7630",
    "gasLimit":"0x47b784",
    "gasUsed":"0x44218a",
    "hash":"0x4de91e4af8d135e061d50ddd6d0d6f4119cd0f7062ebe8ff2d79c5af0e8344b9",
    "logsBloom":"0x
    "miner":"0x00d8ae40d9a06d0e7a2877b62e32eb959afbe16d",
    "mixHash":"0xb8155224974967443d8b83e484402fb6e1e18ff69a8fc5acdda32f2bcc6dd443",
    "nonce":"0xad14fb6803147c7c",
    "number":"0x2000f1",
>>> "parentHash":"0x31919e2bf29306778f50bbc376bd490a7d056ddfd5b1f615752e79f32c7f1a38", <<<
    "receiptsRoot":"0xa2a7af5e3b9e1bbb6252ba82a09302321b8f0eea7ec8e3bb977401e4f473e672",
    "sealFields":[
       "0xa0b8155224974967443d8b83e484402fb6e1e18ff69a8fc5acdda32f2bcc6dd443",
       "0x88ad14fb6803147c7c"
    ],
    "sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
    "size":"0x276",
    "stateRoot":"0x87e7e54cf229003014f453d64f0344e2ba4fc7ee3b95c7dd2642cca389fa1efe",
    "timestamp":"0x5a10968a",
    "totalDifficulty":"0x1804de0c47ffe1",
    "transactions":[...],
>>> "transactionsRoot":"0xc2091b032961ca23cf8323ea827e8956fe6dda9e68d75bcfaa8b910035397e35", <<<
    "uncles":[]
}
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
parentHash 和 transactionsRoot 分别对应着 Bitcoin 中 previousblockhash 和 merkleroot，这两者在整个区块链网络中是非常重要的。
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="哈希指针" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
Block 结构体中的哈希指针在区块链中有两个作用，它不仅能够连接不同的区块，还能够对 Block 进行验证，保证 Block 中的数据不会被其他恶意节点篡改。
</div>
<div style="margin-top:.625em;">
除了第一个 Block，每一个 Block 中的 prev_hash 都是前一个 Block 的哈希，如果某一个节点想要修改主链上 Block 的交易，就会改变当前 Block 的哈希，后面的 Block 就没有办法通过 prev_hash 找到前面的链，所以当前节点篡改交易的行为就会被其他节点发现。</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Merkle Tree" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
另一个字段 merkleroot 其实就是一个 Merkle 树 的根节点，它其实是一种使用哈希指针连接的数据结构；虽然 Merkle 树有叶节点和非叶节点，但是它只有叶节点会存储数据，所有的非叶结点都是用于验证数据完整性的哈希。
</div>
<div style="margin-top:.625em;">
每一个 Block 中的全部交易都是存储在这个 Merkle 树中并将 merkleroot 保存在 Block 的结构体中，保证当前 Block 中任意交易的篡改都能被立刻发现。
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="UTXO 模型" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
在 Bitcoin 以及其他使用 UTXO 模型的加密货币中，某一个『账户』中的余额并不是由一个数字表示的，而是由当前区块链网络中所有跟当前『账户』有关的 UTXO 组成的。
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
{
   "addr":"14uhqGYDEhqwfdoP59QdLWdt4ha5CHttwQ",
   "n":1,
   "script":"76a9142ae017a5bd24a3f935897085253e503fbfd66f4e88ac",
   "spent":false,
   "tx_index":335926477,
   "type":0,
   "value":21680000
}
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
上述的 UTXO 中包含了很多信息，例如：包含当前 UTXO 属于的交易索引 tx_index、交易接收方的地址 addr、交易的数额 value。
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="交易" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
UTXO 其实就是交易的一部分，基于 UTXO 模型的交易由输入和输出两个部分组成：
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[

{
   "txid":"5be7a9e47f56c98e5297a44df52da0475f448ece98bb51489103cdf70653092f",
   "hash":"5be7a9e47f56c98e5297a44df52da0475f448ece98bb51489103cdf70653092f",
   "version":1,
   "size":224,
   "vsize":224,
   "locktime":0,
   "vin": [...],
   "vout": [...],
   "hex":"0100000001a90b4101e6cbb75e1ff885b6358264627581e9f96db9ae609acec98d72422067000000006b483045022100c42c89eb2b10aeefe27caea63f562837b20290f0a095bda39bec37f2651af56b02204ee4260e81e31947d9297e7e9e027a231f5a7ae5e21015aabfdbdb9c6bbcc76e0121025e6e9ba5111117d49cfca477b9a0a5fba1dfcd18ef91724bc963f709c52128c4ffffffff02a037a0000000000017a91477df4f8c95e3d35a414d7946362460d3844c2c3187e6f6030b000000001976a914aba7915d5964406e8a02c3202f1f8a4a63e95c1388ac00000000",
   "blockhash":"0000000000000000000c23ca00756364067ce5e815deb5982969df476bfc0b5c",
   "confirmations":5,
   "time":1521981077,
   "blocktime":1521981077
}
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
在每一笔合法的交易中，所有的输入的 value 之和必须大于所有输出的 value 之和，这两者之间的差值就是矿工费：
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
sum(inputs.value) = sum(outputs.value) + fee
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
基于 UTXO 的交易模型，与我们在日常生活中使用纸币的场景是非常相似的，每一张纸币都是不可分割的整体，当我们想要使用现金购买商品或者服务时，往往都会获得找零。
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
inputs = price + change + fee
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="输入和签名" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
UTXO 模型中的每一笔交易都是由多个交易输入组成的，这些输入其实就是 UTXO + 签名：
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
"inputs":[
    {
       "sequence":4294967295,
       "witness":"",
       "prev_out":{
          "spent":true,
          "tx_index":338283541,
          "type":0,
          "addr":"1Djf4kCa1hZ58h18FjjWFc5ZxQKxJSV5sg",
          "value":195659190,
          "n":0,
          "script":"76a9148bb2c126e768c64a61b8ca95cf9602fceba0404b88ac"
       },
       "script":"483045022100c42c89eb2b10aeefe27caea63f562837b20290f0a095bda39bec37f2651af56b02204ee4260e81e31947d9297e7e9e027a231f5a7ae5e21015aabfdbdb9c6bbcc76e0121025e6e9ba5111117d49cfca477b9a0a5fba1dfcd18ef91724bc963f709c52128c4"
    }
 ]
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
上述 JSON 其实就是 Bitcoin 交易 #338309214 的输入，这里的 prev_out 就来自于另一笔交易 #338283541 的输出。通过不停的回溯，最终我们会找到当前交易涉及的 Coinbase，也就是当前 UTXO 相关 Bitcoin 被挖出来的 Block 的首笔交易。通过 txid 和 vout 两个字段，我们能够在区块链网络中定位到唯一一个 UTXO，这个 UTXO 加上持有当前 UTXO 的地址对交易的签名构成了一个交易输入。简述：输入是一个或多个 UTXO+签名，通过 prev_out 回溯到 Coinbase）
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="输出" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
每一个交易都可能会有多个输出，也就是 vout 数组，每一个 vout 都可以指向不同的地址，其中也有当前输出包含的值 value，在这里也就是 Bitcoin 的单位：
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
"out":[
    {
       "spent":true,
       "tx_index":338309214,
       "type":0,
       "addr":"3CcqrGq4oQcfx3u75ijj4tDiqf4HJvhoeP",
       "value":10500000,
       "n":0,
       "script":"a91477df4f8c95e3d35a414d7946362460d3844c2c3187"
    },
    {
       "spent":true,
       "tx_index":338309214,
       "type":0,
       "addr":"1GedHcxdxq2tab98hqAmREUK9BBYHKznof",
       "value":184809190,
       "n":1,
       "script":"76a914aba7915d5964406e8a02c3202f1f8a4a63e95c1388ac"
    }
 ],
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
<div>
每一个未被使用的 out 就是一个 UTXO（Unspent Transaction Output），我们可以通过其中的 addresses 字段找到持有当前输出的地址。UTXO 模型通过链式的方式组织所有交易的输入和输出，每一个交易的输出最终都能追寻到一个 Coinbase，也就是当前 Bitcoin 被挖出时的区块的第一笔交易。
</div>
<div style="margin-top:.625em;">
  由于在 UTXO 中没有账户的概念，所以并行地处理交易不会出现任何问题，同时不可变的账本能够让我们在 Bitcoin 节点快速更新时，也能分析某一时刻整个网络中数据的快照。
</div>
<div style="margin-top:.625em;">
  虽然 UTXO 模型的不可变账本条目带来一些好处，但是当我们需要计算某个地址中的余额时，需要遍历整个网络中的全部相关区块。同时，并行的处理交易虽然可行，不过并行的创建交易却会出现很多问题。例如多笔交易使用了同一个 UTXO。导致双花，最终只有一笔交易能够被网络确认。
</div>
<div style="margin-top:.625em;">
  UTXO 模型确实能够解决区块链世界中的各种问题，它的核心思想就是保证已经写入的数据不可变。链式的 UTXO 就是基于这一核心思想的，通过哈希指针连接不同交易的输入和输出，保证所有交易的合法性。
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="账户余额模型" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:.6em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
与 UTXO 模型不同的就是账户余额模型，它跟现实世界中的银行账户非常相似，Ethereum 就使用了账户余额模型存储区块链中的数据。
</div>
<div style="margin-top:.625em;">
  相比于 UTXO 模型，账户余额模型更加容易实现和理解，如果忽略很多 Ethereum 的实现细节，那么在整个网络中只存在三种对象：账户、交易和区块。在这里，我们会介绍该模型中的三个最重要的概念，虽然 Block 并不是账户余额模型中独有的概念，但是我们也会介绍它在 Ethereum 中有什么特殊之处。 
</div>
<h4 style="margin-top:.625em;color:blue;">账户</h4>
<div>
Ethereum 其实就是一个巨大的状态机，其中的状态都是由多个账户组成的，每一个账户都包含四个字段 (nonce, ether_balance, contact_code, storage)：
</div>
<div style="margin-top:.625em;">
  在 Ethereum 中有两种类型的账户，一种是被私钥控制的账户，它没有任何的代码，与 Bitcoin 地址基本有完全相同的功能，能够向网络中发送已签名的交易；另一种是被合约代码控制的账户，能够在每一次收到消息时，执行保存在 contract_code 中的代码，所有的合约在网络中都能够响应其他账户的请求和消息并提供一些服务。
</div>
<div style="margin-top:.625em;">
  所有账户的 nonce 都必须从 0 开始递增，当前账户每使用 nonce 签发并广播一笔交易之后，都会将其 +1；UTXO 模型决定了来自同一地址的多笔金额相同的交易完全不同，从原理上避免了重放攻击，因为账户余额模型中不存在 UTXO，交易仅仅是账户 ether_balance 的变动，所以在这里引入 nonce 来解决重放攻击的问题。
</div>
<h4 style="margin-top:.625em;color:blue;">合约账户</h4>
<div>
被私钥控制的账户与 Bitcoin 中地址其实差不多，所以没有什么可以解释的，这里简单介绍一些合约账户。目前 Ethereum 网络上最多的合约账户应该就是 ERC20 的合约了，我们平时经常说的 Token 就是 Ethereum 上的合约，这些合约其实也是 Ethereum 账户：
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
Token 的转账其实就是合约的调用，所有的账户余额都是存储在这个合约的 balances 中：
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
mapping(address => uint256) balances;
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
<div>
每一笔 Token 的转账都会改变这个 mapping 中对应地址的值并发出 Transfer 事件，这也就是 Token 的实现原理；部署 Token 的智能合约其实非常简单，很多加密货币项目其实都只是一个 ERC20 的 Token，发行的成本几乎为 0。
</div>
<h4 style="margin-top:.625em;color:blue;">交易</h4>
<div>
由于没有 Bitcoin 复杂的 UTXO 模型，Ethereum 的交易模型也简单，交易中没有输入和输出的 Transaction IO 结构，只有 from 和 to 两个地址：
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
{
   "blockHash":"0xb4a992ff99a487db8421f516be998920f06dfe5d355d88e3b7f22b7422e6340d",
   "blockNumber":"0x24f85c",
   "chainId":null,
   "condition":null,
   "creates":null,
   "from":"0x8b56adcf332ff80a1f1bf433975dcb28b730d110",
   "to":"0xe94b04a0fed112f3664e45adb2b8915693dd5ff3",
   "value":"0x10d43fb8311ca800",
   "gas":"0x2062a",
   "gasPrice":"0x560aab7c5",
   "hash":"0xfea448d11cfa863c8b3c38d3b65649e66c1957f9ac16638e3a0edff45a6b3d84",
   "input":"0x0f2c9329000000000000000000000000fbb1b73c4f0bda4f67dca266ce6ef42f520fbb98000000000000000000000000e592b0d8baa2cb677034389b76a71b0d1823e0d1",
   "nonce":"0x3fe",
   "publicKey":"0x765b0f012e49f6a4cc5c917fb176984b24814bdaf5f9464db1a7f9ffcc730cb678f69e49f78aa9de8249cce138bbc25cf8842374d8d09089dff7f1ef6906f4fb",
   "r":"0x4275d35821dec971f6d58c2adae077ffcdfa3ec74af542a2d29ab4e5239d8b25",
   "raw":"0xf8b48203fe850560aab7c58302062a94e94b04a0fed112f3664e45adb2b8915693dd5ff38810d43fb8311ca800b8440f2c9329000000000000000000000000fbb1b73c4f0bda4f67dca266ce6ef42f520fbb98000000000000000000000000e592b0d8baa2cb677034389b76a71b0d1823e0d11ca04275d35821dec971f6d58c2adae077ffcdfa3ec74af542a2d29ab4e5239d8b25a036221b525c758c45e60f964eec698ae33208dfa74bea7f77dff002ceec418b0a",
   "s":"0x36221b525c758c45e60f964eec698ae33208dfa74bea7f77dff002ceec418b0a",
   "standardV":"0x1",
   "transactionIndex":"0x8",
   "v":"0x1c"
}
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.2em;">
      <![CDATA[
<div>
交易的手续费也不再是交易输入输出 value 的差值，而是使用 gas 和 gasPrice 来表示，为了防止重放攻击，这里也引入了 nonce 字段。
(nonce, from, to, value, input) 是一个 Transaction 包含的最重要的几个字段，通过 nonce 防止重放攻击，from 和 to 分别表示了当前交易的发出者和接受者，value 是当前交易包含的 Ether，input 中包含了合约调用相关的二进制信息。
</div>
<div style="margin-top:.625em;">
  每当一个 Transaction 被 Ethereum 主网挖到后，from 和 to 账户的 Ether 余额就会变动，Ethereum 就像一个状态机，它接受一个又一个的 Transaction 并不停改变自己的状态。
</div>
<h4 style="margin-top:.625em;color:blue;">UTXO 模型 VS 账户余额模型</h4>
<div style="margin-top:.625em;">
  无论是 UTXO 模型还是账户余额模型，都能够很好地解决区块链世界中的『安全』问题，保证交易的合法，从原理上杜绝一些可能的攻击行为，实现原理的不同其实也只是由于出发点不同，在设计时权衡了利弊；UTXO 模型相比于账户余额模型有以下的两个优点：
</div>
  <ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
    <li>如果用户启用了新的地址用于转账和交易，新地址与原地址之间的关系很难被追踪，更好地保证用户的隐私；</li>
    <li>UTXO 模型理论上来说可以并行地利用不同的 UTXO 签发多笔交易，并广播到网络中；</li>
  </ul>
<div style="margin-top:.625em;">
  而账户余额模型也有它的优点：
</div>
  <ul style="margin-top:.325em;list-style: disc;margin-left: 1.5em;">
    <li>每一笔交易都只需要有一个签名，交易的输入和输出都是地址，能够节省存储空间；</li>
    <li>由于在区块链层级没有『币的来源』这一概念，很难实现对来源的追踪和回溯；</li>
    <li>因为创建交易时不需要对过去的 UTXO 进行签名，可以从任何一个时间点开始同步区块的状态，利于编写轻量级客户端；</li>
  </ul>
<div style="margin-top:.625em;">
  在比特币交易系统中，没有账户iD和账户密码一说，也没有账户余额计算一说。但是有公钥（钱包地址）和秘钥，可以浅显的类比理解为：公钥就是账户ID，私钥就是账户密码。在比特币交易系统中，知道对方公钥，就可以给对方转账进行交易。拥有了私钥，就代表着拥有了该地址下所有UTXO的使用权和控制权。
</div>
   ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<div style="color:blue;font-size:1.2em;">How to create a Bitcoin raw transaction using bitcoind</div>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[转自: <a href="https://vhernando.github.io/bitcoind-raw-transaction-create-howto">https://vhernando.github.io/bitcoind-raw-transaction-create-howto</a>]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
A Bitcoin raw transaction is a chunk of bytes that contains the info about a Bitcoin transaction.
</div>
<div style="margin-top:.625em;">
That raw transaction will become part of the blockchain when a miner adds it to a block.
</div>
<div style="margin-top:.625em;">
We are going to create a Raw Transaction step by step using bitcoind (Bitcoin Core server).
</div>
<div style="margin-top:.625em;">
Recomendation: Do not store private keys in an online system.
</div>
<div style="margin-top:.625em;">
Better create an online wallet with addresses and public keys only(意思是推荐用公钥在线创建一个钱包): <br />
bitcoind: <a href="/blog/articles/ether/bitcoin-pro.shtml#How-to-create-a-wallet-with-no-private-keys">
How to create a wallet with no private keys</a>
</div>
<div style="margin-top:.625em;">
And run another instance of bitcoind offline with the private keys.(用私钥运行一个离线bitcoind节点)
</div>
<div style="margin-top:.625em;">
The online bitcoind will validate current blockchain, but will not be able to sign transactions.(在线bitcoind节点，无法签名交易)
</div>
<div style="margin-top:.625em;">
Offline bitcoind has the private keys but does not store the whole copy of the blockchain to validate it.(离线bitcoind节点拥有私钥，但是没有存储全部区块数据且无法验证交易)
</div>
<div style="margin-top:.625em;">
This tutorial also works if you have one online machine with public and private keys, but it is not safe to store
private keys in an online machine.
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Get current balance &amp;clubs;" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
To get the total balance tracked by our online wallet:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli getbalance "*" 0 true
> 0.03311140
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
We have a total of 0.03311140 bitcoins! That is the maximum amount we could transfer.
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Get unspent UTXOS &amp;clubs;" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
<b>Bitcoin is an UTXO based system</b>. You actually do not send Bitcoin to an address, but spent some existing UTXOs and create new ones.
</div>
<div style="margin-top:.625em;">
We need a list of unspent UTXOs in our wallet to create the input part of our transaction.
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli listunspent
> {
    "txid": "old_transaction",
    "vout": 0,
    "address": "my_old_address",
    "scriptPubKey": "my_old_address_scriptpubkey",
  ...
    "amount": 0.0098,
  ...
  },
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.625em;">
      <![CDATA[
<div>
listunspent command will show you the list of UTXOs you can use to create a transaction.
</div>
<div style="margin-top:.425em;">
Then you select the ones you want to spend.
</div>
<div style="margin-top:.425em;">
To determine an UTXO you will need its txid and vout.
</div>
<div style="margin-top:.425em;">
You will also need the scriptPubKey when signing the transaction.
</div>
<div style="margin-top:.425em;">
Total amount spent needs to be lower than the sum of all amount of UTXOs we are using.
</div>
<div style="margin-top:.425em;">
In the offline computer we can check if we actually own the bitcoin address: "my_old_address"
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(offline) $ bitcoin-cli getaddressinfo "my_old_address"
> {
    "address": "my_old_address",
    "scriptPubKey": "my_old_address_scriptpubkey",
    ...
    "ismine": true,
    "iswatchonly": false,
    "isscript": false,
    "iswitness": true,
    ...
    "pubkey": "my_old_address_public_key",
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.625em;">
      <![CDATA[
<div>
<b>ismine true</b> shows that you own that witness address and you will be able to spend it.
</div>
<div style="margin-top:.425em;">
public key in <b>"pubkey"</b> is important to create the transaction. 
</div>
<div style="margin-top:.425em;">
  We import the public key in the online bitcoind:
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli importpubkey "my_old_address_public_key" false
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.625em;">
      <![CDATA[
Note down the scriptPubKey because we will use it when signing the transaction.
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Create the Raw Transaction &amp;clubs;" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
First we need the destination address where we are going to send the funds to.
</div>
<div style="margin-top:.425em;">
In this example we are going to use only one destination address. i.e: "bc1q_my_destination_address"
</div>
<div style="margin-top:.425em;">
Help about createrawtransaction command:
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli help createrawtransaction
> createrawtransaction [{"txid":"id","vout":n},...] [{"address":amount},{"data":"hex"},...] ( locktime ) ( replaceable )
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.625em;">
      <![CDATA[
<div>
Now we create the raw transaction:
</div>
<div style="margin-top:.425em;">
NOTE: We send 0.004 bitcoin to bc1_my_destination_address, because we do not spend the whole UTXO amount we will need a change address for fundrawtransaction command.
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli createrawtransaction '[{"txid":"old_transaction","vout":0}]' '[{"bc1q_my_destination_address":0.004}]' 0 true
> 020000000_first_raw_transaction_XXXXX
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.625em;">
      <![CDATA[
We can decode the created raw transaction to examine it:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli decoderawtransaction "020000000_first_raw_transaction_XXXXX"
> {
    "txid": "XXXXX"
    "hash": "XXXXX"
    "version": 2,
    "size": 83,
    "vsize": 83,
    "weight": 332,
    "locktime": 0,
    "vin": [
      {
        "txid": "old_transaction",
        "vout": 0,
      ...
      }
    ],
    "vout": [
      {
        "value": 0.004,
        "n": 0,
        "scriptPubKey": {
        ...
          "addresses": [
            "bc1q_my_destination_address"
          ]
        }
      }
    ]
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Fund the Raw Transaction &amp;clubs;" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
UTXO contains 0.0098 btc, we send 0.004 btc to bc1_my_destination_address and we want to receive 0.0058 change in our change address bc1q_my_change_address.
</div>
<div style="margin-top:.425em;">
We set feerate to 0.00005.
</div>
<div style="margin-top:.425em;">
Because we created the transaction with bc1_my_destination_address at vout: 0 we tell fundrawtransaction command that change address comes at position 1.
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli fundrawtransaction "020000000_first_raw_transaction_XXXXX" '{"changeAddress":"bc1q_my_change_address" ,"includeWatching":false, "feeRate":0.00005, "replaceable":true, "changePosition":1, "subtractFeeFromOutputs":[0]}' true
> {
    "hex": "020000000_second_raw_transaction_XXXXX",
    "fee": 0.00000701,
    "changepos": 1
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
<div>
NOTE: Even if we send the whole UTXO amount we will need a fake change address for fundrawtransaction command.
</div>
<div style="margin-top:.425em;">
We decode the raw transaction and check the change address appears:
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli decoderawtransaction "020000000_second_raw_transaction_XXXXX"
> {
    "txid": "XXXXX",
    "hash": "XXXXX",
    "version": 2,
    "size": 113,
    "vsize": 113,
    "weight": 452,
    "locktime": 0,
    "vin": [
      {
        "txid": "old_transaction",
        "vout": 0,
      ...
      }
    ],
    "vout": [
      {
        "value": 0.004,
        "n": 0,
        "scriptPubKey": {
        ...
          "addresses": [
        "bc1q_my_destination_address"
          ]
        }
      },
      {
        "value": 0.0058,
        "n": 1,
        "scriptPubKey": {
        ...
          "addresses": [
        "bc1q_my_change_address"
          ]
        }
      }
    ]
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Sign the Raw Transaction &amp;clubs;" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
Signing process is performed in the offline machine.
</div>
<div style="margin-top:.425em;">
We unlock the wallet if it is secured by a passphrasse (recommended):
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(offline) $ bitcoin-cli walletpassphrase "my_passphrase" 300
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1.625em;">
      <![CDATA[
We pass the scriptPubKey and the exact amount of the UTXO:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(offline) $ bitcoin-cli signrawtransactionwithwallet "020000000_second_raw_transaction_XXXXX" '[{"txid":"old_transaction","vout":0,"scriptPubKey":"my_old_address_scriptpubkey", "amount":0.0098}]'
> {
    "hex": "020000000_signed_raw_transaction_XXXXX",
    "complete": true
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Send the Raw Transaction to other nodes &amp;clubs;" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
First in the online machine we test the new transaction:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli testmempoolaccept '["020000000_signed_raw_transaction_XXXXX"]'
> [
    {
      "txid": "new_raw_transaction_txid",
      "allowed": true
    }
  ]
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
Then we send the raw transaction:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli sendrawtransaction "020000000_signed_raw_transaction_XXXXX"
> "new_raw_transaction_txid"
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
We can check state of the sent transaction:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
(online) $ bitcoin-cli gettransaction "new_raw_transaction_txid"
> { 
    "amount": 0.00000000,
    "confirmations": 0,
    "trusted": false,
    "txid": "new_raw_transaction_txid",
    "walletconflicts": [
    ],
    "hex": "020000000_signed_raw_transaction_XXXXX"
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:burlywood;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
<div>
After some time, when transaction is accepted in a block, confirmations will rise.
</div>
<div style="margin-top:.425em;">
  6 confirmations or more is usually enough to consider the transaction as immutable in the blockchain.
</div>
<div style="margin-top:.425em;">
  We could also check the transaction in a block explorer: <br />
https://blockstream.info/nojs/tx/new_raw_transaction_txid
</div>
   ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<div id="How-to-create-a-wallet-with-no-private-keys" style="color:blue;font-size:1.2em;"># bitcoind: How to create a wallet with no private keys</div>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[转自: https://vhernando.github.io/bitcoind-create-wallet-without-private-keys-bitcoin]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
We are going to create a wallet with no private keys. Nevertheless we will add some addresses to track them. First launch bitcoind node:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoind -noconnect -printtoconsole=0
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Create a new wallet &amp;clubs;" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
We will use createwallet command:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli help createwallet
> createwallet "wallet_name" ( disable_private_keys )

  Creates and loads a new wallet.

  Arguments:
  1. "wallet_name" (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.
  2. disable_private_keys (boolean, optional, default: false) Disable the possibility of private keys (only watchonlys are possible in this mode).
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
We set disable_private_keys to true:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli createwallet my_wallet true
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
Next time we run bitcoind we can load the already existing wallet.
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoind -wallet=my_wallet -noconnect -printtoconsole=0
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
or using loadwallet command:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli loadwallet my_wallet
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="To import an address:" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
Import an address to default "" label, and do not start a rescan:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli importaddress "3foobarbazfadfasdfadfafad" "" false
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
We do not start a rescan until we import the last address because rescanning takes a lot of time. <br />
To list current labels:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli listlabels
> [
    "",
    "other_label"
  ]
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
To show addresses per label:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli getaddressesbylabel ""
> {
    "3foobarbazfadfasdfadfafad": {
      "purpose": "receive"
    }
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
When adding the last address we perform a rescan:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli importaddress "bc1foobarbazadasdfasfadaf" "" true
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Show current balance" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;margin-top:.625em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
Once a rescan was performed, we can display current balance of added addresses:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli help getbalance
> getbalance ( "(dummy)" minconf include_watchonly )

  Returns the total available balance.
  The available balance is what the wallet considers currently spendable, and is
  thus affected by options which limit spendability such as -spendzeroconfchange.

  Arguments:
  1. (dummy) (string, optional) Remains for backward compatibility. Must be excluded or set to "*".
  2. minconf (numeric, optional, default=0) Only include transactions confirmed at least this many times.
  3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
To show right balance set include_watchonly to true:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli getbalance "*" 1 true # Show balance for at least one confirmation.
> 0.05235821
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
<div>
NOTE: For commands like fundrawtransaction to work, we need the public key instead of the address:
</div>
<div style="margin-top:.425em;">
We can import the public key using importpubkey command:
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli help importpubkey
> importpubkey "pubkey" ( "label" rescan )
  Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. 
  Requires a new wallet backup.
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli importpubkey "my_public_key"
// Import public key to "" label and perform a rescan:
$ bitcoin-cli importpubkey "my_public_key" "" true
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
When showing info about an address:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli getaddressinfo "bc1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
> {
    "address": "bc1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "scriptPubKey": "whatever",
    "ismine": false,
    "iswatchonly": true,
    "isscript": false,
    "iswitness": true,
    "witness_version": 0,
    "witness_program": "whatever",
    "label": "",
    "timestamp": 0,
    "labels": [
      {
        "name": "",
        "purpose": "receive"
      }
    ]
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
If we imported the public key:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli getaddressinfo "bc1bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
> {
    "address": "bc1bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
    "scriptPubKey": "whatever",
    "ismine": false,
    "iswatchonly": true,
    "isscript": false,
    "iswitness": true,
    "witness_version": 0,
    "witness_program": "whatever",
>>> "pubkey": "my_public_key", <<<
    "label": "",
    "timestamp": 0,
    "labels": [
      {
        "name": "",
        "purpose": "receive"
      }
    ]
  }
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
List addresses in related groups<br />
We can list addresses in related groups (to track our privacy):
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli help listaddressgroupings
> [
  [
    [
      "my_first_address",
      0.20000000,
      ""
    ]
  ],
  [
    [
      "my_second_address",
      0.00000000,
      ""
    ]
  ]
]
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
Edit label of an existing address<br />
To change label of an address we can execute again importaddress command:
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
$ bitcoin-cli importaddress "my_address" "new_label" false
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:crimson;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:.625em;">
      <![CDATA[
We could see the new associated address using getaddressinfo command.
   ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<div style="color:blue;font-size:1.2em;">BlockCypher</div>]]></c:title>
    <c:desc>
      <c:desc1 style="line-height:1.425em;"> <![CDATA[
<div>
  成立于美国加州的 BlockCypher，为用户提供一个加密货币应用程序可以很容易开发和扩展的平台。其中一个关键部分是低延迟的API库和其他工具让实现区块链基础设施变得更加容易。
</div>
<div style="margin-top:.425em;line-height:1.625em;">
  BlockCypher 自 2013 年年底推出，是由经验丰富的软件老兵 Matthieu Riou 和 Nicholson 共建。Riou 是一个在银行、软件和 SaaS 公司等繁杂系统中，拥有超过 14 多年工作经验的设计师。Nicholson 则是一个在软件产品管理、产品营销，并涉及环境、能源和国防等多个领域的工程师，他有 15 年以上的工作经历。
</div>
<div style="margin-top:.425em;line-height:1.625em;">
  BlockCypher 旨在降低区块链应用构建的技术壁垒，促进创新让开发人员能够轻松建立、监控和安全使用他们的应用程序。BlockCypher 的云服务，能够让团队关注于应用程序的功能而不是比特币的托管服务。
</div>
<div style="margin-top:.425em;line-height:1.625em;">
  2014 年 7 月份，BlockCypher 发布了多重签名的 API，随后在 3 月末发布了支付端口 API。
</div>
<div style="margin-top:.425em;line-height:1.625em;">
  作为一家为大型机构（如交易所和支付服务提供商）提供比特币钱包服务的公司，BlockCypher 最重要的服务就是他们所称的“置信因子”（ConfidenceFactor）技术，如果 Blockcypher 处理器有合理的理由确定（即99%以上）<b style="color:crimson;">双花攻击</b>不会被发起，那么交易就会以零确认来处理。
</div>
<div style="margin-top:.425em;line-height:1.625em;">
对此，Blockcypher 这样描述道：“简单来说，如果一个未经确认的交易反馈了 99.9% 的置信因子，那么我们的数据就会明确双花将有0.1%的机会成功。在设计上，我们是保守的。即使当我们确认有90%的置信因子，一个双花成功的可能性也明显低于10%。”
</div>
]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="工作量证明和双花攻击" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
  2008年，中本聪提出了一种完全通过点对点技术实现的电子现金系统，它使得在线支付能够直接由一方发起并支付给另外一方，中间不需要通过任何的金融机构。虽然数字签名部分解决了这个问题，但是如果仍然需要第三方的支持才能防止双重支付的话，那么这种系统也就失去了存在的价值。比特币的工作量证明机制(PoW)的本质，就是要使现金系统在点对点的环境下运行，并防止双花攻击。
</div>
<div style="margin-top:.425em;">
工作量证明机制的原理如下：网络中每一个区块都包含当前网络中的交易和上一个区块的区块头哈希。<b style="color:crimson;">新区块产生，其区块头哈希必须满足工作量证明条件。整个网络将满足工作量证明的哈希链连接起来，从而形成区块链。</b>即: <b style="color:blue;">最先算出区块头哈希的节点将产生一个区块，并将这个区块通过P2P协议广播到网络上, 其他节点接收到这个哈希后会做同样的计算，如果验证通过则将该区块记录到本地账本中，最先算出区块头哈希的节点将得到奖励。</b>除非攻击者重新完成全部的工作量证明，否则形成的交易记录将不可更改。<b style="color:darkviolet;">最长的区块链不仅将作为被观察到的交易序列的证明，而且被看做是来自算力最大的群体的共识。</b>只要整个网络中大多数算力都没有打算合作起来对全网进行攻击，那么诚实的节点将会生成最长的、超过攻击者的链条，从而实现对双花攻击的抵抗。
</div>
<div style="margin-top:.425em;">
双花攻击实际上是一个结果。<b style="color:deeppink;text-shadow: 0px 0px 14px #ff0000;">如果一个攻击者A将同一个比特币同时支付给B和C两个用户，并且B和C两个用户都认可了这笔交易。那么我们说A将该比特币花了两次，A实现了一次双花攻击。</b>针对工作量证明机制的双花攻击中，51%攻击是被讨论的最多的一种攻击形式。但针对工作量证明机制的双花攻击实际上有多种形式，包括芬妮攻击、竞争攻击、Vector76攻击等。实际上，实用的数字货币双花攻击还有很多种其他形式。下文中，我们将通过多个我们发现的多个安全漏洞，讨论多种数字货币双花攻击的多种原因，并提出一种高效的减缓措施。
</div>
<div style="margin-top:.425em;">
比特币白皮书中，有过这样的表述：诚实节点控制算力的总和，大于有合作关系的攻击者算力的总和，该系统就是安全的。
</div>
<div style="margin-top:.425em;">
换句说，当系统中有合作关系的恶意节点所控制的算力，超过诚实节点所控制的算力，系统就是有被攻击的风险。这种<b style="color:brown;">由恶意节点控制超过50%算力所发起的攻击，称为51%算力攻击（51% Attack）</b>。
</div>
<div style="margin-top:.425em;">
那是不是所有的加密货币系统都有可能遭遇51%算力攻击的风险呢？其实并不是的，<b style="color:darkblue;">只有基于PoW（工作量证明）共识机制的加密货币，才存在51%算力攻击</b>，比如比特币、比特现金和目前阶段的以太坊等；而非PoW共识算法的加密货币则不存在51%算力攻击，如基于DPoS（委托权益证明）共识机制的EOS、TRON等。
</div>
<h3 style="font-style: italic;">双花（Double Spending）。双花的意思是一份"钱"花了两次甚至多次。</h3>
<div style="margin-top:.425em;">
51% 算力攻击是如何做到双花的呢？假设小黑有 666BTC，他把这些币支付的大白同时，也把这些币发到自己的另一钱包地址上。换一句话说，小黑的一份钱，同时转给两个人。最终，发给大白那笔交易先被得到了确认，并打包在区块高度为N的区块内。
</div>
<div style="margin-top:.425em;">
这时，控制了超过50%算力的小黑，发起51%算力攻击。他通过重新组装第N个区块，将发给自己那笔交易打包进区块里，并持续在这条链上延展区块，由于算力的优势，这条链将成为最长合法链。这样小黑666BTC双花成功，大白钱包里的666BTC"不翼而飞"了。
</div>
<div>
  <img style="width:100%;margin:auto;" src="/images/ether/double-spending.png" />
</div>
<div style="margin-top:.425em;">
那拥有超过50%的算力，就可以为所欲为，什么坏事都可以做吗？其实并不是的。即使控制超过50%的算力，也不能转移其他人的币（偷币），<b style="color:darkcyan;">因为这个操作是需要私钥进行签名，如果想伪造签名来“偷币”，这种行为是诚实的矿工所不能容忍的，这将颠覆系统共识</b>。<b style="color:brown;">这种情况下，其他矿工将不会在他挖出的区块后继续拓展区块链，会主动分叉(Fork)出合法的区块链</b>，“偷币”矿工挖出的区块将被孤立。
</div>
   ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<div style="color:blue;font-size:1.2em;">共识算法</div>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
  区块链可以看作一本记录所有交易的分布式公开帐簿，区块链网络中的每个参与者都把它看作一本所有权的权威记录。
</div>
<div style="margin-top:.425em;">
公开账本历史数据不可篡改，只允许往后添加，每个节点都具有相同的权限，那么就带来一个问题：
</div>
<h3 style="font-style: italic;color:gray;">公开账本每个新区块由谁来负责写入？</h3>
<div style="margin-top:.425em;">
因为所有节点都一样，如果所有节点同时一起写入账本数据，那么肯定数据会不一致。
</div>
<div style="margin-top:.425em;">
因此<b style="color:blueviolet;font-size:1.2em;font-weight: normal;">需要一种机制来保证区块链中的每一个区块只能由一个节点来负责写入，如何选出写入账本数据的节点，这就是共识机制</b>。让平等的参与者按照某种秩序达成一致意见。
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="主流的共识算法有哪些？" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:1em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
  区块链中的共识算法说到底还是分布式系统中最重要的一致性问题：
</div>
<h3 style="font-style: italic;color:gray;">在分布式网络中如何保证数据一致性。</h3>
<div style="margin-top:.425em;">
说到一致性问题，就不得不提大名鼎鼎的拜占庭将军问题。是 Leslie Lamport 1982 年提出用来解释一致性问题的一个虚构模型。拜占庭是古代东罗马帝国的首都，由于地域宽广，守卫边境的多个将军（系统中的多个节点）需要通过信使来传递消息，达成某些一致的决定。但由于将军中可能存在叛徒（系统中节点出错），这些叛徒将努力向不同的将军发送不同的消息，试图会干扰一致性的达成。
</div>
<div style="margin-top:.425em;">
Leslie Lamport 证明，当叛变者不超过1/3时，存在有效的算法，不论叛变者如何折腾，忠诚的将军们总能达成一致的结果。如果叛变者过多，则无法保证一定能达到一致性。
</div>
<h3 style="font-style: italic;color:gray;">分布式一致性算法(CAP) &mdash;&mdash; Paxos、Raft、ZAB、Gossip (一般用于数据库设计)</h3>
<div>
Lesile Lamport，Latex 的发明者，提出了 Paxos 算法。他虚拟了一个叫做 Paxos 的希腊城邦，这个岛按照议会民主制的政治模式制定法律，但是没有人愿意将自己的全部时间和精力放在这件事上。所以无论是议员、议长或者传递纸条的服务员都不能承诺别人需要时一定会出现，也无法承诺批准决议后者传递消息的时间。由于 Paxos 让人太难以理解，Lamport 觉得同行不能理解他的幽默感，于是后来又重新发表了朴实的算法描述版本《Paxos Made Simple》。
</div>
<div>
  <img style="max-width:650px;" src="/images/ether/v2-1ca63958654275596030c929bbd953df_720w.jpeg" />
</div>
<div style="margin-top:.425em;">
该共识算法就整体来说，存在两个阶段，如图，第一个阶段是提议，第二个阶段是决定。
</div>
<div style="margin-top:.425em;">
分布式系统要做到 fault tolorence，就需要共识模型，而节点达成共识，不仅需要节点之间的算法，还会取决于 client 的行为。比如即使副本系统使用 multi-paxos 在所有副本服务器上同步了日志序号，但如果 Client 被允许从非 Leader 节点写入数据，则整个副本系统仍然不是强一致的。
</div>
<table style="width:100%;margin-top:.625em;">
  <thead>
    <tr>
      <th style="border: dashed 1px;padding: 5px 10px;">共识算法</th>
      <th style="border: dashed 1px;padding: 5px 10px;">币种</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">PoW</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">BTC、ETH、LTC</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">PoS</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Peercoin、NXT、ARDR</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">DPoS</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Bitshare、EOS、LSK、XAS</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">DBFT</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">NEO</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">PBFT</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">ZIL</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">POS+IPOS</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">QTUM</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">POS+POW</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">AE</td>
    </tr>
  </tbody>
</table>
<h3 style="font-style: italic;color:gray;">主流区块链共识算法</h3>
<table style="width:100%;">
  <thead>
    <tr>
      <th style="border: dashed 1px;padding: 5px 10px;">区块链</th>
      <th style="border: dashed 1px;padding: 5px 10px;">语言</th>
      <th style="border: dashed 1px;padding: 5px 10px;">合约</th>
      <th style="border: dashed 1px;padding: 5px 10px;width: 85px;">共识算法</th>
      <th style="border: dashed 1px;padding: 5px 10px;">技术支持方</th>
      <th style="border: dashed 1px;padding: 5px 10px;">特点</th>
      <th style="border: dashed 1px;padding: 5px 10px;">性能</th>
      <th style="border: dashed 1px;padding: 5px 10px;">开源许可</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Bitcoin</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C++</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">否</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">POW</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Core/Classic</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">公链/图灵不完备</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">7</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">MIT</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Elements</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C++</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">&nbsp;</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">&nbsp;</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Blockstream</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">侧链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">&nbsp;</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">MIT</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Ethereum</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Go等</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">POW</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">EthCore</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">公链/联盟+图灵完备</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">25</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">GPL</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Hydrachain</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Python</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">类PBFT</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">私链/联盟(原型)</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">GPL</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Factom</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Go</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">否</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">类POS</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">公证通</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">存在证明</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">27</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">MIT</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">BitShares</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C++</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">否</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">DPoS</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">联盟链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">100k</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">MIT</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Ripple</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C++</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">rpca</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Ripple</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">撮合交易/交易所</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">1000</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">MIT</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Stellar</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C++</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">SCP</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Jed Mccaleb</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">撮合交易/交易所</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">1000</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">ISC</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">OBC</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Go</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">PBFT</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">IBM</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">私链/联盟链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">2000+</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Apache</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Fabric</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Go</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">PBFT</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Linux基金会</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">私链/联盟链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">300-2000</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Apache</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Tendermint</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Go</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">PBFT</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">分区+公/私/联盟</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">10k</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Apache</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">OpenChain</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C#</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Coinprism</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">联盟链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Apache</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Lisk</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">JavaScript</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">DPoS</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">lisk.io</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">基于Crypti，分区+侧链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">MIT</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Asch</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">JavaScript</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">DPoS+BPFT</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">ASCH</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">基于Crypti，分区+侧链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">MIT</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">北航链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C++</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">CBFT(并行)</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">天德/蔡维德</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">私链/联盟链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">40K+</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">不开源</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">OnChain</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C#</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">dBFT(委托)</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">小蚁/达鸿飞</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">部分开源</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Qtum量子链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">C++</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">IPOS/PoT/BFT</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">BitSE/帅初</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">基于bc-0.13，增加合约支持</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">不开源</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">云象区块链</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">yBFT</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">杭州云象网络/黄步添</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">不开源</td>
    </tr>
    <tr>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">Hyperchain</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">是</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">杭州趣链科技/李伟</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;"></td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">10K</td>
      <td style="border: dashed 1px darkgray;padding: 5px 5px;">不开源</td>
    </tr>
  </tbody>
</table>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="工作量证明PoW共识算法" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:1em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
工作量证明，Proof of Work，通过计算来猜测一个数值（nonce），得以解决规定的 hash 问题（来源于 hashcash）。保证在一段时间内，系统中只能出现少数合法提案。
</div>
<div style="margin-top:.425em;">
同时，这些少量的合法提案会在网络中进行广播，收到的用户进行验证后会基于它认为的最长链上继续难题的计算。因此，系统中可能出现链的分叉（Fork），但最终会有一条链成为最长的链。
</div>
<div style="margin-top:.425em;">
比特币&莱特币&以太坊 采用的是PoW（Proof of Work）工作量证明，通过计算来猜测一个数值（nonce），得以解决规定的 hash 问题。
</div>
<div style="margin-top:.425em;">
挖矿的过程就是找到 x 使得以下等式成立：
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:1em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
SHA256(SHA256(version + prev_hash + merkle_root + ntime + nbits + x )) < TARGET
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;background-color:white;font-size:1.2em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;margin-top:1em;">
      <![CDATA[
<div>
上式的x的范围是0~2^32, TARGET可以根据当前难度求出的。由于hash的特性，找这样一个x只能暴力搜索。
</div>
<div style="margin-top:.425em;">
PoW共识算法的核心是所有节点通过暴力查找x，使得上面的等式成立。
</div>
<div style="margin-top:.425em;">
谁先找到谁就获得这一区块的写入权，并获得奖励，因此 pow 共识机制对所有节点都公平，谁的算力强谁就更有机会更高概率获得写入权。
</div>
<div style="margin-top:.425em;">
以太坊也是采用PoW工作量证明算法，具体实现算法叫（Ethash）。
</div>
<div style="margin-top:.425em;">
具体内容可以看官方 wiki：https://github.com/ethereum/wiki/wiki/Ethash
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="附比特币出块源码" id="sourceContent1"
                     titleStyle="padding-left:0;color:gray;background-color:white;font-size:1.2em;margin-top:1em;font-style: italic;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
// https://github.com/bitcoin/bitcoin/blob/master/src/rpc/mining.cpp
    static bool GenerateBlock (
      ChainstateManager& chainman, CBlock& block, uint64_t& max_tries, unsigned int& extra_nonce, uint256& block_hash) {
        block_hash.SetNull();

        {
            LOCK(cs_main);
            IncrementExtraNonce(&block, chainman.ActiveChain().Tip(), extra_nonce);
        }

        CChainParams chainparams(Params());

122:    while (max_tries > 0 && 
              block.nNonce < std::numeric_limits<uint32_t>::max() && 
              !CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus()) && 
              !ShutdownRequested()) {
123:        ++block.nNonce;
124:        --max_tries;
        }
        if (max_tries == 0 || ShutdownRequested()) {
            return false;
        }
        if (block.nNonce == std::numeric_limits<uint32_t>::max()) {
            return true;
        }

        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);
        if (!chainman.ProcessNewBlock(chainparams, shared_pblock, true, nullptr)) {
            throw JSONRPCError(RPC_INTERNAL_ERROR, "ProcessNewBlock, block not accepted");
        }

        block_hash = block.GetHash();
        return true;
    }

// https://github.com/bitcoin/bitcoin/blob/master/src/primitives/block.h
    class CBlockHeader {
      public:
          // header
          int32_t nVersion;   // block 的版本 version
          uint256 hashPrevBlock; // 上一个 block 的 hash 值: prev_hash
          uint256 hashMerkleRoot; // 需要写入的交易记录的 hash 树的值: merkle_root
          uint32_t nTime; // 更新时间: ntime
          uint32_t nBits; // 当前难度: nbits
          uint32_t nNonce;

          CBlockHeader() {
              SetNull();
          }

          SERIALIZE_METHODS(CBlockHeader, obj) { 
            READWRITE(obj.nVersion, obj.hashPrevBlock, obj.hashMerkleRoot, obj.nTime, obj.nBits, obj.nNonce); 
          }

          void SetNull() {
              nVersion = 0;
              hashPrevBlock.SetNull();
              hashMerkleRoot.SetNull();
              nTime = 0;
              nBits = 0;
              nNonce = 0;
          }

          bool IsNull() const {
              return (nBits == 0);
          }

          uint256 GetHash() const;

          int64_t GetBlockTime() const {
              return (int64_t)nTime;
          }
    };

]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="权益证明PoS共识算法" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:1em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
Peercoin & Nxt 采用的是PoS（Proof of Stake）权益证明，2013 年被提出，最早在 Peercoin 系统中被实现，类似现实生活中的股东机制，拥有股份越多的人越容易获取记账权。典型的过程是通过保证金（代币、资产、名声等具备价值属性的物品即可）来对赌一个合法的块成为新的区块，收益为抵押资本的利息和交易服务费。提供证明的保证金（例如通过转账货币记录）越多，则获得记账权的概率就越大。合法记账者可以获得收益。
</div>
<div style="margin-top:.425em;">
PoS 是试图解决在 PoW 中大量资源被浪费的缺点。恶意参与者将存在保证金被罚没的风险，即损失经济利益。
</div>
<div style="margin-top:.425em;">
一般的，对于 PoS 来说，需要掌握超过全网的资源，才有可能左右最终的结果。这个也很容易理解，三个人投票，前两人分别支持一方，这时候，第三方的投票将决定最终结果。
</div>
<div style="margin-top:.425em;">
点点币（Peercoin ）的权益证明机制结合了随机化与币龄的概念，未使用至少30天的币可以参与竞争下一区块，越久和越大的币集有更大的可能去签名下一区块。然而，一旦币的权益被用于签名一个区块，则币龄将清为零，这样必须等待至少30日才能签署另区块。同时，为防止非常老或非常大的权益控制区块链，寻找下一区块的最大概率在90天后达到最大值，这一过程保护了网络，并随着时间逐渐生成新的币而无需消耗大量的计算能力。点点币的开发者声称这将使得恶意攻击变得困难，因为没有中心化的挖矿池需求，而且购买半数以上的币的开销似乎超过获得51%的工作量证明的哈希计算能力。
</div>
<div style="margin-top:.425em;">
权益证明必须采用某种方法定义任意区块链中的下一合法区块，依据账户结余来选择将导致中心化，例如单个首富成员可能会拥有长久的优势。为此，人们还设计了其他不同的方法来选择下一合法区块。
</div>
<div style="margin-top:.425em;">
NXT币采用随机方法预测下一合法区块，使用公式查找与权益大小结合的最小哈希值。由于权益公开，每个节点都可以合理的准确度预计哪个账户有权建立区块。
</div>
   ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="授权股权证明机制DPoS共识算法代表" id="sourceContent1"
                     titleStyle="padding-left:0;color:green;font-size:1em;background-color:white;font-size:1.2em;margin-top:1em;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
      <![CDATA[
<div>
PoS 的改进算法，DPOS与POS原理相似。与POS的主要区别在于节点选举若干代理，由代理人验证和记账。
</div>
<div style="margin-top:.425em;">
PoW机制和PoS机制虽然都能有效地解决记账行为的一致性共识问题，但是现有的比特币PoW机制纯粹依赖算力，导致专业从事挖矿的矿工群体似乎已和比特币社区完全分隔，某些矿池的巨大算力俨然成为另一个中心，这与比特币的去中心化思想相冲突。PoS机制虽然考虑到了PoW的不足，但依据权益结余来选择，会导致首富账户的权力更大，有可能支配记账权。
</div>
<div style="margin-top:.425em;">
股份授权证明机制( Delegated Proof of Stake，DPoS)的出现正是基于解决PoW机制和PoS机制的这类不足。
</div>
<div style="margin-top:.425em;">
Bitshare & EOS 采用的是DPoS，比特股( Bitshare)是一类采用DPoS机制的密码货币，它期望通过引入一个技术民主层来减少中心化的负面影响。
</div>
<div style="margin-top:.425em;">
比特股引入了见证人这个概念，见证人可以生成区块，每一个持有比特股的人都可以投票选举见证人。得到总同意票数中的前N个(N通常定义为101)候选者可以当选为见证人，当选见证人的个数(N)需满足：至少一半的参与投票者相信N已经充分地去中心化。
</div>
<div style="margin-top:.425em;">
见证人的候选名单每个维护周期(1天)更新一次。见证人然后随机排列，每个见证人按序有2秒的权限时间生成区块，若见证人在给定的时间片不能生成区块，区块生成权限交给下一个时间片对应的见证人。DPoS的这种设计使得区块的生成更为快速，也更加节能。DPoS充分利用了持股人的投票，以公平民主的方式达成共识，他们投票选出的N个见证人，可以视为N个矿池，而这N个矿池彼此的权利是完全相等的。持股人可以随时通过投票更换这些见证人(矿池)，只要他们提供的算力不稳定，计算机宕机，或者试图利用手中的权力作恶。
</div>
<div style="margin-top:.425em;">
比特股还设计了另外一类竞选，代表竞选。选出的代表拥有提出改变网络参数的特权，包括交易费用、区块大小、见证人费用和区块区间。若大多数代表同意所提出的改变，持股人有两周的审查期，这期间可以罢免代表并废止所提出的改变。这一设计确保代表技术上没有直接修改参数的权利以及所有的网络参数的改变最终需得到持股人的同意。
</div>
   ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

</c:component>
