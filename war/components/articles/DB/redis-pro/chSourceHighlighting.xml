<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API的非关系型数据库。
]]>
  </c:abstract>

  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Redis支持的数据类型]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="String 字符串" id="sourceContent1" 
                     style="background-color:white;margin-top:0em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
set key value
</div>
<div style="margin-top:.325em;">
string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象 。
</div>
<div style="margin-top:.325em;">
string 类型是 Redis 最基本的数据类型，一个键最大能存储 512MB。
</pre>

<div style="margin-top:.325em;">
  <img width="520px" src="/images/redis/redis-sds.jpg" />
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="Hash（哈希）- 类似 HashMap()" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
格式: hmset name  key1 value1 key2 value2
</div>
<div style="margin-top:.325em;">
Redis hash 是一个键值 (key=>value) 对集合。
</div>
<div style="margin-top:.325em;">
Redis hash 是一个 <b>string 类型的 field 和 value 的映射表</b>，hash 特别适合用于存储对象。
</div>

<div style="margin-top:.325em;">
  <img width="520px" src="/images/redis/redis-hash.jpg" />
</div>

<h3 style="color:green;">底层实现</h3>
<div>
<b>Redis Hash 底层是一个 dict(字典) 结构, dict 结构内部包含两个 hashtable，通常情况下只有一个 hashtable 是有值的。</b>
</div>
<div style="margin-top:.325em;color:blue;">
dict 中 ht[2] 中有两个 hash 表, 我们第一次存储数据的数据时, ht[0] 会创建一个最小为 4 的 hash 表, 一旦 ht[0] 中的 size 和 used 相等, 则 dict 中会在 ht[1] 创建一个 size*2 大小的 hash 表, 此时并不会直接将 ht[0] 中的数据 copy 进 ht[1] 中, 执行的是渐进式 rehash, 即在以后的操作 (find, set, get等) 中慢慢的copy进去, 以后新添加的元素会添加进 ht[0], 因此在 ht[1] 被占满的时候定能确保 ht[0] 中所有的数据全部 copy 到 ht[1] 中.
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="List（列表）- 类似 ArrayList" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
Redis 列表是简单的字符串列表，<b>按照插入顺序排序</b>。你可以添加一个元素到列表的头部（左边）或者尾部（右边）
</div>
<div style="margin-top:.325em;">
格式: lpush  name  value  # 在 key 对应 list 的头部添加字符串元素
</div>
<div style="margin-top:.325em;">
格式: rpush  name  value  # 在 key 对应 list 的尾部添加字符串元素
</div>
<div style="margin-top:.325em;">
格式: lrem name  index    # key 对应 list 中删除 count 个和 value 相同的元素
</div>
<div style="margin-top:.325em;">
格式: llen name         # 返回 key 对应 list 的长度
</div>

<div style="margin-top:.325em;">
  <img width="520px" src="/images/redis/redis-list.jpg" />
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="Set（集合）类似 HashSet" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
<b>是字符串类型的无序集合，也不可重复</b>
</div>            
<div style="margin-top:.325em;">
格式: sadd  name  value
</div>
<div style="margin-top:.325em;">
Redis 的 Set 是 string 类型的无序集合。
</div>
<div style="margin-top:.325em;">
集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。
</div>

<div style="margin-top:.325em;">
  <img width="520px" src="/images/redis/redis-set.jpg" />
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="zset (有序集合)" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
<b>是string类型的有序集合，也不可重复</b>
</div>            
<div style="margin-top:.325em;">
格式: zadd  name score value
</div>
<div style="margin-top:.325em;">
Redis zset 和 set 一样也是 string 类型元素的集合, 且不允许重复的成员。
</div>
<div style="margin-top:.325em;">
不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。
</div>
<div style="margin-top:.325em;">
zset 的成员是唯一的,但分数(score)却可以重复。
</div>
<div style="margin-top:.325em;">
  <img width="520px" src="/images/redis/redis-zset.jpg" />
</div>
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Redis持久化]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div>
Redis 提供了两种持久化方式: RDB/默认 和 AOF, 内容是 redis 通讯协议(RESP )格式的命令文本存储。RESP 是 redis 客户端和服务端之前使用的一种通讯协议； RESP 的特点：实现简单、快速解析、可读性好
</div>
<div style="margin-top:1em;">
1、aof 文件比 rdb 更新频率高，优先使用 aof 还原数据。
</div>
<div style="margin-top:.325em;">
2、aof 比 rdb 更安全也更大
</div>
<div style="margin-top:.325em;">
3、rdb 性能比 aof 好
</div>
<div style="margin-top:.325em;">
4、如果两个都配了优先加载 AOF
</div>

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="RDB" id="sourceContent1" 
                     style="background-color:white;margin-top:0em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
rdb 是 Redis DataBase缩写, 功能核心函数 rdbSave(生成RDB文件) 和 rdbLoad（从文件加载内存）两个函数
</div>
<div style="margin-top:.325em;">
  <img width="350px" src="/images/redis/redis-rdb.png" />
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="AOF" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
rdb 是 Redis DataBase缩写, 功能核心函数 rdbSave(生成RDB文件) 和 rdbLoad（从文件加载内存）两个函数
</div>
<div style="margin-top:.325em;">

<img width="350px" src="/images/redis/redis-aop.png" />
</pre>

<div style="margin-top:.625em;">
每当执行服务器(定时)任务或者函数时 flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作
</div>
<div style="margin-top:.325em;">
aof 写入保存：
</div>
<div style="margin-top:.325em;">
WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件
</div>
<div style="margin-top:.325em;">
SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。
</div>
]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Redis 集群]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="主从复制" id="sourceContent1" 
                     style="background-color:white;margin-top:0em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div style="margin-top:.325em;">
  <img width="320px" src="/images/redis/redis-master-slave.png" />
</div>
<div style="margin-top:.325em;">
Redis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。<b>无法保证高可用, 没有解决 master 写的压力</b>
</div>
]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="哨兵" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div style="margin-top:.325em;">
  <img width="320px" src="/images/redis/redis-sentinel.png" />
</div>
<div style="margin-top:.325em;">
  Redis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。其中三个特性：
</div>

<ul style="margin-left: 1.5em;list-style-type: disc;margin-top: .3em;">
    <li>监控 (Monitoring): Sentinel  会不断地检查你的主服务器和从服务器是否运作正常。</li>
    <li>提醒 (Notification): 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</li>
    <li>自动故障迁移 (Automatic failover): 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。</li>
</ul>

<div style="margin-top:.325em;">
  <b>主从模式，切换需要时间丢数据, 没有解决 master 写的压力。</b>
</div>
]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Twemproxy" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
  Twemproxy 是一个 Twitter 开源的一个 redis 和 memcache 快速/轻量级代理服务器； Twemproxy 是一个快速的单线程代理程序，支持 Memcached ASCII 协议和 redis 协议。
</div>

<ul style="margin-left: 1.5em;list-style-type: disc;margin-top: .3em;">
    <li>多种 hash 算法：MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins </li>
    <li>支持失败节点自动删除</li>
    <li>后端 Sharding 分片逻辑对业务透明，业务方的读写方式和操作单个 Redis 一致</li>
</ul>

<div style="margin-top:.325em;">
  <b>增加了新的 proxy，需要维护其高可用。failover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预</b>
</div>
]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Redis Cluster - 直连型" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
  <img width="320px" src="/images/redis/redis-cluster.png" />
</div>

<div style="margin-top:.325em;">
  从 redis 3.0之后版本支持 redis-cluster 集群，Redis-Cluster 采用无中心结构，每个节点保存数据和整个集群状态, 每个节点都和其他所有节点连接。
</div>

<ul style="margin-left: 1.5em;list-style-type: disc;margin-top: .3em;">
    <li>无中心架构（不存在哪个节点影响性能瓶颈），少了 proxy 层。</li>
    <li>数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布。</li>
    <li>可扩展性，可线性扩展到 1000 个节点，节点可动态添加或删除。</li>
    <li>高可用性，部分节点不可用时，集群仍可用。通过增加 Slave 做备份数据副本</li>
    <li>实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave到 Master 的角色提升。</li>
</ul>

<div style="margin-top:.325em;">
  <b>资源隔离性较差，容易出现相互影响的情况。数据通过异步复制,不保证数据的强一致性</b>
</div>
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Redis-redis 底层数据结构]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div>
数据库键总是一个字符串对象（string object）;
</div>

<div style="margin-top:.325em;">
数据库的值则可以是<b>字符串对象、列表对象（list）、哈希对象（hash）、集合对象（set）、有序集合（sort set）对象</b>这五种对象中的其中一种。
</div>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="简单动态字符串（simple dynamic string）SDS" id="sourceContent1" 
                     style="background-color:white;margin-top:0em;"
                     titleStyle="padding-left:0;color:blue;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
  Redis 是一个开源的使用 ANSI C 语言编写的 key-value 数据库，我们可能会较为主观的认为 Redis 中的字符串就是采用了C语言中的传统字符串表示，但其实不然，Redis 没有直接使用C语言传统的字符串表示，而是自己构建了一种名为简单动态字符串（simple dynamic string SDS）的抽象类型，并将SDS用作 Redis  的默认字符串表示：
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="" title="SDS 的定义" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
/*  
 * 保存字符串对象的结构  
 */  
struct sdshdr {  
    // buf 中已占用空间的长度  
    int len;  
    // buf 中剩余可用空间的长度  
    int free;  
    // 数据空间  
    char buf[];  
};
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="SDS 与 C 字符串的区别 -（SDS O（1）/C 字符串 O(n)）" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

<table style="font-size:.85em;">
<tbody>

  <tr>
    <td style="padding:4px 8px;text-align:center;border:solid 1px goldenrod;">C 字符串</td>
    <td style="padding:4px 8px;text-align:center;border:solid 1px goldenrod;">SDS</td>
  </tr>
  <tr>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">获取字符串长度的复杂度为O（N)</td>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">获取字符串长度的复杂度为O(1)</td>
  </tr>
  <tr>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">API 是不安全的，可能会造成缓冲区溢出</td>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">API 是安全的，不会造成缓冲区溢出</td>
  </tr>
  <tr>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">修改字符串长度N次必然需要执行N次内存重分配</td>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">修改字符串长度N次最多执行N次内存重分配</td>
  </tr>
  <tr>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">只能保存文本数据</td>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">可以保存二进制数据和文本文数据</td>
  </tr>
  <tr>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">可以使用所有<String.h>库中的函数 </td>
    <td style="padding: 3px 6px;text-align:center;color:gray;;border:solid 1px goldenrod;">可以使用一部分<string.h>库中的函数</td>
  </tr>
</tbody>
</table>

          
        
                            
            

<h3 style="color:green;">更高效</h3>
<div>
  传统的C 字符串 使用长度为N+1 的字符串数组来表示长度为N 的字符串，所以为了获取一个长度为C字符串的长度，必须遍历整个字符串。和 C 字符串不同，SDS 的数据结构中，有专门用于保存字符串长度的变量，我们可以通过获取len 属性的值，直接知道字符串长度。
</div>

<h3 style="color:green;">杜绝缓冲区溢出</h3>
<div>
  C 字符串 不记录字符串长度，除了获取的时候复杂度高以外，还容易导致缓冲区溢出。
</div>

<div style="margin-top:.325em;">
  假设程序中有两个在内存中紧邻着的字符串 s1 和 s2，其中s1 保存了字符串“redis”，二s2 则保存了字符串“MongoDb”：
</div>
<div style="margin-top:.325em;">
  <img src="/images/redis/redis-sds1.png" />
</div>

<div style="margin-top:.325em;">
  如果我们现在将 s1 的内容修改为 redis cluster，但是又忘了重新为 s1 分配足够的空间，这时候就会出现以下问题：
</div>
<div style="margin-top:.325em;">
  <img src="/images/redis/redis-sds2.png" />
</div>
<div style="margin-top:.325em;">
  我们可以看到，原本 s2 中的内容已经被 s1 的内容给占领了，s2 现在为 cluster，而不是 “Mongodb”。
</div>

<div style="margin-top:1em;">
  <b>Redis 中SDS 的空间分配策略完全杜绝了发生缓冲区溢出的可能性:</b>
</div>
<div style="margin-top:.325em;">
  当我们需要对一个 SDS 进行修改的时候，redis 会在执行拼接操作之前，预先检查给定 SDS 空间是否足够，如果不够，会先拓展 SDS 的空间，然后再执行拼接操作。
</div>
<div style="margin-top:.325em;">
  <img width="850px" src="/images/redis/redis-sds3.png" />
</div>


<h3 style="color:green;">减少修改字符串时带来的内存重分配次数</h3>
<div>
  C语言字符串在进行字符串的扩充和收缩的时候，都会面临着内存空间的重新分配问题: 
</div>

<ul style="margin-left: 1.5em;list-style-type: disc;margin-top: .3em;">
    <li>字符串拼接会产生字符串的内存空间的扩充，在拼接的过程中，原来的字符串的大小很可能小于拼接后的字符串的大小，那么这样的话，就会导致一旦忘记申请分配空间，就会导致内存的溢出。</li>
    <li>字符串在进行收缩的时候，内存空间会相应的收缩，而如果在进行字符串的切割的时候，没有对内存的空间进行一个重新分配，那么这部分多出来的空间就成为了内存泄露。</li>
</ul>

<div style="margin-top:1em;">
  例如: <br />
  我们需要对下面的SDS进行拓展，则需要进行空间的拓展，这时候 redis 会将 SDS 的长度修改为13字节，并且将未使用空间同样修改为1字节 
</div>
<div style="margin-top:.325em;">
  <img width="850px" src="/images/redis/redis-sds3.png" />
</div>

<div style="margin-top:1em;">
  因为在上一次修改字符串的时候已经拓展了空间，再次进行修改字符串的时候会发现空间足够使用，因此无须进行空间拓展
</div>
<div style="margin-top:.325em;">
  <img width="850px" src="/images/redis/redis-sds5.png" />
</div>
<div style="margin-top:1em;">
  通过这种预分配策略，SDS将连续增长N次字符串所需的内存重分配次数从必定N次降低为最多N次
</div>



<h3 style="color:green;">惰性空间释放</h3>
<div>
  我们在观察 SDS 的结构的时候可以看到里面的 free 属性，是用于记录空余空间的。我们除了在拓展字符串的时候会使用到 free 来进行记录空余空间以外，在对字符串进行收缩的时候，我们也可以使用 free 属性来进行记录剩余空间，这样做的好处就是避免下次对字符串进行再次修改的时候，需要对字符串的空间进行拓展。
</div>
<div style="margin-top:.325em;">
  然而，我们并不是说不能释放 SDS 中空余的空间，SDS 提供了相应的API，让我们可以在有需要的时候，自行释放 SDS 的空余空间。
</div>
<div style="margin-top:.325em;">
  通过惰性空间释放，SDS 避免了缩短字符串时所需的内存重分配操作，并未将来可能有的增长操作提供了优化
</div>


<h3 style="color:green;">二进制安全</h3>
<div>
  C 字符串中的字符必须符合某种编码，并且除了字符串的末尾之外，字符串里面不能包含空字符，否则最先被程序读入的空字符将被误认为是字符串结尾，这些限制使得C字符串只能保存文本数据，而不能保存想图片，音频，视频，压缩文件这样的二进制数据。
</div>
<div style="margin-top:.325em;">
  但是在Redis中，不是靠空字符来判断字符串的结束的，而是通过len这个属性。那么，即便是中间出现了空字符对于SDS来说，读取该字符仍然是可以的。
</div>

]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>




</c:component>
