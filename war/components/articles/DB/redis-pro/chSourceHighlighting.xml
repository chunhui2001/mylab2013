<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API的非关系型数据库。
]]>
  </c:abstract>

  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Redis支持的数据类型]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="String 字符串" id="sourceContent1" 
                     style="background-color:white;margin-top:0em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
set key value
</div>
<div style="margin-top:.325em;">
string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象 。
</div>
<div style="margin-top:.325em;">
string 类型是 Redis 最基本的数据类型，一个键最大能存储 512MB。
</pre>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="Hash（哈希）- 类似 HashMap()" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
格式: hmset name  key1 value1 key2 value2
</div>
<div style="margin-top:.325em;">
Redis hash 是一个键值 (key=>value) 对集合。
</div>
<div style="margin-top:.325em;">
Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="List（列表）- 类似 ArrayList" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）
</div>
<div style="margin-top:.325em;">
格式: lpush  name  value  # 在 key 对应 list 的头部添加字符串元素
</div>
<div style="margin-top:.325em;">
格式: rpush  name  value  # 在 key 对应 list 的尾部添加字符串元素
</div>
<div style="margin-top:.325em;">
格式: lrem name  index    # key 对应 list 中删除 count 个和 value 相同的元素
</div>
<div style="margin-top:.325em;">
格式: llen name         # 返回 key 对应 list 的长度
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="Set（集合）类似 HashSet" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
格式: sadd  name  value
</div>
<div style="margin-top:.325em;">
Redis 的 Set 是 string 类型的无序集合。
</div>
<div style="margin-top:.325em;">
集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="zset (有序集合)" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
格式: zadd  name score value
</div>
<div style="margin-top:.325em;">
Redis zset 和 set 一样也是 string 类型元素的集合, 且不允许重复的成员。
</div>
<div style="margin-top:.325em;">
不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。
</div>
<div style="margin-top:.325em;">
zset 的成员是唯一的,但分数(score)却可以重复。
</div>
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Redis持久化]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div>
Redis 提供了两种持久化方式: RDB/默认 和 AOF, 内容是 redis 通讯协议(RESP )格式的命令文本存储。RESP 是 redis 客户端和服务端之前使用的一种通讯协议； RESP 的特点：实现简单、快速解析、可读性好
</div>
<div style="margin-top:1em;">
1、aof 文件比 rdb 更新频率高，优先使用 aof 还原数据。
</div>
<div style="margin-top:.325em;">
2、aof 比 rdb 更安全也更大
</div>
<div style="margin-top:.325em;">
3、rdb 性能比 aof 好
</div>
<div style="margin-top:.325em;">
4、如果两个都配了优先加载 AOF
</div>

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="RDB" id="sourceContent1" 
                     style="background-color:white;margin-top:0em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
rdb 是 Redis DataBase缩写, 功能核心函数 rdbSave(生成RDB文件) 和 rdbLoad（从文件加载内存）两个函数
</div>
<div style="margin-top:.325em;">
  <img width="350px" src="/images/redis/redis-rdb.png" />
</div>
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="AOF" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
rdb 是 Redis DataBase缩写, 功能核心函数 rdbSave(生成RDB文件) 和 rdbLoad（从文件加载内存）两个函数
</div>
<div style="margin-top:.325em;">

<img width="350px" src="/images/redis/redis-aop.png" />
</pre>

<div style="margin-top:.625em;">
每当执行服务器(定时)任务或者函数时 flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作
</div>
<div style="margin-top:.325em;">
aof 写入保存：
</div>
<div style="margin-top:.325em;">
WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件
</div>
<div style="margin-top:.325em;">
SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。
</div>
]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Redis 集群]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="主从复制" id="sourceContent1" 
                     style="background-color:white;margin-top:0em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div style="margin-top:.325em;">
  <img width="320px" src="/images/redis/redis-master-slave.png" />
</div>
<div style="margin-top:.325em;">
Redis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。<b>无法保证高可用, 没有解决 master 写的压力</b>
</div>
]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="哨兵" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div style="margin-top:.325em;">
  <img width="320px" src="/images/redis/redis-sentinel.png" />
</div>
<div style="margin-top:.325em;">
  Redis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。其中三个特性：
</div>

<ul style="margin-left: 1.5em;list-style-type: disc;margin-top: .3em;">
    <li>监控 (Monitoring): Sentinel  会不断地检查你的主服务器和从服务器是否运作正常。</li>
    <li>提醒 (Notification): 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</li>
    <li>自动故障迁移 (Automatic failover): 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。</li>
</ul>

<div style="margin-top:.325em;">
  <b>主从模式，切换需要时间丢数据, 没有解决 master 写的压力。</b>
</div>
]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Twemproxy" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
  Twemproxy 是一个 Twitter 开源的一个 redis 和 memcache 快速/轻量级代理服务器； Twemproxy 是一个快速的单线程代理程序，支持 Memcached ASCII 协议和 redis 协议。
</div>

<ul style="margin-left: 1.5em;list-style-type: disc;margin-top: .3em;">
    <li>多种 hash 算法：MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins </li>
    <li>支持失败节点自动删除</li>
    <li>后端 Sharding 分片逻辑对业务透明，业务方的读写方式和操作单个 Redis 一致</li>
</ul>

<div style="margin-top:.325em;">
  <b>增加了新的 proxy，需要维护其高可用。failover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预</b>
</div>
]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Redis Cluster - 直连型" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
  <img width="320px" src="/images/redis/redis-cluster.png" />
</div>

<div style="margin-top:.325em;">
  从 redis 3.0之后版本支持 redis-cluster 集群，Redis-Cluster 采用无中心结构，每个节点保存数据和整个集群状态, 每个节点都和其他所有节点连接。
</div>

<ul style="margin-left: 1.5em;list-style-type: disc;margin-top: .3em;">
    <li>无中心架构（不存在哪个节点影响性能瓶颈），少了 proxy 层。</li>
    <li>数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布。</li>
    <li>可扩展性，可线性扩展到 1000 个节点，节点可动态添加或删除。</li>
    <li>高可用性，部分节点不可用时，集群仍可用。通过增加 Slave 做备份数据副本</li>
    <li>实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave到 Master 的角色提升。</li>
</ul>

<div style="margin-top:.325em;">
  <b>资源隔离性较差，容易出现相互影响的情况。数据通过异步复制,不保证数据的强一致性</b>
</div>
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>



</c:component>
