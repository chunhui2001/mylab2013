<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[

]]>
  </c:abstract>





  <c:entry style="font-size:1.8em;color:#0134A0;font-weight:bold;font-style:oblique;">
    <c:title>Cassandra CQL Data Types</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
 
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
<table cellpadding="4" cellspacing="0" summary="" 
style="border: solid 3px #cecece;"
id="concept_ds_wbk_zdt_xj__table_cf5_bqt_xj" 
class="table" 
frame="border" border="1" rules="all">
<caption style="text-align: left;font-weight: bold;">
CQL Data Types
</caption>
<colgroup class="wh_not_expandable">
<col style="width:33.23262839879154%">
<col style="width:36.5558912386707%">
<col style="width:30.211480362537763%">
</colgroup>
<thead class="thead" style="text-align:left;">
      <tr>
       <th class="entry cellrowborder" style="vertical-align:top;" id="d5312e51">CQL Type</th>

       <th class="entry cellrowborder" style="vertical-align:top;" id="d5312e54">Constants</th>

       <th class="entry cellrowborder" style="vertical-align:top;" id="d5312e57">Description</th>

      </tr>

     </thead>
<tbody class="tbody">
      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">ascii</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">strings</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">US-ASCII character string</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">bigint</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">integers</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">64-bit signed long</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">blob</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">blobs</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">Arbitrary bytes (no validation), expressed as hexadecimal</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">boolean</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">booleans</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">true or false</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">counter</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">integers</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">Distributed counter value (64-bit long)</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">decimal</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">integers, floats</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">Variable-precision decimal</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">double</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">integers</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">64-bit IEEE-754 floating point</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">float</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">integers, floats</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">32-bit IEEE-754 floating point</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">inet</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">strings</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">IP address string in IPv4 or IPv6 format*</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">int</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">integers</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">32-bit signed integer</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">list</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">n/a</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">A collection of one or more ordered elements</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">map</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">n/a</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">A JSON-style array of literals: { literal : literal, literal : literal ... } </td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">set</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">n/a</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">A collection of one or more elements</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">text</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">strings</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">UTF-8 encoded string</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">timestamp</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">integers, strings</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">Date plus time, encoded as 8 bytes since epoch</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">uuid</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">uuids</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">A UUID in <a class="xref" href="http://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank">standard UUID</a> format</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">timeuuid</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">uuids</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">Type 1 UUID only (CQL 3)</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">varchar</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">strings</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">UTF-8 encoded string</td>

      </tr>

      <tr>
       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e51 ">varint</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e54 ">integers</td>

       <td class="entry cellrowborder" style="padding: 4px 8px;vertical-align:top;" headers="d5312e57 ">Arbitrary-precision integer</td>

      </tr>

     </tbody>
</table>

    ]]>
    </c:sourceContent>
 


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>




  <c:entry style="font-size:1.8em;color:#0134A0;font-weight:bold;font-style:oblique;">
    <c:title></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
 
    <c:sourceContent type="" title="Install Cassandra" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[


    ]]>
    </c:sourceContent>
 
    <c:sourceContent type="" title="Create Keyspace" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
> create keyspace awaken_store 
	with replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 3 };

    ]]>
    </c:sourceContent>
 
    <c:sourceContent type="" title="Create Table" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[

> use awaken_store;

> create table orders (
	order_id varchar primary key,
	created_time timestamp,
	amount decimal,
	status ascii,
	customer_id varchar,
	customer_name varchar,
	last_update_time timestamp
	
);

> describe orders;

    ]]>
    </c:sourceContent>

 
    <c:sourceContent type="" title="Generate Project" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[

$ mvn archetype:generate -DgroupId=com.cassandralab \
                         -DartifactId=cassandralab \
                         -DarchetypeArtifactId=maven-archetype-quickstart \
                         -DinteractiveMode=false
$ cd cassandralab
$ mvn clean assembly:assembly
$ java -cp target/cassandralab-jar-with-dependencies.jar com.cassandralab.App

    ]]>
    </c:sourceContent>
    
    <c:sourceContent type="" title="log4j.properties" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
# Root logger option
log4j.rootLogger=INFO, stdout

# Direct log messages to stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
    ]]>
    </c:sourceContent>
 
    <c:sourceContent type="" title="Update pom.xml" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
<project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.cassandralab</groupId>
  <artifactId>cassandralab</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>cassandralab</name>
  <url>http://maven.apache.org</url>

<properties>
    <java-version>1.8</java-version>
    </properties>


  <dependencies>
    
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>3.8.1</version>
        <scope>test</scope>
      </dependency>

      <dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
          <version>1.7.5</version>
      </dependency>
      <dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-log4j12</artifactId>
          <version>1.7.5</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/com.datastax.cassandra/cassandra-driver-core -->
      <dependency>
          <groupId>com.datastax.cassandra</groupId>
          <artifactId>cassandra-driver-core</artifactId>
          <version>3.2.0</version>
      </dependency>


      <dependency>
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
          <version>5.1.30</version>
      </dependency>

      <dependency>
          <groupId>com.google.code.gson</groupId>
          <artifactId>gson</artifactId>
          <version>2.7</version>
      </dependency>
      
      
  </dependencies>

<build>
    <finalName>cassandralab</finalName>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.3</version>
            <configuration>
                <source>${java-version}</source>
                <target>${java-version}</target>
            </configuration>
        </plugin>
        <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <configuration>
                <archive>
                    <manifest><mainClass>fully.qualified.MainClass</mainClass></manifest>
                </archive>
                <descriptorRefs>
                    <descriptorRef>jar-with-dependencies</descriptorRef>
                </descriptorRefs>
            </configuration>
        </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.6</version>
            <configuration>
                <archive>
                    <manifest><addClasspath>true</addClasspath></manifest>
                </archive>
            </configuration>
        </plugin>
    </plugins>


    <resources>
        <resource>
            <directory>src/main/resources</directory>
            <!--<targetPath>${project.build.directory}</targetPath>-->
            <includes>
                <include>log4j.properties</include>
            </includes>
        </resource>
    </resources>


</build>

</project>

    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>








  <c:entry style="font-size:1.8em;color:#0134A0;font-weight:bold;font-style:oblique;">
    <c:title>CassandraConnector.java</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
 
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
package com.cassandralab;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Session;

public class CassandraConnector {

    public static String getInsertStatement(String tableName, Set<String> fields) {

        String fieldStr = "";
        String fieldValue = "";

        for (String field : fields) {
            fieldStr += field + ", ";
            fieldValue += "?, ";
        }

        return ("insert into " + tableName + " (" + fieldStr + ") "
                + "values (" + fieldValue + "); ").replace(", )", ")");

    }

    private Cluster cluster;
    private Session session;

    public CassandraConnector(String host, String keySpace) {
        cluster = connect(host);
        session = cluster.connect(keySpace);
    }

    public static Cluster connect(String node) {
        return Cluster.builder().addContactPoint(node).build();
    }

    public void executeUpdate(String cql, Processer processer, Object[] parameterValues)
            throws SQLException {

        Object result = null;

        if (parameterValues != null) {

            PreparedStatement statement = session.prepare(cql);
            BoundStatement boundStatement = new BoundStatement(statement);


            if (parameterValues.length == 1) {
                boundStatement = boundStatement.bind(parameterValues[0]);
            }
            if (parameterValues.length == 2) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1]);
            }
            if (parameterValues.length == 3) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2]);
            }
            if (parameterValues.length == 4) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3]);
            }
            if (parameterValues.length == 5) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4]);
            }
            if (parameterValues.length == 6) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5]);
            }
            if (parameterValues.length == 7) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6]);
            }
            if (parameterValues.length == 8) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]);
            }
            if (parameterValues.length == 9) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8]);
            }
            if (parameterValues.length == 10) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9]);
            }
            if (parameterValues.length == 11) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10]);
            }
            if (parameterValues.length == 12) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11]);
            }
            if (parameterValues.length == 13) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12]);
            }
            if (parameterValues.length == 14) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13]);
            }
            if (parameterValues.length == 15) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14]);
            }
            if (parameterValues.length == 16) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]);
            }
            if (parameterValues.length == 17) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16]);
            }
            if (parameterValues.length == 18) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17]);
            }
            if (parameterValues.length == 19) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18]);
            }
            if (parameterValues.length == 20) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18],parameterValues[19]);
            }
            if (parameterValues.length == 21) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18],parameterValues[19],parameterValues[20]);
            }
            if (parameterValues.length == 22) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18],parameterValues[19],parameterValues[20],parameterValues[21]);
            }
            if (parameterValues.length == 23) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18],parameterValues[19],parameterValues[20],parameterValues[21],parameterValues[22]);
            }
            if (parameterValues.length == 24) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18],parameterValues[19],parameterValues[20],parameterValues[21],parameterValues[22],parameterValues[23]);
            }
            if (parameterValues.length == 25) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18],parameterValues[19],parameterValues[20],parameterValues[21],parameterValues[22],parameterValues[23]
                        ,parameterValues[24]);
            }
            if (parameterValues.length == 26) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18],parameterValues[19],parameterValues[20],parameterValues[21],parameterValues[22],parameterValues[23]
                        ,parameterValues[24],parameterValues[25]);
            }
            if (parameterValues.length == 27) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18],parameterValues[19],parameterValues[20],parameterValues[21],parameterValues[22],parameterValues[23]
                        ,parameterValues[24],parameterValues[25],parameterValues[26]);
            }
            if (parameterValues.length == 28) {
                boundStatement = boundStatement.bind(parameterValues[0],parameterValues[1],parameterValues[2],parameterValues[3],parameterValues[4],parameterValues[5],parameterValues[6],parameterValues[7]
                        ,parameterValues[8],parameterValues[9],parameterValues[10],parameterValues[11],parameterValues[12],parameterValues[13],parameterValues[14],parameterValues[15]
                        ,parameterValues[16],parameterValues[17],parameterValues[18],parameterValues[19],parameterValues[20],parameterValues[21],parameterValues[22],parameterValues[23]
                        ,parameterValues[24],parameterValues[25],parameterValues[26],parameterValues[27]);
            }

            result = session.execute(boundStatement);

        } else {
            result = session.execute(cql);
        }



        session.close();
        cluster.close();

    }


    public void main(String[] args) throws SQLException {

        CassandraConnector cassandraConnector = new CassandraConnector("127.0.0.1", "xaokon_store");

        Map<String, Object> orderData = new LinkedHashMap<>();


        String cqlStemt = getInsertStatement("cardproduct", orderData.keySet());

        System.out.println(cqlStemt + " cqlStemt");

//        String cqlStemt = "INSERT INTO cardproduct " +
//                        "(card_type_id,created_time,card_name,card_type,last_update_time,project_id,project_name,status,total_count) " +
//                        "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);";

        cassandraConnector.executeUpdate(cqlStemt, new Processer() {
            @Override
            public Map<String, Object> mapper(ResultSet data) throws SQLException {
                return null;
            }
        }, orderData.values().toArray());

    }

}


    ]]>
    </c:sourceContent>
 


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>







  <c:entry style="font-size:1.8em;color:#0134A0;font-weight:bold;font-style:oblique;">
    <c:title>MySqlConnector.java</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
 
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
public class MySqlConnector {

    public interface Processer {
        public Map<String, Object> mapper(ResultSet data) throws SQLException;
    }

    private static final String _driver_name = "com.mysql.jdbc.Driver";

    private Connection conn = null;
    private PreparedStatement pst = null;

    public MySqlConnector(String node, String username, String passwd) 
   			throws SQLException, ClassNotFoundException {
        Class.forName(_driver_name);
        conn = DriverManager.getConnection(node, username, passwd);
    }

    public static Collection<Map<String, Object>> executeQuery(
    		String sql, MySqlConnector mySqlConnector, Processer processer)
            throws SQLException, ClassNotFoundException {

        mySqlConnector.pst = mySqlConnector.conn.prepareStatement(sql);
        ResultSet ret =  mySqlConnector.pst.executeQuery();

        Collection<Map<String, Object>> collection = new LinkedList<Map<String, Object>>();

        while (ret.next()) {
            Map<String, Object> map = processer.execute(ret);
            collection.add(map);
        }

        ret.close();
        mySqlConnector.close();

        return collection;
    }


    public void close() {
        try {
            this.conn.close();
            this.pst.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public static void main(String[] args) throws SQLException, ClassNotFoundException {

        MySqlConnector mySqlConnector = new MySqlConnector(
        		"jdbc:mysql://127.0.0.1:3306/database name here?zeroDateTimeBehavior=convertToNull", "root", "Cc");

        Collection<Map<String, Object>> result = MySqlConnector.executeQuery(
                "SELECT brokerage_id,amount,create_time,coustomer_id,update_time,status FROM brokerage limit 1;", mySqlConnector, new Processer() {
            @Override
            public Map<String, Object> mapper(ResultSet ret) throws SQLException {

                DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                Long brokerage_id = ret.getLong(1);
                Double amount = ret.getDouble(2);
                String create_time = 
                		ret.getTimestamp(3) == null ? null : sdf.format(ret.getTimestamp(3));
                Long coustomer_id = ret.getLong(4);
                String update_time = 
                		ret.getTimestamp(5) == null ? null : sdf.format(ret.getTimestamp(5));
                short status = ret.getShort(6);

                Map<String, Object> map = new LinkedHashMap<>();

                map.put("brokerage_id",brokerage_id);
                map.put("amount",amount);
                map.put("create_time",create_time);
                map.put("coustomer_id",coustomer_id);
                map.put("update_time",update_time);
                map.put("status",status);

                return map;

            }
        });

        System.out.println(new com.google.gson.Gson().toJson(result));

    }

}

    ]]>
    </c:sourceContent>
 


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>




</c:component>
