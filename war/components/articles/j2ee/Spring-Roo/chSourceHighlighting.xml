<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract style="font-size:1em;line-height:1.6em;">
    <![CDATA[<div style="margin-bottom:.8em;">Spring 框架于 2002 年年底发布，目的在于简化 J2EE（目前是 JavaEE）开发。在过去 8 年中，Spring 成功完成了该使命，提供了 Java 社区框架或功能，比如 Spring Security、Spring MVC、事务管理、Spring 批处理和 Spring 集成，这都易于理解和使用。Spring 希望让 Java 开发人员的工作更轻松、更富成效。为此，Spring 创建了一个名为 Spring Roo 的开发工具。
        </div><div style="margin-bottom:.8em;">
        Spring Roo 是针对 Java 技术的一个可扩展的、基于文本的开源 RAD 工具。它是用于创建和管理基于 Spring 的应用程序的一个强大资源。这里是任务说明：
<b style="color:green;">Roo 的任务是从根本上可持续地改善 Java 开发人员的生产效率，而无损工程完整性和灵活性。</b>
这一要求转换为构建于 Java 技术之上的一种工具，可持续地增加项目整个生命周期的生产效率，且不限定开发人员使用某一特定方法。Spring Roo 使用流行、可靠和成熟的库，比如 Spring 框架、Java 持久化 API、Java Server Pages (JSP)、Spring Security、Spring Web Flow、Log4J 和 Maven。Roo 生成的应用程序使用 Bean Validation (JSR-303) 和 Dependency Injection (JSR-330) 这样的标准，且遵循最佳实践 SpringSource 认证的应用程序架构。
</div><div style="margin-bottom:.8em;">
使用 Spring Roo，您可以添加和配置 JPA、Spring MVC、Spring Security 等功能，使用 Log4j 进行日志记录，测试 JUnit 和 Selenium、Solr、JMS、电子邮件等框架，仅需在 Roo shell 上输入命令即可。使用 Roo 添加这些功能节省的时间提高了开发人员的生产效率。Roo 不能编写业务逻辑，但可以管理应用程序的基础结构或配置。
</div><div style="margin-bottom:.8em;">
Roo 是一个开发时间工具，这意味着应用程序在运行时独立于 Roo。由于 Roo 在运行时不存在，它没有任何性能或内存开销。这确保您不依赖于 Spring Roo，您只需几个按键即可随时从您的项目中删除 Roo。
</div><div style="margin-bottom:.8em;">
本文讨论如何使用 Roo shell 构建简单的 web 应用程序，并展示如何在 Windows 或 Ubuntu 机器上编译 Spring Roo 源代码。
</div>

<a target="_blank" style="font-size:1.2em;" href="http://projects.spring.io/spring-roo/#pre-requisites">http://projects.spring.io/spring-roo/#pre-requisites</a>]]>
  </c:abstract>
  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h2 style="font-size:1.8em;">开始使用 Roo shell</h2>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[通过加载 Roo shell 并使用命令与之交互，您可以管理和配置应用程序。Roo Shell 是一个制表完成的、上下文感知的、提供提示的命令 shell。您可以使用 hint 命令询问 Spring Roo 您的下一步逻辑操作。Roo 足够智能，可通过判定应用程序上下文建议下一步行动。例如，比方说您使用 entity 命令创建了一个实体。然后输入 hint 命令。Roo 会告诉您应当使用 field 将字段添加到您的实体。该特性减少了 Roo 的概念权重，使其成为一个优秀的学习工具。您可以跟随 Roo help 和 hint 命令创建完全的应用程序，无需参考文档。]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="先决条件" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      在开始使用 Roo 之前，确保您安装了：
      <ul style="padding-left:1.5em;list-style:disc;">
          <li> Java V6 JDK</li>
          <li> Apache Maven V2.0.9 或更高</li>
      </ul>
    ]]>
    </c:sourceContent>
    

    <c:sourceContent type="html" title="安装 Spring Roo" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      要安装独立的 Spring Roo：
      <ul style="padding-left:1.5em;list-style:disc;">
          <li>您可以下载 Roo 独立命令行 shell 或使用内置的 Roo SpringSource Tool Suite (STS) 插件。我建议两者都下载并一起使用，因为 STS 为基于 Spring 的应用程序通过 Eclipse 提供许多额外功能。</li>
          <li>解压 Spring Roo 到选定位置。</li>
          <li>设置环境变量：sudo ln -s ~/spring-roo-1.x.x/bin/roo.sh /usr/bin/roo</li>
      </ul>

    ]]>
    </c:sourceContent>
    

    <c:sourceContent type="html" title="构建应用程序" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      为向您展示 Roo 的强大功能，让我们创建一个简单的企业会议应用程序。一个会议应用程序有两个实体：Speaker 和 Talk。一个 Speaker 可以提供一次或多次讲话，且 Talk 将仅由一个发言人提供。简单的类图如下图所示: 
      <br />
      <br />

      <img src="https://www.ibm.com/developerworks/cn/opensource/os-springroo1/fig01.gif" style="max-width:100%;" />

      <br />
      <br />
      创建应用程序：<br />
      <ul style="padding-left:1.5em;list-style:disc;">
          <li>打开操作系统命令行 shell: <b>$ mkdir conference && cd conference && roo </b></li>
          <li>该命令将启动 Roo shell，如清单 1 所示。</li>
          <li>
            <pre style="line-height:1.1em;color:green;">
    ____  ____  ____
   / __ \/ __ \/ __ \
  / /_/ / / / / / / /
 / _, _/ /_/ / /_/ /
/_/ |_|\____/\____/       1.1.B.RELEASE [rev 793f2b0]
<br />
Welcome to Spring Roo. For assistance press TAB or type "hint" then hit ENTER.
roo>
            </pre>
          </li>
      </ul>
      既然我们在 Roo shell 内部，我们将使用 Roo 的 hint 命令来引导接下来的步骤。hint 建议使用 project 创建一个新的基于 Maven 的 Spring 项目, 如下:
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
Welcome to Spring Roo. For assistance press TAB or type "hint" then hit ENTER.
roo> hint
Welcome to Roo! We hope you enjoy your stay!
Before you can use many features of Roo, you need to start a new project.

To do this, type ’project’ (without the quotes) and then hit TAB.

Enter a --topLevelPackage like ’com.mycompany.projectname’ (no quotes).
When you're finished completing your --topLevelPackage, press ENTER.
Your new project will then be created in the current working directory.

Note that Roo frequently allows the use of TAB, so press TAB regularly.
Once your project is created, type ’hint’ and ENTER for the next suggestion.
You're also welcome to visit http://forum.springframework.org`for Roo help.
roo></pre>
      <div>正如 hint 命令所建议的，我们将使用 project 命令创建一个项目。该命令有一个必要属性 topLevelPackage，用于指定根程序包的名称。除了必要属性之外，我们将使用两个可选属性：java（指定 Java 版本）和 projectName（指定项目名称）。输入以下内容：</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
project --topLevelPackage com.dw.roo.conference --java 6 --projectName conference</pre>

      <div>该命令将创建一个 Maven V2 管理的基于 Spring 的项目，如以下输出所示：</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
Created C:\Users\xebia\demo\conference\pom.xml
Created SRC_MAIN_JAVA
Created SRC_MAIN_RESOURCES
Created SRC_TEST_JAVA
Created SRC_TEST_RESOURCES
Created SRC_MAIN_WEBAPP
Created SRC_MAIN_RESOURCES\META-INF\spring
Created SRC_MAIN_RESOURCES\META-INF\spring\applicationContext.xml
Created SRC_MAIN_RESOURCES\log4j.properties</pre>

      <div>再次输入 hint 向 Roo 询问下一步行动。这次它建议建立持久化机制。在 shell 上输入 persistence setup 并按下 Tab 三次。您会获得 --provider 选项。按下 H 然后按下 Tab 完成 “HIBERNATE”。在提供者之后，按下 tab 选择数据库，您会看到有大量选项。因为我们使用 Hibernate 作为我们的提供者，我们不能选择非关系型数据库，比如 Google App Engine。现在，我打算使用 HYPERSONIC_IN_MEMORY 数据库</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
persistence setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY</pre>

      <div>还有其他可选属性，比如用户名和密码，这次我们不需要这些。<br />
现在我们已经建立了持久化机制，我们将再次使用 hint 命令。这次我们被告知要使用 entity 命令创建实体。Entity 用于创建实际域对象，且有一个必要属性 class，用于指定实体的名称。除了必需的 --class 属性，我们还将使用 --testAutomatically 属性，该属性为域对象创建集成测试。让我们创建两个实体：Speaker 和 Talk。</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
entity --class ~.domain.Speaker –testAutomatically  
entity --class ~.domain.Talk --testAutomatically</pre>

      <div>我使用了 ~ 作为项目顶级程序包的占位符。<br />
Entity 将创建一个灵活的、特性丰富的 JPA 实体。所创建的实体将有 JPA @Entity，带有 ID、版本、EntityManager 和无参数的构造函数。所生成的实体将拥有 persist、merge、remove、flush、count、find 和 findById 等方法。如果看一下该命令的输出，您会注意到该命令除了创建 Java 文件（为 Speaker 和 Talk），还创建了以 *Roo_*.aj 结尾的 AspectJ 文件。这些 *Roo_*.aj 称为 Intertype Declaration (ITD)、Mixins 或 Introductions。Roo 将 ITD 作为一个代码生成的工件。ITDs 允许 Roo 在一个单独的编译单元中生成代码，但 ITDs 在编译时被合并成同一个编译类。AspectJ intertype 声明用于自动生成 ID 和版本字段，以及域类中持久化字段的 getters 和 setters。<br />
再次使用 hint 提供建议，根据建议使用 field 命令将字段添加到实体。让我们给 Speaker 实体添加一些字段：</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
field string --fieldName firstname --class ~.domain.Speaker --notNull 
field string --fieldName lastname --notNull 
field string --fieldName email --unique --notNull 
field string --fieldName organization 
field date --fieldName birthdate --type java.util.Date --past --notNull 
field number --type java.lang.Long --fieldName age --min 25 --max 60</pre>

      <div>--class 选项允许我们指定向哪个类添加字段。<br />
field 命令可用于指定特定于 JavaBean 验证的注释，含有 --max 和 --min 等选项。它还可用于指定特定于 JPA 的注释，含有 --fetch、--column 和 --unique 等选项。对于日期字段，您还可以指定日期应当是过去还是将来，正如上面使用的。使用 field，您无需记住这些注释。<br />
现在让我们向 Talk 实体添加一些字段：</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
field string --fieldName title --class ~.domain.Talk --notNull 
field string --fieldName description --notNull --sizeMax 4000</pre>

      <div>目前为止，我们创建了实体并向其添加了字段，但是我们没有指定它们之间的关系。Speaker 与 Talk 之间的关系是 ONE_TO_MANY（例如，一个发言人可发表多次讲话）。这通过 field 完成，如下所示：</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
field set --fieldName talks --element ~.domain.Talk --class ~.domain.Speaker --cardinality ONE_TO_MANY  
field reference --fieldName speaker --type ~.domain.Speaker --class ~.domain.Talk –notNull</pre>

      <div>现在我们想为会议应用程序 <a target="_blank" href="https://en.wikipedia.org/wiki/Scaffold_(programming)">scaffold</a> 搭建一个 web 层，可通过 controller 命令完成。生成控制器和所有相关 web 工件最方便的方式是使用 controller all。</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
controller all --package ~.web</pre>

      <div>第一次使用控制器命令还会添加额外的依赖项到您的项目中，比如 Spring MVC 和 Tiles。这可能需要一些时间来运行，因为它需要下载所有依赖项（如果它们不存在于您的 Maven 存储库中）。该命令还展示 Roo 的功能之一：只有在需要依赖项时才予以添加。<br />
下一步，我们将使用 logging 命令建立 log4j。</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
logging setup --level INFO --package ALL_SPRING</pre>

      <div>退出 Roo shell 之前应做的最后一件事是，当我们使用 entity 命令指定了 --testAutomatically 时，运行生成的集成测试。要从 shell 中运行测试，输入 perform tests。<br />
Roo 将调用委托给 Maven 来运行测试，因此 perform tests 等同于 mvn test 命令。输入 q 或 quit 退出 shell。
这些命令将创建一个功能齐全的会议应用程序。接下来我们将运行这个应用程序。<br />
要运行该应用程序，输入 mvn tomcat:run，这将启动 jetty 服务器。
打开 web 浏览器并转至 http://localhost:8080/conference/ 

<br />
<br />
您可以单击 Create new Speaker 创建一个会议发言人。您还可以单击 List all Speakers 来查看、编辑和删除用户。以同样的方式，您可以创建一个 Talk，但是必须在创建 Speaker 之后。<br />
这是一个简单的应用程序，但是它展示如何在数分钟内从头轻松创建一个新的基于 Spring 的 web 应用程序。在本系列的第 2 部分，我将向您展示如何使用不同的 Roo 功能和附加组件构建应用程序。<br />
现在我们已经创建了一个简单的应用程序，我将向您展示如何在 Windows 和 Ubuntu 上编译 Spring Roo 源代码。</div>


    ]]>

    </c:sourceContent>




    <c:sourceContent type="html" title="script 重新构建" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

      <div>script 会执行源文件中的所有命令，您会注意到 Roo 创建了一个名为 log.roo 的文件，它包含了 Roo shell 中执行的所有命令。我们将执行 log.roo 文件并重建应用程序。</div><br />
      <ul style="padding-left:2.5em;list-style-type:decimal;">
        <li>此文件包含在代码样例中。可以将其重命名为 conference.roo。</li>
        <li>创建一个名为 conference 的目录并把 conference.roo 拷贝进去。</li>
        <li>打开操作系统命令行 shell。</li>
        <li>进入刚创建的 conference 目录。</li>
        <li>执行 script --file conference.roo 命令。</li>
      </ul><br />
      <div>如果所需要的 JAR 在 Maven 存储库，script 将会在几秒钟之内重建应用程序。否则，将会花费更长的时间，因为它要下载所有 JAR。script 命令很有用，因为可以将它用作一个模板来创建 Spring 托管的项目。<br /><br />
在进入下一步之前，将 Maven 项目导入 STS 中 。STS 预装捆绑在 <a target="_blank" href="http://m2eclipse.sonatype.org/">Maven Eclipse</a> 插件 中。您可以通过选择 <b>File > Import > Maven > Existing Maven Projects</b> 导入此项目。我们将在此后编写自定义代码导入 STS 项目。<br /><br />
目前所创建的 web 应用程序已经可以运行，我们可以通过创建、读取、更新和删除 Speaker 和 Talk 实体来手工测试。但如果这些过程能自动化不是更好么？</div>
    ]]>

    </c:sourceContent>


    <c:sourceContent type="html" title="自动化 web 测试" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

      <div>这里是 Spring Roo 的另一个属性：Selenium 测试支持。Selenium 是一组功能强大的工具，它支持基于 web 应用程序测试自动化的快速开发。要将 Selenium 测试支持添加到您的应用程序中，执行以下命令：</div>
      <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
selenium test --controller ~.web.SpeakerController
selenium test --controller ~.web.TalkController</pre>

      <div>selenium test 命令将会创建 Speaker 和 Talk 控制器的 Selenium 支持。此命令有个属性 controller 用来指定控制器的名称，以创建 Selenium 测试。此命令还有两个可选属性 name 和 serverUrl 用来指定 Selenium 测试的名称和 web 应用程序可用的服务器。当您执行 selenium test 命令时，Spring Roo 还会添加 Selenium Maven 插件。
<br />
<br />
至此，我们创建了控制器的 Selenium 测试用例，但在运行之前，我们要先修复 Spring Roo 所创建的 Selenium 测试套件中的一个小缺陷。我们在 Speaker 实体中加入一个约束， 年龄应在 25 到 60 之间，但测试套件对此约束不予考虑。它使用了年龄 1 岁，测试失败。
<br />我们需要修改一个名为 test-speaker.xhtml 的文件，并做相应的更新:</div>

<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">test-speaker.xhtml</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
&lt;tr&gt;
  &lt;td&gt;type&lt;/td&gt;
  &lt;td&gt;_age_id&lt;/td&gt;
  &lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;</pre>
<h3><b>TO</b></h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
&lt;tr&gt;
  &lt;td&gt;type&lt;/td&gt;
  &lt;td&gt;_age_id&lt;/td&gt;
  &lt;td&gt;<b>26</b>&lt;/td&gt;
&lt;/tr&gt;</pre>

<div>此缺陷将会在 Spring Roo 的后续版本中修复。<br />
<br />
要运行 Selenium 测试案例，需要启动 Tomcat 服务器。可以通过使用 Maven 命令 mvn tomcat:run 来启动。默认情况下，所有使用 Roo 创建的 web 应用程序都有用于 Tomcat 和 Jetty web 服务器的 Maven 插件。要运行 selenium test，执行 Maven 命令 mvn selenium:selenese。<br />
<br />
这将启动 Firefox 浏览器运行 Selenium 测试案例。在测试执行时，您会看到如下所示的界面: 
<br />
<br />
<img style="max-width:100%;" src="https://www.ibm.com/developerworks/cn/opensource/os-springroo2/figure01.jpg" />
<br />
<br />
现在，所有人可以访问应用程序并在 Speaker 和 Talk 上执行创建、更新和删除操作。在实时应用程序中，还有安全问题，即谁能做哪些操作。</div>
    ]]>

    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h2 style="font-size:1.8em;">保证 web 应用程序的安全</h2>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[Roo 使用 Spring Security 向应用程序添加安全性能。
        <a target="_blank" href="http://static.springsource.org/spring-security/site/index.html">Spring Security</a> 是功能强大的并高度可定制的认证和访问控制框架。这是保证基于 Spring 的应用程序安全的实际标准。]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="添加 Spring Security" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      <div>要添加 Spring Security，输入以下命令：<b>security setup</b>
        <br />
        <br />
此命令将会添加所有所需的 Spring Security JAR 并设置应用程序的基本安全。此命令还会创建其他文件，其中重要的是 <b>applicationContext-security.xml</b>，它包含所有与安全相关的 bean 定义。applicationContext-security.xml 内容看上去像清单 2 。我已经用点号代替了密码，使得可读性更好。</div>


<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">applicationContext-security.xml</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
&lt;beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans \
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security \
http://www.springframework.org/schema/security/spring-security-3.0.xsd"&gt;

  &lt;!-- HTTP security configurations --&gt;
    &lt;http auto-config="true" use-expressions="true"&gt;
      &lt;form-login login-processing-url="/resources/j_spring_security_check" \
login-page="/login" authentication-failure-url="/login?login_error=t"/&gt;
        &lt;logout logout-url="/resources/j_spring_security_logout"/&gt;
        
        &lt;!-- Configure these elements to secure URIs in your application --&gt;
        &lt;intercept-url pattern="/choices/**" access="hasRole('ROLE_ADMIN')"/&gt;
        &lt;intercept-url pattern="/member/**" access="isAuthenticated()" /&gt;
        &lt;intercept-url pattern="/resources/**" access="permitAll" /&gt;
        &lt;intercept-url pattern="/**" access="permitAll" /&gt;
    &lt;/http&gt;

  &lt;!-- Configure Authentication mechanism --&gt;
    &lt;authentication-manager alias="authenticationManager"&gt;
      &lt;!-- SHA-256 values can be produced using \
'echo -n your_desired_password | sha256sum' \
(using normal *nix environments) --&gt;
      &lt;authentication-provider&gt;
        &lt;password-encoder hash="sha-256"/&gt;
          &lt;user-service&gt;
              &lt;user name="admin" password="..." authorities="ROLE_ADMIN"/&gt;
            &lt;user name="user" password="..." authorities="ROLE_USER"/&gt;
        &lt;/user-service&gt;
      &lt;/authentication-provider&gt;
  &lt;/authentication-manager&gt;

&lt;/beans:beans&gt;</pre>

<div>由 Roo 配置的安全是通用的，我们的应用程序不需要关注。请记住 Roo 能够帮助您快速安装或配置，但定制最终产品是开发人员的责任。本例中，Roo 只提供了 Spring Security 模板，按照需求定制是我们的责任。</div>
    ]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="自定义 Spring Security" id="sourceContent1" 
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      <div>在我们的应用程序中，所有人都能创建 Speaker，但只有 Speaker 能创建 Talk。我们需要如下修改 applicationContext-security.xml。清单 3 只显示了需要修改的 XML 的一部分。</div>


<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">修改 applicationContext-security.xml</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
&lt;http auto-config="true" use-expressions="true"&gt;
      &lt;form-login login-processing-url="/resources/j_spring_security_check" \
login-page="/login" authentication-failure-url="/login?login_error=t"/&gt;
        &lt;logout logout-url="/resources/j_spring_security_logout"/&gt;
        
        &lt;!-- Configure these elements to secure URIs in your application --&gt;
        &lt;intercept-url pattern="/talks/**" access="hasRole('ROLE_USER')"/&gt;
        &lt;intercept-url pattern="/speakers/**" access="permitAll" /&gt;
        &lt;intercept-url pattern="/resources/**" access="permitAll" /&gt;
        &lt;intercept-url pattern="/**" access="permitAll" /&gt;
&lt;/http&gt;</pre>

<div>我更新了 intercept-url，这样只有角色为 user 的用户才能创建 Talk，并且所有用户都可以将自己注册为 Speaker。
  <br />
  <br />
如上 Roo 生成的 Spring Security 在 <user-service> 标记下使用了 内存认证 提供程序。由于我们的应用程序管理 Speaker 实体，我们应当建立一个使用 Speaker 数据的自定义认证提供程序。对于认证，我们将使用 Speaker email 作为用户名，并为 Speaker 实体添加一个密码字段，它也将用作认证密码。<br /><br />
我将再次使用 Roo shell 来将密码字段添加到 Speaker 实体：</div>

<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
field string --class ~.domain.Speaker --fieldName password --notNull --sizeMin 6 –sizeMax 10</pre>

<div>我还加入了限制条件，密码不能为空，长度在 6 至 10 个字符之间。<br /><br />
由于我们使用 email 和密码作为认证参数，我们找一个 Speaker 的 email 和密码。Spring Roo 提供了一个功能为您的应用程序创建查找程序，使用 <b>finder add</b> 命令：</div>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
finder add --finderName findSpeakersByEmailAndPasswordEquals --class ~.domain.Speaker</pre>

<div>您可以使用 <b>finder list</b> 命令找到某个实体的所有查找程序。<b>finder add</b> 在 <b>Speaker_Roo_Finder.aj</b> 文件写入查找程序代码，并写入一些视图相关的文件。这让您能够从 GUI 查找所有演讲者。</div>
    ]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="写入自定义 AuthenticationProvider" id="sourceContent1" 
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      <div>我们通过扩展一个名为 AbstractUserDetailsAuthenticationProvider 的类来写入自定义 Authentication 提供程序，它使用用户名/密码进行认证。扩展 AbstractUserDetailsAuthenticationProvider 的类需要提供两个具体方法的实现：additionalAuthenticationChecks 和 retrieveUser。提供程序调用 retrieveUser 方法使用输入的 email 和密码来认证 Speaker。数据库查找 Speaker 是使用我们之前创建的查找程序。如果找到了 Speaker，会将 GrantedAuthority ROLE_USER 分配给 Speaker。如果登录成功，此方法最终会返回一个弹出的 UserDetails 对象，否则会抛出一个 BadCredentialsException 及相关信息（见清单 4）。
</div>

<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">com.dw.roo.conference.security.ConferenceAuthenticationProvider.java</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
package com.dw.roo.conference.security;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityNotFoundException;
import javax.persistence.NonUniqueResultException;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.\
dao.AbstractUserDetailsAuthenticationProvider;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.GrantedAuthorityImpl;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.util.StringUtils;

import com.dw.roo.conference.domain.Speaker;

public class ConferenceAuthenticationProvider extends \
AbstractUserDetailsAuthenticationProvider {

    @Override
    protected void additionalAuthenticationChecks(UserDetails userDetails, \
UsernamePasswordAuthenticationToken authentication)
            throws AuthenticationException {
        // TODO Auto-generated method stub

    }

    @Override
    protected UserDetails retrieveUser(String username,
UsernamePasswordAuthenticationToken \
authentication) throws AuthenticationException {
        String password = (String) authentication.getCredentials();
        if (!StringUtils.hasText(password)) {
            throw new BadCredentialsException("Please enter password");
        }
        List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();
        try {
            Speaker speaker = Speaker.findSpeakersByEmailAndPasswordEquals(username, \
password).getSingleResult();
            authorities.add(new GrantedAuthorityImpl("ROLE_USER"));
        } catch (EmptyResultDataAccessException e) {
            throw new BadCredentialsException("Invalid username or password");
        } catch (EntityNotFoundException e) {
            throw new BadCredentialsException("Invalid user");
        } catch (NonUniqueResultException e) {
            throw new BadCredentialsException("Non-unique user, contact administrator");
        }
        return new User(username, password, true, // enabled
                true, // account not expired
                true, // credentials not expired
                true, // account not locked
                authorities);
    }
}</pre>

<div>在 applicationContext-security.xml 中，我们要定义 conferenceAuthenticationProvider bean 并用我们的 conferenceAuthenticationProvider 代替 Roo 创建的内存认证提供程序，如清单 5 所示。</div>
<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">conferenceAuthenticationProvider</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
&lt;beans:bean name="conferenceAuthenticationProvider"
class="com.dw.roo.conference.security.ConferenceAuthenticationProvider"&gt;
&lt;/beans:bean&gt;

&lt;!-- Configure Authentication mechanism --&gt;
&lt;authentication-manager alias="authenticationManager"&gt;
  &lt;authentication-provider ref="conferenceAuthenticationProvider"/&gt;
&lt;/authentication-manager&gt;</pre>

<div>现在如果您启动了服务器并试图创建 Talk，您会看到一个登录屏幕，需要在此处输入您创建的 Speaker 的 email 和密码。构建自定义认证提供程序的目的不是构建一个理想的认证提供程序，而是告诉您 Roo 做了哪些，您自己需要做哪些。</div>
    ]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="Email 通知" id="sourceContent1" 
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>在我们的应用程序中，Speaker 在创建 Talk 时应该能收到 email，让我们在应用程序中加入 email 支持。我们将使用 Gmail 作为 SMTP 服务器，以便把精力集中在使用 Roo 发送 email。向应用程序中加入 email 支持要使用以下命令：</div>

<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
email sender setup --hostServer smtp.gmail.com --username \
&lt;Your email address&gt; --password &lt;Your email password&gt; --port 587 --protocol SMTP</pre>

<div>email 发送程序命令会在您的项目中安装一个 Spring JavaMailSender。您可以在 email.properties 文件中修改 email 相关的属性。
创建 Talk 后，我们要发送一封 email。需要在 TalkController 中加入 email 字段。要添加 email 字段，输入：</div>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
field email template --class ~.web.TalkController</pre>

<div>这会将 MailSender 模板和 sendMessage 方法加入 TalkController。当 Talk 存在于数据库之后，我们需要触发 sendMessage 方法。由于 TalkController 的所有代码都在 TalkController_Roo_Controller.aj 文件中，完成该任务的最简单的方法是创建一个从 .aj 文件到 TalkController 类的 encodeUrlPathSegment 方法，并在 talk.persist() 行之后添加一个对 sendMessage 方法的调用，如清单 6 所示。</div>



<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">创建一个从 .aj 文件到 TalkController 的 encodeUrlPathSegment 方法</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
public class TalkController {

  @Autowired
  private transient MailSender mailTemplate;

  public void sendMessage(String mailFrom, String subject, String mailTo,
      String message) {
    org.springframework.mail.SimpleMailMessage \
simpleMailMessage = new org.springframework.mail.SimpleMailMessage();
    simpleMailMessage.setFrom(mailFrom);
    simpleMailMessage.setSubject(subject);
    simpleMailMessage.setTo(mailTo);
    simpleMailMessage.setText(message);
    mailTemplate.send(simpleMailMessage);
  }

  @RequestMapping(method = RequestMethod.POST)
  public String create(@Valid Talk talk, BindingResult result, Model model,
      HttpServletRequest request) {
    if (result.hasErrors()) {
      model.addAttribute("talk", talk);
      return "talks/create";
    }
    talk.persist();
    sendMessage("spring.roo.playground@gmail.com", "Your talk is created",
        talk.getSpeaker().getEmail(), \
"Congrats your talk is created");
    return "redirect:/talks/"
        + encodeUrlPathSegment(talk.getId().toString(), request);
  }

  private String encodeUrlPathSegment(String pathSegment,
      HttpServletRequest request) {
    String enc = request.getCharacterEncoding();
    if (enc == null) {
      enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
    }
    try {
      pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
    } catch (UnsupportedEncodingException uee) {
    }
    return pathSegment;
  }
}</pre>
<div>至此，Speaker 将会在创建 Talk 后在专有帐户中收到 email。</div>
    ]]>
    </c:sourceContent>




    <c:sourceContent type="html" title="国际化支持" id="sourceContent1" 
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>我们构建的是基于 Internet 的 web 应用程序，因此，支持不同语言让来自不同地方的用户能够使用我们的应用程序就非常重要。Spring Roo 通过使用 web mvc install language 命令来添加国际化支持，它将会在您的应用程序中添加新的语言。例如，西班牙语和意大利语的命令是：</div>

<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
web mvc install language --code es 
web mvc install language --code it</pre>

<div>Roo 目前支持六种语言，您可以根据选择编写其他的语言插件。但应用程序运行时，会显示两个国旗（意大利和西班牙），还有英国国旗。如果单击其中任意一个国旗，您会看到 web 应用程序变成对应的语言。</div>
    ]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="社会化 web 应用程序" id="sourceContent1" 
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>这是社会化媒体的时代，现在的应用程序中通常会添加社会化特性。添加 Talk 视频会很有意义。Roo 提供了嵌入视频上传到 YouTube、Vimeo、Viddler 和 Google Video 等等的支持。要嵌入视频，使用如下命令：</div>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
web mvc embed video --provider VIMEO --videoId 16069687</pre>

<div>如果您启动服务器并在浏览器中打开应用程序，您将能看到以上嵌入的视频。同样，您可以添加 YouTube 或 Viddler 视频。
Roo 还提供了一个选项，可以在您的应用程序中嵌入 Twitter 消息、文档、股票行情，地图，照片和视频流。各种命令如清单 7。</div>

<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">清单 7. 嵌入命令</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
web mvc embed document 
web mvc embed finances 
web mvc embed map
web mvc embed photos 
web mvc embed stream video 
web mvc embed twitter
web mvc embed video</pre>
    ]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="数据库反向工程" id="sourceContent1" 
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>数据库反向工程（DBRE）能让您从内部检查一个现有的数据库并将其公开为应用程序。为了让 DBRE 能用起来，我将用现有的反馈模式创建一个反馈应用程序。我将用 MySQL 数据库。<br /><br />
在启动 Roo 之前，我们将在 MySQL 安装程序中创建一个模式。运行清单 8 中的 SQL 脚本，在 MySQL 数据库中创建一个反馈模式。</div>

<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">创建反馈模式的 SQL 脚本</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
create database feedback_schema;
use feedback_schema;
CREATE TABLE feedback (
  id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  TalkTitle VARCHAR(45) NOT NULL,
  SpeakerName VARCHAR(45) NOT NULL,
  Feedback VARCHAR(4000) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = InnoDB;</pre>

<div>这是一个简单的模式，一个表，没有关系，但 Roo 能成功地对多个表和多个关系的复杂模式进行反向工程。
  <br /><br />
在运行了以上的 SQL 脚本并生成模式后，创建反馈应用程序：</div>

<ul style="padding-left:2.5em;list-style-type:decimal;margin-top:.5em;">
          <li>创建名为 feedback 的目录。</li>
          <li>在操作系统命令行，到达 feedback 目录。</li>
          <li>通过输入 roo 命令打开 Roo shell。</li>
          <li>输入 project --topLevelPackage com.dw.roo.feedback 来创建新的 Maven 项目。</li>
          <li><span>在此应用程序中，我们将使用 MySQL 作为数据库。要设置应用程序的持久性，用：</span><br />
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.5em 0;">
persistence setup --provider HIBERNATE 
--database MYSQL --databaseName feedback_schema 
  --userName root --password password</pre>
  <span>由于我使用根用户创建模式，我将使用根作为用户名。输入您创建模式的用户名和密码。此命令还会添加持久性所需的所有 JAR。</span>
          </li>
          <li>您可以使用 database introspect --schema feedback_schema 来内部检查数据库模式。database introspect 命令显示了与数据库模式相关的元数据。此命令将会在 Roo shell 控制台显示模式的元数据。您还可以使用 --file attribute 将元数据 xml 导入文件。</li>
          <li>完成数据库模式内部检查以后，您可以用 database reverse engineer --schema feedback_schema --package ~.domain 对模式进行反向工程。<br />
database reverse engineer 命令有两个参数，schema 和 package，用来指定需要进行反向工程的模式的名称和 Roo 生成资源所在的包。这会在 com.dw.roo.feedback.domain 包中创建所有实体。</li>
          <li>下一步是生成应用程序的控制器。可以通过运行 controller all --package ~.web 来完成。</li>
          <li><span>在运行应用程序之前，需要对 persistence.xml 中的一个属性做点小变动。hibernate.ejb.naming_strategy i属性使用 ImprovedNamingStrategy，它无法用于 MySQL 数据库，如果运行 mvn clean install tomcat:run 将会产生例外。要使它能用，需要将 hiberate.ejb.naming_strategy 改成 DefaultNamingStrategy，如下所示：</span>
          <br /><pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.5em 0;">
&lt;property name="hibernate.ejb.naming_strategy" 
value="org.hibernate.cfg.DefaultNamingStrategy"/&gt;</pre>
        </li>
        <li>现在您可以使用 Now you can run the feedback application using the Maven 命令 <b>mvn clean install tomcat:run</b> 来运行反馈程序。</li>
      </ul>

      <blockquote style="font-size:1em;line-height:1.6em;">至此，我们已将简单的 CRUD web 应用程序扩展为成熟的企业应用程序。<br /> 我们演示了添加特性，如 JPA、Selenium 测试、Spring Security、电子邮件集成、Spring Roo 社交功能、国际化支持等。我还演示了如何使用 Spring Roo 数据库反向工程特性根据现有数据库创建应用程序。<br />还有其他很多特性如 JMS、Solr 和 JSON 支持，等等。 Roo 都能方便地添加到您应用程序中。</blockquote>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>








  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h2 style="font-size:1.8em;">Spring Roo 附加组件</h2>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[<div>简单来说，附加组件是一种软件组件，它将 特定的功能添加到软件应用中。例如，在大多数 Web 浏览器中，视频支持由附加组件提供。另一个 示例是 Eclipse（许多 Java™ 开发人员使用或 至少了解的开源 IDE）。大多数功能， 如 JUnit 支持、SVN 支持等，都由附加组件提供。我们使用 add-on 作为 插件和扩展的总称。</div>
<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">Spring Roo 还有附加组件的概念：</h3>
<ul style="padding-left:2.5em;list-style-type:decimal;margin-top:.5em;">
    <li>为了让第三方开发人员能够创建扩展 Spring Roo 的功能的能力</li>
    <li>帮助 Spring Roo 轻松添加新功能</li>
    <li>帮助 Spring Roo 仍然轻便灵活（即：减少 Spring Roo 的大小）</li>   
</ul>
]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="Spring Roo 核心组件" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      <div> 为了实现附加组件的开发， Spring Roo 提供了一组核心组件，这些组件构成了不同附加组件的托管执行环境。这些组件是 Classpath，它支持 Process Manager 和 Shell。反过来 Process Manager 支持 Project 和 File Undo。Project 支持 Model、Metadata 和 File Monitor。最后，还有 Support 组件，它由所有组件使用。下图提供了这些关系的可视化表示。
        <br />
        <br />
        <img src="https://www.ibm.com/developerworks/cn/opensource/os-springroo3/figure01.gif" style="max-width:100%;" /></div>

        <ul style="padding-left:2em;list-style-type:disc;margin-top:1em;">
    <li><b>Support</b> — org.springframework.roo.support 模块 提供所有核心模块 和附加组件使用的常见实用工具类。一些实用工具类包括 Assert、 FileCopyUtils、 XmlUtils、 StringUtils、 FileUtils 等。例如，如果您 要将一个文件的内容复制到另一个文件，您可以使用 FileCopyUtils 来完成。</li>
    <li><b>Metadata</b> — org.springframework.roo.metadata 模块 提供元数据服务提供程序接口和实现， 包括依赖项注册和缓存。</li>
    <li><b>File monitor</b> — org.springframework.roo.file.monitor 模块在检测到的文件系统变化之后公布事件 （默认实现使用自动缩放的磁盘轮询）。</li> 
    <li><b>File undo</b> — org.springframework.roo.file.undo 模块提供文件撤消工具，供进程 管理器使用。</li> 
    <li><b>Project</b> — org.springframework.roo.project 模块 提取典型的最终用户项目构建系统，如 Apache Maven 和 Apache Ant。</li> 
    <li><b>Process manager</b> — org.springframework.roo.process.manager 模块提供一个类似于 ACID 的文件系统抽象，包括 磁盘回滚和进程同步。</li>
    <li><b>Classpath</b> — org.springframework.roo.classpath 模块对 Java 和 AspectJ 编译单元执行抽象语法树解析和类型绑定。</li>
</ul>
    ]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="Spring Roo 基础附加组件" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<ul style="padding-left:2em;list-style-type:disc;margin:1em 0;">
    <li><b>Add-On Creator</b> — org.springframework.roo.addon.creator 附加组件支持轻松创建第三方 Roo 附加组件。</li>
    <li><b>Backup</b> — org.springframework.roo.addon.backup 附加组件允许通过键入备份对 ZIP 文件进行备份。</li>
    <li><b>Cloud Foundry</b> — org.springframework.roo.addon.cloud.foundry 附加组件提供了 VMware Cloud Foundry 支持。</li> 
    <li><b>Configurable</b> — org.springframework.roo.addon.configurable 附加组件支持通过 AspectJ ITD 引入 Spring @Configurable 注释。</li> 
    <li><b>Database reverse engineering</b> — org.springframework.roo.addon.dbre 附加组件支持 现有数据库的增量逆向工程。</li> 
    <li><b>Data on Demand</b> — org.springframework.roo.addon.dod 附加组件支持自动创建 用于集成测试的样本数据。</li>
    <li><b>Email</b> — org.springframework.roo.addon.email 附加组件支持 在目标项目中集成和配置 Spring 的电子邮件支持。</li>
    <li><b>Entity</b> — org.springframework.roo.addon.entity 附加组件提供了扩展的支持，可自动维护 Java Persistence API @Entity 类。</li>
    <li><b>Dynamic Finder</b> — org.springframework.roo.addon.finder 创建类型安全的与代码完成兼容的 JPA 查询语言 查找器。</li>
    <li><b>Git</b> — org.springframework.roo.addon.git 附加组件提供对项目中 GIT 集成的支持。每个 成功执行的命令将自动提交到 本地 GIT 存储库。</li>
    <li><b>GWT</b> — org.springframework.roo.addon.gwt 附加组件支持使用 Google Web 工具包的 UI 基架。</li>
    <li><b>JavaBean</b> — org.springframework.roo.addon.javabean 附加组件自动维护 JavaBean getter/setter，用于 带有 @RooJavaBean 注释的类。</li>
    <li><b>JDBC</b> — org.springframework.roo.addon.jdbc 附加组件封装对不同捆绑包中附带的 JDBC 驱动程序的符合 OSGi 的 访问（主要由其他附加组件使用）。</li>
    <li><b>JMS</b> — org.springframework.roo.addon.jms 附加组件支持在目标项目中配置 Java Messaging System 设置。</li>
    <li><b>JPA</b> — org.springframework.roo.addon.jpa 附加组件安装指定的 JPA 提供程序，并相应地设置 JDBC 。</li>
    <li><b>JSON</b> — org.springframework.roo.addon.json 附加组件将与 JSON 相关的序列化和反序列化方法添加到 POJO。</li>
    <li><b>Logging</b> — org.springframework.roo.addon.logging 附加组件设置 Log4j，包括基于命令的日志级 配置。</li>
    <li><b>Pluralization</b> — org.springframework.roo.addon.plural 附加组件提供了名词复数（主要由其他 附加组件使用）。</li>
    <li><b>Property Editor</b> — org.springframework.roo.addon.property.editor 附加组件按 Spring MVC 的要求管理属性编辑器。</li>
    <li><b>Property File</b> — org.springframework.roo.addon.propfiles 附加组件支持在目标项目中管理 属性。</li>
    <li><b>RooBot Client</b> — org.springframework.roo.addon.roobot.client 附加组件支持通过 RooBot 服务器进行附加组件的管理。</li>
    <li><b>Security</b> — org.springframework.roo.addon.security 附加组件设置 Spring Security，包括登录页面、过滤器和依赖项。</li>
<li><b>Serializable</b> — org.springframework.roo.addon.serializable 附加组件将 java.io.Serializable 支持（如 UID 维护） 添加到所请求的 Java 类型。</li>
<li><b>Solr</b> — org.springframework.roo.addon.solr 附加组件支持在目标项目中配置和集成 Apache Solr 功能。</li>
<li><b>Integration Test</b> — org.springframework.roo.addon.test 附加组件为项目实体产生 JUnit 集成测试。</li>
<li><b>ToString</b> — org.springframework.roo.addon.tostring 附加组件为任何带有 @RooToString 注释的类创建一个有效的 toString() 方法。</li>
<li><b>WebFlow</b> — org.springframework.roo.addon.Web.flow 附加组件支持在目标项目中配置和集成 Spring Web Flow 功能。</li>
<li><b>Web MVC Controller</b> — org.springframework.roo.addon.Web.mvc.controller 附加组件支持在目标项目中配置和集成 Spring MVC 控制器。</li>
<li><b>Web MVC Embedded</b> — org.springframework.roo.addon.Web.mvc.embedded 附加组件提供了对 MVC 附加组件的扩展，这允许将地图、视频等嵌入式功能添加到网页中。</li>
<li><b>Web MVC JSP</b> — org.springframework.roo.addon.Web.mvc.jsp 附加组件在目标项目中配置和集成 Spring MVC JSP 功能。</li>
<li><b>Selenium</b> — org.springframework.roo.addon.Web.selenium 附加组件支持在目标项目中配置和集成 Selenium Web 测试。</li>
</ul>
<div>现在我们已经看过了 Spring Roo 核心组件以及 Spring Roo 提供的基本附加组件，接下来我们编写自己的附加组件。</div>
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>





  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h2 style="font-size:1.8em;">OSGi 运行时环境</h2>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[<div>Spring Roo 基于 OSGi，它是 Roo 的附加 架构的理想之选。OSGi 提供了非常好的基础架构来开发 模块化和嵌入式的面向服务应用程序。
Roo shell 使用 Apache Felix 作为其 OSGi 运行时框架，同时使用 Service Component Runtime (SCR) 进行组件管理，使用 OSGi Bundle Repository (OBR) 进行捆绑解析。在 Roo shell 中有各种 OSGi 命令，您可以通过键入 help osgi 查看，如清单 1 所示。</div>

]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="Spring Roo 核心组件" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      <h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">清单 1. 针对 OSGi 的 Roo 帮助</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
roo> help osgi 
* osgi find - Finds bundles by name 
* osgi framework command - Passes a command directly 
through to the Felix shell infrastructure 
* osgi headers - Display headers for a specific bundle 
* osgi install - Installs a bundle JAR from a given URL 
* osgi log - Displays the OSGi log information 
* osgi obr deploy - Deploys a specific OSGi Bundle Repository (OBR) bundle 
* osgi obr info - Displays information on a specific OSGi Bundle Repository (OBR) bundle 
* osgi obr list - Lists all available bundles from the 
OSGi Bundle Repository (OBR) system 
* osgi obr start - Starts a specific OSGi Bundle Repository (OBR) bundle 
* osgi obr url add - Adds a new OSGi Bundle Repository (OBR) repository file URL 
* osgi obr url list - Lists the currently-configured 
OSGi Bundle Repository (OBR) repository file URLs 
* osgi obr url refresh - Refreshes an existing 
OSGi Bundle Repository (OBR) repository file URL 
* osgi obr url remove - Removes an existing 
OSGi Bundle Repository (OBR) repository file URL 
* osgi ps - Displays OSGi bundle information 
* osgi resolve - Resolves a specific bundle ID 
* osgi scr config - Lists the current SCR configuration 
* osgi scr disable - Disables a specific SCR-defined component 
* osgi scr enable - Enables a specific SCR-defined component 
* osgi scr info - Lists information about a specific SCR-defined component 
* osgi scr list - Lists all SCR-defined components 
* osgi start - Starts a bundle JAR from a given URL 
* osgi uninstall - Uninstalls a specific bundle 
* osgi update - Updates a specific bundle 
* osgi version - Displays OSGi framework version</pre>
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>









  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h2 style="font-size:1.8em;">Spring Roo 附加组件创建命令</h2>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>Spring Roo 绑定了附加组件创建命令，用于创建不同类型的附加组件。Add-on Creator 公开 addon create 命令，也是一个 Roo 附加组件。 Roo 目前支持四类附加组件：</div>
<ul style="padding-left:2.5em;list-style-type:decimal;margin:.8em 0;">
<li><b>Internationalization Add-on</b> — 它支持为 Roo 的支架式 Spring MVC 应用程序添加语言翻译（例如，添加对印地语的翻译 ）。</li>
<li><b>Simple Add-on</b> — Simple Add-on 支持对项目依赖项或配置或这两者的小增补（例如，进行一些 maven pom.xml 修改，如添加某些 JAR 或 Maven 插件）。</li>
<li><b>Advanced Add-on</b> — 该附加组件执行繁重的工作， 用于构建功能完整的 Spring Roo 附加组件，该组件需要创建 Java 代码（构建一个能够为域对象编写 equals 和 hashcode 方法的附加组件。）已经有一个社区附加组件来执行这些 功能。</li>
<li><b>Wrapper Add-on</b> — 该附加组件包含一个 Maven 工件，以创建符合 OSGi 的捆绑包。当附加组件需要依赖项来完成其功能时需要它。 例如，Spring Roo 数据库逆向工程附加组件需要 Postgres JDBC 驱动程序来完成任务，因此您将使用该附加组件包装 Postgres JDBC 驱动程序。</li>
</ul>

<div>这些附加组件创建命令来简化 Roo 附加组件的开发，通过创建新的附加组件：</div>
<ul style="padding-left:2.5em;list-style-type:decimal;margin:.8em 0;">
<li>与 Google Code SVN 源代码控制集成</li>
<li>在公共 Maven 存储库中托管，作为 Google 代码项目的一部分创建。</li>
<li>符合 RooBot，一种 VMware 托管服务， 为公共 Roo OBR 文件中的重要内容编制索引。 OBR 文件是对捆绑包元数据的基于 XML 的表示。 </li>
</ul>

<div>为了符合 RooBot，附加组件应：</div>
<ul style="padding-left:2.5em;list-style-type:decimal;margin:.8em 0;">
<li>符合 OSGi。</li>
<li>PGP 签名的工件，带有公共密钥。</li>
<li>通过 httppgp:// 协议注册。</li>
</ul>

<div>使用 Roo addon create 命令，您能够获得自动为您的附加组件配置的上述所有功能。这无疑减少了创建和向外界发布 附加组件的时间。</div>

<blockquote style="font-size:1em;line-height:1.6em;color:green;"><h3><b>httppgp://</b></h3> 
Spring Roo V1.1 推出了 Pretty Good Privacy (PGP)，允许用户指定哪些开发人员是可信赖的，能够为可以在 Roo shell 中下载和激活的软件签名。事实上， 每个版本的 Roo 本身现在都有 PGP 签名。一种称为 httppgp:// 的新协议处理程序被引入 Roo 中，表明 URL 还具有 PGP 防护独立的签名。这提供了一种开放的安全形式，有助于防止用户进行恶意下载。这些标准还允许使用独立的 PHP 工具来独立验证 Roo 的操作。</blockquote>
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>




  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h2 style="font-size:1.8em;">我想要印地语支持 (i18N 附加组件创建)</h2>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
        当您使用 Spring Roo 创建基于 Spring MVC 的 Web 应用程序时，您 可以使用 Web mvc language 命令添加对不同语言的支持。Spring Roo 开箱即用地支持英语、德语、西班牙语、意大利语、荷兰语和 瑞典语。国际化支持由 Web MVC JSP 附加组件提供，仅当您的 Webapp 目录中有 JSPX 文件时才启用该附加组件。JSPX 文件由一个控制器命令生成， 该命令将简单的基于 JAR 的应用程序转换为 Spring MVC Web 应用程序。
        <br />
        <br />
作为一名印度人，我想要在我的 Web 应用程序中添加对印地语的支持。Spring Roo 提供一个 <b>addon create i18n</b> 命令，该命令提供 对 <b>Web mvc install language command</b> 的扩展，添加对印地语等新语言的支持。它只需要将 messages.properties 文件转换成所需的语言。
<br />
<br />
当 Spring Roo 创建 Spring MVC Web 应用程序时，它创建两个属性文件： <br />
<b>application.properties</b> 和 <b>messages.properties</b>。 application.properties 文件包含特定于应用程序的属性，比如应用程序名称。messages.properties 文件包含的属性不特定于任何应用程序， 比如当您单击删除按钮时会出现 “您确定要删除该项目吗？” 消息，还有登录、注销等消息。因此，在 编写 i18n 附加组件时，您需要提供对 messages.properties 文件的翻译。
<br />
<br />
现在，我们已经讨论了 Spring Roo 中的默认国际化支持，让我们编写能够添加印地语支持的 i18n 附加组件。 我将展示如何使用 Google 代码建立项目，使用 命令编写附加组件，并向外界发布，最后 使用 RooBot 服务注册它。使用 RooBot 服务进行注册很重要，因为这会让 RooBot 为您的附加组件编制索引 并在其他开发人员通过 addon search 命令进行搜索时显示该组件。
]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="项目建立" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div><a target="_blank" href="http://www.springsource.org/roo/guide?w=simple-addons#d4e2621">Spring Roo</a> 文档 生动地讲解了如何使用 Google 代码建立您的 项目和 Maven 存储库，因此我不会 重复。我只说明我将使用项目名称 “roo-hind-addon”。</div>
    ]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="创建一个 i18N 附加组件" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>在建立了项目后，您将有一个空目录， 称为 roo-hindi-addon。进入该目录并输入 roo command。在进入 shell 后，输入 <b>addon create i18n</b>。如果按下 tab 键，您将看到该命令接受 7 个属性。在这 7 个属性中，有 3 个属性是必选的： 
<br />
<b>topLevelPackage</b>（新附加组件的顶层包 ）、
<br />
<b>locale</b>（语言设置缩写， 如 “it” 代表意大利语）和 
<br />
<b>messageBundle</b> （到 message_xx.properties 的完全限定路径，其中 xx 是 区域名称）。
<br />
另外 4 个属性是可选属性： 
<br />language（语言的全名）、 
<br />flagGraphic（到 xx.png 文件的完整路径，其中 xx 是标志名称）、
<br />description （对附加组件的说明）和 
<br />projectName（项目名称（如果没有 提供，则使用顶层包名称））。
<br />
<br />我建议您使用 projectName 属性并确保其值是在 Google 代码上托管的项目的名称。因此，在我们的示例中，将是 roo-hindi-addon。
在上述属性中，最重要的是 messageBundle，它指定转换后的 messages.properties 文件。为了将 messages.properties 转换成印地语，最简单的方法是使用 Google translate 等服务，依次转换每个属性，然后将它们写入到 messages_hi.properties 文件。然而，这在我们的情况下不可行，因为 Java 属性文件使用 ISO-8859-1 编码，不支持印地文字符。为了克服这个问题，我使用了一个称为 Eclipse ResourceBundle Editor 的 Eclipse 插件，它允许您为不同语言转换并创建资源包。您可以使用 <b>http://www.nightlabs.de/updatesites/development/</b> 更新站点安装它。 将 messages.properties 文件转换为 messages_hi.properties 文件不在本文的讨论范围内。ResourceBundle Editor 插件易于使用。请注意，如果支持该语言字符，则不需要使用 ResourceBundle Editor。messages_hi.properties 文件看起来与清单 2 类似。</div>

<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">清单 2. messages_hi.properties 文件示例</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
button_cancel = \u0930\u0926\u094D\u0926 
button_end = \u0905\u0902\u0924
button_find = \u0916\u094B\u091C\u0947\u0902
button_home = \u0918\u0930 
...</pre>

<div>一旦您拥有了转换后的 messages_hi.properties 文件， 您便可以创建该附加组件，只需输入一个命令便能完成。您可以通过将清单 3 中的命令输入到 Roo shell 中来创建印地语附加组件。</div>
<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">清单 3. 创建印地语附加组件的命令</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
addon create i18n --locale hi --topLevelPackage org.xebia.roo.addon.i18n.hindi 
  --messageBundle <location to messages_hi.properties> \
--language hindi --projectName roo-hindi-addon 
  --flagGraphic &lt;full path to flag hi.png&gt;</pre>

<div>清单 4 显示了通过 addon create i18n 命令创建的工件。</div>
<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">清单 4. 创建的工件</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
Created ROOT/pom.xml 
Created ROOT/readme.txt 
Created ROOT/legal 
Created ROOT/legal/LICENSE.TXT 
Created SRC_MAIN_JAVA 
Created SRC_MAIN_RESOURCES 
Created SRC_TEST_JAVA 
Created SRC_TEST_RESOURCES 
Created SRC_MAIN_WEBAPP 
Created SRC_MAIN_RESOURCES/META-INF/spring 
Created ROOT/src/main/assembly 
Created ROOT/src/main/assembly/assembly.xml 
Created SRC_MAIN_RESOURCES/org/xebia/roo/addon/i18n/hindi 
Created SRC_MAIN_RESOURCES/org/xebia/roo/addon/i18n/hindi/messages_hi.properties 
Created SRC_MAIN_RESOURCES/org/xebia/roo/addon/i18n/hindi/hi.png 
Created SRC_MAIN_JAVA/org/xebia/roo/addon/i18n/hindi 
Created SRC_MAIN_JAVA/org/xebia/roo/addon/i18n/hindi/HindiLanguage.java</pre>

<div>该命令生成了一个 Maven 项目，可以通过 File > Import > Maven > Existing Maven projects 导入到 Eclipse（有 m2eclipse）或 SpringSource 工具套件。您不需要 导入该项目，因为我们不需要修改该附加组件。
<br />
<br />
现在我们可以安装该附加组件，在我们的项目中使用它，并将其对外发布。但是，首先我们讨论一些工件，以更多地了解生成的代码：</div>

<ul style="padding-left:2.5em;list-style-type:decimal;margin:.8em 0;">
<li>pom.xml 是一个标准的 Maven 项目配置。所生成的 pom.xml 有各种预配置的插件，它们执行与使用 PGP 对工件进行签名的工作，使用 Maven 版本插件发行该附加组件， 使用 Maven 捆绑包插件创建 OSGi 捆绑包。它还将 OSGi 和 Felix 依赖项添加到项目中，这是让附加组件在 Roo shell 内运行所必需的。</li>
<li>assembly.xml 定义了由 Maven 程序集插件用来包装附加组件的配置。</li>
<li>messages_hi.properties 是在创建附加组件时我们提供的消息包文件，被复制到资源文件夹。</li>
<li>hi.png 是在创建附加组件时我们提供的标志 PNG 文件，被复制到资源文件夹。</li>
<li>HindiLanguage.java 是该附加组件所创建的惟一的 Java 文件， 用于获取对应于特定语言的信息。例如，它提供本地名称、 消息包资源文件等。</li>
</ul>
    ]]>
    </c:sourceContent>




    <c:sourceContent type="html" title="将印地语支持添加到应用程序" 
                     id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>现在我将向您展示如何使用我们刚刚创建的附加组件将印地语支持添加到您的应用程序：</div>

<ul style="padding-left:2.5em;list-style-type:decimal;margin:.8em 0;">
<li>退出 Roo shell 并运行 mvn clean install 命令。在构建过程中，它会询问您的 GPG 密码。</li>
<li>在构建了 Roo 附加组件后，打开新的命令行并创建名为 i18n-hindi-client 的目录。我们将为我们的附加组件创建一个 简单的客户端。</li>
<li>进入 i18n-hindi-client 目录并输入 roo 命令。</li>
<li><span>在 Roo shell 中执行以下命令。这将创建 一个简单的 Spring MVC Web 应用程序。</span>
<br />
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
project --topLevelPackage com.shekhar.roo.i18n.client \
--projectName i18n-hindi-client  
persistence setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY  
entity --class ~.domain.MyUser  
field string --fieldName name --notNull  
controller all --package ~.web</pre>
</li>
<li>输入该命令并按下 Tab 键：Web mvc language --code de en es it nl sv
您不会看到印地语支持。这是因为我们还没有安装印地语附加组件。</li>
<li><span>要安装该附加组件，请输入：</span><br />
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
osgi start --url file:///<location to addon target 
   folder>/org.xebia.roo.addon.i18n.hindi-0.1.0.BUILD-SNAPSHOT.jar</pre>
<span>这样应该便能够安装并激活我们的 Spring Roo 印地语附加组件。 您可以使用 osgi ps 命令查看该附加组件的状态，这会显示 OSGi 包信息及其状态，如下所示：</span>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
[ 95] [Active ] [ 1] roo-hindi-addon (0.1.0.BUILD-SNAPSHOT)</pre>
</li>
<li><span>再次输入 Web mvc language –code 并按下 Tab 键。这次，您将看到针对印地语的 代码。选择 hi 代码，印地语支持将被 添加到您的应用程序。</span><br />
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
Web mvc language –code hi</pre>
</li>
<li>退出 Roo shell 并输入 mvn tomcat:run。您将在 页脚看到印度国旗。单击该国旗，您的应用程序 将用印地语显示出来，如图 2 所示。
<br />
<img src="https://www.ibm.com/developerworks/cn/opensource/os-springroo3/figure02.jpg" style="max-width:100%;" /></li>
</ul>
<div>在测试了该附加组件在您的 开发系统中运行良好后，您可以将该附加组件推送到 我们创建的 Google 代码项目。</div>
    ]]>
    </c:sourceContent>




    <c:sourceContent type="html" title="高级选项" 
                     id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>现在我们已经看到我们创建的附加组件运行正常，让我们 看一下如何将印地语提供给 应用程序：</div>

<ul style="padding-left:2.5em;list-style-type:decimal;margin:.8em 0;">
<li>roo-hindi-addon 通过 osgi start 命令启动。</li>
<li>在附加组件启动后，由 addon create i18n command 创建的 HindiLanguage 类在 i18nComponent 上得到注册。i18nComponent 是一个 OSGi 服务侦听器， 用于注册和注销 i18n 附加组件。 HindiLanguage 类标有 @Component 和 @Service 注释，这由 Apache Felix 提供。这些注释确保在 Roo shell 上注册了这些组件和 服务，且它们可供 使用。</li>
<li>当我们输入 Web mvc install language –code 命令 并按下 tab 键后，tab 完成服务将调用 i18nComponent 类 getSupportedLanguages() 方法，这将 返回 i18n 附加组件的 java.util.Set。 因为 HindiLanguage 已经 在 i18nComponent 上进行了注册，因此也会返回它。</li>
</ul>
    ]]>
    </c:sourceContent>



    <c:sourceContent type="html" title="对外发布附加组件" 
                     id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>对外发布附加组件非常容易，因为 Roo create 命令已经通过安装所有必需的 Maven 插件为我们完成了大多数操作。转到项目根目录，并输入清单 6 中的命令。</div>

<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">清单 6. 发布 Roo 项目</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
svn add pom.xml src/ legal/ readme.txt 
svn commit -m "Roo Hindi Addon first version" 
mvn release:prepare release:perform</pre>
<div>Maven 版本插件会要求输入发行版本、标记名称以及开发版本。您可以只选择默认设置，然后继续。发行和发布工件到 Google 代码项目需要几分钟的时间。然后您可以在您的 Google 代码项目中查看这些附加工件。</div>
    ]]>
    </c:sourceContent>



    <c:sourceContent type="html" title="在 RooBot 上注册您的附加组件" 
                     id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>在发布了插件后，您可以通过电子邮件将它发送到 s2-roobot@vmware.com 来注册您的附加组件存储库。 电子邮件的主题行必须包含 repository.xml 文件。例如， 对于我们刚刚创建的附加组件，repository.xml 为 http://code.google.com/p/roo-hindi-addon/source/browse/repo/repository.xml。 如需了解关于 RooBot 注册的更多信息，请参见 Spring Roo 文档。</div>
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>




  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h2 style="font-size:1.8em;">监控我的 Java 应用程序 (简单的附加组件创建)</h2>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[许多企业应用程序中的一个常见要求就是监控 Java 应用程序来确定应用程序的 性能瓶颈。我也有同样的要求，因此我决定 看一下一些可用的开源解决方案。Java Application Monitor (JAMon) 是免费的、高性能、线程安全的 Java API，使您能够轻松监控生产 应用程序。]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="添加 JAMon 支持" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      <div>要在您的 Web 应用程序中添加 JAMon 支持：</div>

<ul style="padding-left:2.5em;list-style-type:decimal;margin:.8em 0;">
<li>您必须在您的 pom.xml 中添加 jamon JAR。</li>
<li><span>您必须在您的应用程序上下文文件中定义 JamonPerformanceMonitorInterceptor bean。 示例 bean 定义与 清单 7 中的代码类似。</span>
<br/>
<h3 style="padding-bottom:0;font-family:sans-serif;font-style:oblique;font-size:1.3em;color:green;margin-top:.5em;">清单 7. JamonPerformanceMonitorInterceptor 代码</h3>
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">
&lt;bean id="jamonPerformanceMonitorInterceptor" 
    class=\
"org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor"&gt; 
    &lt;property name="trackAllInvocations" value="true"&gt;&lt;/property&gt; 
    &lt;property name="useDynamicLogger" value="true"&gt;&lt;/property&gt; 
  &lt;/bean&gt; 

  &lt;bean id="autoProxyCreator" 
    class=\
"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"&gt; 
    &lt;property name="interceptorNames"&gt; 
      &lt;list&gt; 
        &lt;idref bean="jamonPerformanceMonitorInterceptor" /&gt; 
      &lt;/list&gt; 
    &lt;/property&gt; 
    &lt;property name="beanNames"&gt; 
      &lt;list&gt; 
        &lt;value&gt;speakerController&lt;/value&gt; 
        &lt;value&gt;talkController&lt;/value&gt; 
      &lt;/list&gt; 
    &lt;/property&gt; 
  &lt;/bean&gt;
</pre>
</li>

</ul>
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>









  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h2 style="font-size:1.8em;">在 Ubuntu 上编译 Spring Roo 源代码的过程</h2>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      <ul style="padding-left:2.5em;list-style-type:decimal;">
          <li>安装 Git，一个分布式源代码控制管理系统。要在 Ubuntu 系统上安装它，输入 sudo apt-get install git-core gitk。</li>
          <li>输入 git clone git://git.springsource.org/roo/roo.git，使用 Git 签出 Spring Roo。您将在主目录中看到一个 roo 文件夹，其中包含所有 Roo 源代码。</li>
          <li>GnuPG 支持数据和通信的加密和签名，且以一个多功能的密钥管理系统和各种公钥目录的访问模块为特色。Roo 使用 GPG 来自动签名编译输出。</li>
          <li><span>执行命令 gpg --list-secret-keys</span><br />
              <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">C:\dev\roo-sourcecode\roo>gpg --1ist-secret-keys
C:/Users/xebia/AppData/Roaming/gnupg\secring.gpg
sec 2048R/2F96093B 2010-07-03
uid                shekhar (spring-roo) <shekhargu1ati84@gmai1.com>
ssb 2048R/B77E5C63 2010-07-03
C:\dev\roo-sourcecode\roo>_</pre>
          </li>
          <li>如果您看不到输出，首先必须创建一个密钥。使用 gpg –gen-key，它将引导您逐步创建密钥。然后使用 gpg –list-secret-keys 验证您新创建的密钥已生成。</li>
          <li>接下来，您需要发布您的密钥到公钥服务器。注意 –list-secret-keys 中显示的 sec 密钥 ID。在我的例子中，密钥 ID 是 2F96093B。通过 gpg –keyserver hkp://pgp.mit.edu –send-keys 2F96093B 将您的公钥推送到一个密钥服务器（在结尾更改密钥 ID）。</li>
          <li><span>一些 Roo 模块需要已经不以 OSGi 形式存在的 JAR。即，它们没有一个 OSGi 感知的清单。Roo 有一个称为 wrapping 的特殊项目，可将常态 JAR 转化为 OSGi JAR。您需要在试图使用 Roo 之前运行包装程序。没有包装程序，您将看到错误，说 Maven 无法找到 org.springframework.roo.wrapping.some_module。要创建 JAR 文件包，从根 Roo 签出位置输入：</span><br />
            <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">cd wrapping
mvn clean install 
cd..</pre>
          </li>
          <li>接下来，运行 mvn clean install 命令。（Maven V2 应当安装在了您的系统上。如果没有，立即安装它。）每次编译源代码时，Maven 将提示您输入您的密钥的密码/口令（您输入了口令的同时创建 GPG 密钥）。输入口令并按下 Enter。编译源代码需要几分钟时间。</li>
      </ul>
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h2 style="font-size:1.8em;">在 Windows 上编译 Roo 源代码的过程</h2>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
      <ul style="padding-left:2.5em;list-style-type:decimal;">
          <li><span>安装 Git，一个分布式源代码控制管理系统。要开始此过程，您需要在您的 windows 机器上安装 Git。我在我的 windows 机器上安装了 msysGit 。如果您已经安装了 Git，那么可以跳过这一步。在安装 msysGit 时，它会要求选择安装位置。它会打开一个命令提示符，并开始触发大量命令。这将持续大约 1 分钟。安装完成之后，您将看到如下所示的一个屏幕。</span><br />
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">{ test "$bindir/" = "$execdir/" || \
               { rm -f "$execdir/git.exe" && \
               test -z "" &amp;&amp; \
               ln "$bindir/git.exe" "$execdir/git.exe" 2>/dev/null || \
               cp "$bindir/git.exe" "$execdir/git.exe"; } ; } && \
        { for p in git-add.exe git-annotate.exe git-apply.exe git-archive.exe 
git-bisect--helper.exe git-blame.exe git-branch.exe git-bundle.exe git-cat-file.exe 
git-check-attr.exe git-check-ref
                rm -f "$execdirf$p" && \
                ln "Sexecdir/git.exe" "Sexecdir/$p" 2>/dev/null ll \
                ln -s "git.exe" "$execdir/$p" 2>/dev/null || \
                cp "Sexecdir/git.exe" "$execdir/$p" Il exit; \
         done; } && \
        { test x"git-renote-https.exe git-renote-ftp.exe \
git-renote-ftps.exe" = x ll \
                { for p in git-remote-https.exe git-remote-ftp.exe \
git-remote-ftps.exe; do \
                rm -f "$execdir{$p" && \
                ln "Sexecdir/git-remote-http.exe" "$execdir/$p" 2>/dev/null ll \
                ln -s “git-renote—http.exe" "$execdir/$p" 2>/dev/null || \
                cp "Sexecdir/git-remote-http.exe" "Sexecdir/$p" ll exit; \
          done; } ; } && \
        ./check_bindir "z$bindir" "z$execdir" "Sbindir/git—add.exe"

-------------------------
Hello, dear Git developer.

This is a minimal MSYS environment to work on Git.

You are in the git working tree, and all is ready for you to hack.

Welcome to msysGit

Run 'git help git' to display the help index.
Run 'git help <command>' to display help for specific commands.
Run '/share/msysGit/add-shortcut.tcl' to add a shortcut to msysGit.

It appears that you installed msysGit using the full installer.
To set up the Git repositories, please run /share/msysGit/initialize.sh</pre>
          </li>
          <li><span>设置 Git 环境变量。需要在您的 Windows 路径中设置 Git。将 <b>${MSYSGIT}\msysgit\bin</b> 和 <b>{MSYSGIT}\msysgit\mingw\bin</b> 添加到您的 Windows 路径中，其中 <b>${MSYSGIT}</b> 是安装 msysGit 的位置。打开一个新的命令提示符并输入 git。您将看到如下所示的输出。</span><br />
<pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">C:\>git
usage: git [--version] [--exec-path[=GIT_EXEC_PATH]] [--html-path]
           [-pl--paginate|I--no-pager] [--no-replace-objects]
           [--bare] [--git-dir=GIT_DIR] [--work-tree=GIT_WORK_TREE]
           [-c name=value
           [--help] COMMAND [ARGS]
The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty git repository or reinitialize an existing
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local bra
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

See ’git help COMMAND’ for more information on a specific command.
C:\>_</pre>
        </li>
          <li>使用 Git 签出 Spring Roo。在这一步中，您将使用 Git 签出最新源代码，从而创建 Spring Roo 的本地克隆。打开一个命令提示符并转至您希望签出 Spring Roo 的位置。输入 <b>git clone git://git.springsource.org/roo/roo.git</b> 。一直等到它完成为止。这将在您签出 Spring Roo 的位置创建一个名为 roo 的新文件夹。</li>
          <li><span>下载和安装 <b>GPG for Windows</b>。<b>GnuPG</b> 是 GNU 用于确保安全通信和数据存储的工具。它可用于加密数据和创建数字签名。Roo 使用 GPG 来自动签名编译输出。安装了 GPG 之后，使用 gpg –list-secret-keys。您应当会看到类似下面的输出:</span><br />
              <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">C:\dev\roo-sourcecode\roo>gpg --1ist-secret-keys
C:/Users/xebia/AppData/Roaming/gnupg\secring.gpg
sec 2048R/2F96093B 2010-07-03
uid                shekhar (spring-roo) <shekhargu1ati84@gmai1.com>
ssb 2048R/B77E5C63 2010-07-03
C:\dev\roo-sourcecode\roo>_</pre>
          </li>
          <li>如果没有看到输出，这表明您首先需要创建一个密钥。使用 <b>gpg –gen-key</b>。它会引导您逐步创建密钥。使用 <b>gpg –list-secret-keys</b> 验证您新创建的密钥已生成。</li>
          <li>发布您的密钥到一个公钥服务器上。注意 –list-secret-keys 上显示的 sec 密钥 ID。在我的例子中，该 ID 是 2F96093B。通过 <b>gpg –keyserver hkp://pgp.mit.edu –send-keys 2F96093B</b> 将您的公钥推送到一个密钥服务器上（在结尾更改密钥 ID）。</li>
          <li><span>首先构建包装程序项目。一些 Roo 模块需要已经不以 OSGi 形式存在的 JAR。即，它们没有一个 OSGi 感知的清单。Roo 有一个名为 wrapping 的特殊项目，可将常态 JAR 转化成 OSGi JAR。您需要在试图使用 Roo 之前运行包装程序。没有安装程序，您将看到错误，说 Maven 无法找到 org.springframework.roo.wrapping.some_module。要创建 JAR 文件包，从根 Roo 签出位置输入：</span><br />
            <pre style="background-color:#F9F9F9;padding:.8em;border:solid 1px #E2E2E2;margin:.8em 0;">cd wrapping
mvn clean install 
cd..</pre>
          </li>
          <li>运行 mvn clean install 命令。（Maven V2 应当安装在了您的系统上。如果没有，立即安装它。）每次编译源代码时，Maven 将提示您输入您的密钥的密码/口令（您输入了口令的同时创建 GPG 密钥）。输入口令并按下 Enter。编译源代码需要几分钟时间。</li>
          <li>在您的系统设置中建立环境变量 ROO-DEV，该变量应指向 Roo 项目内的引导文件夹。您还应当添加该变量到 PATH 环境变量: <br />
          <br />
          <img src="https://www.ibm.com/developerworks/cn/opensource/os-springroo1/fig03.jpg" style="max-width:100%;" />

            <br />
            <br />
          </li>
      </ul>

      <div>您现在可以使用最新开发的 Roo 版本了。打开命令提示符，创建一个名为 mkdir roo_dev_demo 的新文件夹，并触发 roo-dev 命令。您将看到如下所示的输出:

          <br />
          <pre style="line-height:1.1em;color:green">
    ____  ____  ____
   / __ \/ __ \/ __ \
  / /_/ / / / / / / /
 / _, _/ /_/ / /_/ /
/_/ |_|\____/\____/       1.1.B.RELEASE [rev 793f2b0]
<br />
Welcome to Spring Roo. For assistance press TAB or type "hint" then hit ENTER.
roo>
            </pre>
        您可能希望更新 Spring Roo 源代码来使用最新版本的 Spring Roo。打开命令提示符并转至 Spring Roo 的源代码位置。触发 git pull 命令，该命令会将所有远程更改拉入到您的本地克隆中，然后执行一个 mvn clean install 命令来编译更新的源代码。</div>
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>
</c:component>
