<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract style="font-size:1em;line-height:1.6em;">
    <![CDATA[<div style="margin-bottom:.8em;">In enterprise Java application development, perhaps Spring and Hibernate integration is one of the most-demanded topic which most programmers are looking for and are facing with. Spring is the leading enterprise application framework, and Hibernate is the leading ORM framework so combination of these two guys would be a preferable choice in order to develop robust enterprise applications.
</div><div style="margin-bottom:.8em;">
This is a step-by-step tutorial that helps you build a Spring-Hibernate application easily in a clear and concise way. In this first part, we demonstrate how to code a simple Spring MVC application that displays a list of users from MySQL database. The DAO implementation uses Hibernate’s SessionFactory to query against the database, instead of using <a target="_blank" href="http://www.codejava.net/frameworks/spring/spring-mvc-with-jdbctemplate-example">JdbcTemplate</a>

<br />
<br />
<h1 style="margin:0;padding:0;color:blue;font-weight:bold;font-size:1.5em;">http://www.mkyong.com/maven/how-to-create-a-web-application-project-with-maven/</h1>
</div>]]>
  </c:abstract>
  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-top:1.5em;"> The following configuration approaches are used in the demo application:</div>
<ul style="list-style-type:disc;margin-left:1.5em;">
  <li>Spring MVC: Annotations for controller and XML for bean definitions.</li>
  <li>Hibernate: XML mapping for model class.</li>
  <li>Web Application: using web.xml deployment descriptor file.</li>
</ul>


<div style="margin-top:1.5em;">The following technologies and pieces of software are used throughout this tutorial:</div>
<ul style="list-style-type:disc;margin-left:1.5em;">
  <li>Java 7</li>
  <li>Java EE: Servlet 3.1, JSP 2.3, JSTL 1.2</li>
  <li>Spring framework 4.0.3.RELEASED</li>
  <li>Hibernate ORM 4.3.5.Final</li>
  <li>Spring Tool Suite IDE 3.5.1</li>
  <li>Maven 3</li>
  <li>Tomcat 7</li>
</ul>







    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>




  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Generator the project with maven</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[<pre style="border:solid 1px #DAD5D5;padding:1em;margin:1em 0;background-color:#F9F9F9;font-size:.9em;color:green;">
$ mvn archetype:generate -DgroupId=com.mkyong -DartifactId=CounterWebApp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</pre>
<br />
<b>convert and import to eclipse</b>
<br />
<pre style="border:solid 1px #DAD5D5;padding:1em;margin:1em 0;background-color:#F9F9F9;font-size:.9em;color:green;">$ mvn eclipse:eclipse -Dwtpversion=2.0 --> Eclipse Java web project (WAR)</pre>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="pom.xml" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<pre style="border:solid 1px #DAD5D5;padding:1em;margin:1em 0;background-color:#F9F9F9;font-size:.9em;color:green;">
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
  http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.mkyong&lt;/groupId&gt;
  &lt;artifactId&gt;CounterWebApp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;CounterWebApp Maven Webapp&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
     &lt;!-- jUnit --&gt;
     &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.8.1&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
            &lt;groupId&gt;org.mockito&lt;/groupId&gt;
          &lt;artifactId&gt;mockito-all&lt;/artifactId&gt;
          &lt;version&gt;1.8.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
      &lt;version&gt;3.0.0.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;CounterWebApp&lt;/finalName&gt;
  &lt;/build&gt;
&lt;/project&gt;
</pre>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="web.xml" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<pre style="border:solid 1px #DAD5D5;padding:1em;margin:1em 0;background-color:#F9F9F9;font-size:.9em;color:green;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1"&gt;
  &lt;display-name&gt;FirstSpringProj&lt;/display-name&gt;

  &lt;servlet&gt;
      &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;
      &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  
  &lt;filter&gt;
    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;encoding&lt;/param-name&gt;
      &lt;param-value&gt;utf-8&lt;/param-value&gt;
    &lt;/init-param&gt;
  &lt;/filter&gt;
  
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
&lt;/web-app&gt;
</pre>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="spring-dispatcher-servlet.xml" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<pre style="border:solid 1px #DAD5D5;padding:1em;margin:1em 0;background-color:#F9F9F9;font-size:.9em;color:green;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:mvc="http://www.springframework.org/schema/mvc"
xmlns:tx="http://www.springframework.org/schema/tx"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
                    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd     
                    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;

    &lt;bean id="HandlerMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"&gt;&lt;/bean&gt;

    &lt;bean name="/welcome.htm" 
                class="net.counter.controller.HelloWorldController" /&gt;

  &lt;context:annotation-config /&gt;
  &lt;mvc:annotation-driven /&gt;
  &lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;
  &lt;mvc:resources mapping="/resources/**" location="/resources/" /&gt;
  &lt;context:component-scan base-package="net.counter.controller, net.counter.dao" /&gt;

    &lt;bean id="viewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver" &gt;
        &lt;property name="prefix"&gt;
            &lt;value&gt;/WEB-INF/&lt;/value&gt;
        &lt;/property&gt;
        &lt;property name="suffix"&gt;
            &lt;value&gt;.jsp&lt;/value&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
    
    &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
      &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;
      &lt;property name="url" value="jdbc:mysql://localhost:3306/mydb"/&gt;
      &lt;property name="username" value="root"/&gt;
      &lt;property name="password" value="Cc"/&gt;
  &lt;/bean&gt;
  
  &lt;bean id="sessionFactory"
      class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;
      &lt;property name="dataSource" ref="dataSource" /&gt;
      &lt;property name="configLocation" value="classpath:hibernate.cfg.xml" /&gt;
  &lt;/bean&gt;
  
  &lt;tx:annotation-driven /&gt;
  &lt;bean id="transactionManager"
      class="org.springframework.orm.hibernate4.HibernateTransactionManager"&gt;
      &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
  &lt;/bean&gt;
  
  &lt;bean id="userDaoImpl" class="net.counter.dao.UserDaoImpl"&gt;
      &lt;constructor-arg&gt;
          &lt;ref bean="sessionFactory" /&gt;
      &lt;/constructor-arg&gt;
  &lt;/bean&gt;

  &lt;bean id="homeController" class="net.counter.controller.HomeController" scope="prototype"&gt;
      &lt;property name="userDao" ref="userDaoImpl"/&gt;
  &lt;/bean&gt;

&lt;/beans&gt;
</pre>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="hibernate.cfg.xml" id="sourceContent1" style="margin-top:2em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<pre style="border:solid 1px #DAD5D5;padding:1em;margin:1em 0;background-color:#F9F9F9;font-size:.9em;color:green;">
&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2010, Red Hat Inc. or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Inc.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  --&gt;
&lt;!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;

&lt;hibernate-configuration&gt;

    &lt;session-factory&gt;

        &lt;!-- Database connection settings --&gt;
        &lt;property name="connection.driver_class"&gt;org.h2.Driver&lt;/property&gt;
        &lt;property name="connection.url"&gt;jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE&lt;/property&gt;
        &lt;property name="connection.username"&gt;sa&lt;/property&gt;
        &lt;property name="connection.password"&gt;&lt;/property&gt;

        &lt;!-- JDBC connection pool (use the built-in) --&gt;
        &lt;property name="connection.pool_size"&gt;1&lt;/property&gt;

        &lt;!-- SQL dialect --&gt;
        &lt;property name="dialect"&gt;org.hibernate.dialect.H2Dialect&lt;/property&gt;

        &lt;!-- Disable the second-level cache  --&gt;
        &lt;property name="cache.provider_class"&gt;org.hibernate.cache.NoCacheProvider&lt;/property&gt;

        &lt;!-- Echo all executed SQL to stdout --&gt;
        &lt;property name="show_sql"&gt;true&lt;/property&gt;

        &lt;!-- Drop and re-create the database schema on startup --&gt;
        &lt;property name="hbm2ddl.auto"&gt;create&lt;/property&gt;

        &lt;!-- Names the annotated entity class --&gt;
        &lt;mapping class="org.hibernate.tutorial.annotations.Event"/&gt;

    &lt;/session-factory&gt;

&lt;/hibernate-configuration&gt;
</pre>
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>






  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">How Spring supports Hibernate Integration</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[<div style="font-size:1em;font-family:monospace;">Basically, in order to support Hibernate integration, Spring provides two key beans available in the org.springframework.orm.hibernate4 package:</div>]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[


<ul style="list-style-type:disc;margin-left:1.5em;">
  <li><b>LocalSessionFactoryBean</b>: creates a Hibernate’s <b>SessionFactory</b> which is injected into Hibernate-based DAO classes.</li>

<li><b>HibernateTransactionManager</b>: provides transaction support code for a <b>SessionFactory</b>. Programmers can use @Transactional annotation in DAO methods to avoid writing boiler-plate transaction code explicitly.
</li>
</ul>

<div style="margin-top:1.2em;">Let’s see how these concepts are implemented in a real project.</div>

    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>





  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Setting up Project</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[<div style="font-size:1em;font-family:monospace;">Let’s create a Spring MVC project using Spring Tool Suite IDE (See example: <a target="_blank" href="http://www.codejava.net/frameworks/spring/spring-mvc-beginner-tutorial-with-spring-tool-suite-ide">Spring MVC beginner tutorial with Spring Tool Suite IDE</a>), name it as SpringMvcHibernateXML.</div>]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="Setting up Database" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>Execute the following MySQL script in order to create a database named usersdb with a table named users:</div>

<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">CREATE TABLE `users` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(45) NOT NULL,
  `password` varchar(45) NOT NULL,
  `email` varchar(45) NOT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1</pre>

<div>Remember to insert some dummy data for testing purspose.</div>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="Project Structure" id="sourceContent1"
                      style="margin-top:2em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="margin-bottom:.6em;">The following screenshot shows final structure of the project:</div>


<div style="margin-bottom:.6em;">
<img src="/images/j2ee/Spring_MVC_Hibernate_project_structure.png" /></div>

<div><b>NOTE:</b> After completing this tutorial, you will create a project structure looks like the above.</div>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="Maven Dependencies" id="sourceContent1"
                      style="margin-top:2em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div>Declare versions for Java and Spring framework:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;properties&gt;
    &lt;java-version&gt;1.7&lt;/java-version&gt;
    &lt;org.springframework-version&gt;4.0.3.RELEASE&lt;/org.springframework-version&gt;
&lt;/properties&gt;</pre>

<div style="margin-top:1em;">Spring framework dependencies:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
    &lt;version&gt;${org.springframework-version}&lt;/version&gt;
&lt;/dependency&gt;
 
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
    &lt;version&gt;${org.springframework-version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
    &lt;version&gt;${org.springframework-version}&lt;/version&gt;
    &lt;type&gt;jar&lt;/type&gt;
    &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;


&lt;!-- Spring Security --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
    &lt;artifactId&gt;spring-security-core&lt;/artifactId&gt;
    &lt;version&gt;${org.springframework-version}&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
  &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;
  &lt;version&gt;3.2.3.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
  &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;
  &lt;version&gt;3.2.3.RELEASE&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
    &lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt;
    &lt;version&gt;3.1.3.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</pre>

<div style="margin-top:1em;">Hibernate ORM framework dependencies:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;dependency&gt;
    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
    &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
    &lt;version&gt;4.3.5.Final&lt;/version&gt;
&lt;/dependency&gt;</pre>

<div style="margin-top:1em;">Java Servlet and JSP dependencies (for compilation only):</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;dependency&gt;
    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
    &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
    &lt;version&gt;3.1.0&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;
    &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;
    &lt;version&gt;2.3.1&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</pre>

<div style="margin-top:1em;">JSTL dependency:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;dependency&gt;
    &lt;groupId&gt;jstl&lt;/groupId&gt;
    &lt;artifactId&gt;jstl&lt;/artifactId&gt;
    &lt;version&gt;1.2&lt;/version&gt;
&lt;/dependency&gt;</pre>

<div style="margin-top:1em;">Apache Commons DBCP dependency (for database connection pooling):</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;dependency&gt;
    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
    &lt;artifactId&gt;commons-dbcp2&lt;/artifactId&gt;
    &lt;version&gt;2.0&lt;/version&gt;
&lt;/dependency&gt;</pre>

<div style="margin-top:1em;">MySQL Connector Java dependency (JDBC driver for MySQL):</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;5.1.30&lt;/version&gt;
&lt;/dependency&gt;</pre>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>





  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Coding Model Class Configuring Hibernate Mapping</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="font-size:1.2em;"><b>Writing Model Class</b></div>

<div style="margin-top:.6em;">Create a new class named User.java in the package net.codejava.spring.model with the following source code:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">package net.codejava.spring.model;
 
public class User {
    private int id;
    private String username;
    private String password;
    private String email;
 
    // getters and setters are removed for brevity
 
}</pre>

<div>This model class is used to map the table users and the database to a plain-old Java object (POJO).</div>



<div style="font-size:1.2em;margin-top:2em;"><b>Creating Hibernate XML Mapping for the Model Class</b></div>

<div style="margin-top:.6em;">We need to create a Hibernate XML mapping file to map the <b>User</b> class to the <b>users</b> table in database. Create a <b>User.hbm.xml</b> file under the same package as the <b>User</b> class with the following XML code:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;
&lt;hibernate-mapping package="net.codejava.spring.model"&gt;
    &lt;class name="User" table="USERS"&gt;
        &lt;id name="id" column="USER_ID"&gt;
            &lt;generator class="native"/&gt;
        &lt;/id&gt;
        &lt;property name="username" column="USERNAME" /&gt;
        &lt;property name="password" column="PASSWORD" /&gt;
        &lt;property name="email" column="EMAIL" /&gt;
    &lt;/class&gt; 
&lt;/hibernate-mapping&gt;</pre>

<div><b>NOTE:</b> For more information about Hibernate XML mapping, see: Hibernate One-to-Many XML Mapping Example.</div>



<div style="font-size:1.2em;margin-top:2em;"><b>Creating Hibernate XML Configuration File</b></div>

<div style="margin-top:.6em;">Create hibernate.cfg.xml file under the root of classpath (right in src directory in the project) with the following XML code:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;
&lt;hibernate-configuration&gt;       
  &lt;session-factory&gt;
    &lt;property name="dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
    &lt;property name="show_sql"&gt;true&lt;/property&gt; 
    &lt;mapping resource="net/codejava/spring/model/User.hbm.xml"/&gt;
  &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;</pre>

<div>This Hibernate configuration file declares which resources need to be mapped (the User.hbm.xml file in this case).</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>






  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Coding DAO Classes</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="font-size:1.2em;"><b>Writing UserDAO interface</b></div>

<div style="margin-top:.6em;">Create a very simple DAO interface for the User class as the following UserDAO.java class:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">package net.codejava.spring.dao;
 
import java.util.List;
 
import net.codejava.spring.model.User;
 
public interface UserDAO {
    public List<User> list();
}</pre>

<div>This interface declares only one method list() that retrieves all users from the database.</div>


<div style="font-size:1.2em;margin-top:2em;"><b>Writing UserDAO implementation</b></div>

<div style="margin-top:.6em;">Here’s we code an implementation of the UserDAO interface, the UserDAOImpl class as follows:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">package net.codejava.spring.dao;
 
import java.util.List;
 
import net.codejava.spring.model.User;
 
import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.springframework.transaction.annotation.Transactional;
 
public class UserDAOImpl implements UserDAO {
    private SessionFactory sessionFactory;
 
    public UserDAOImpl(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
 
    @Override
    @Transactional
    public List<User> list() {
        @SuppressWarnings("unchecked")
        List<User> listUser = (List<User>) sessionFactory.getCurrentSession()
                .createCriteria(User.class)
                .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();
 
        return listUser;
    }
 
}</pre>

<div style="margin-bottom:.6em;">Notice in this class, a Hibernate’s SessionFactory object is injected via constructor by Spring. The list() method simply obtains the current session from the SessionFactory and queries for a list of all users in the database.</div>
<div>
Pay attention to the @Transactional annotation provided by Spring - when a method is annotated by this annotation, Spring will inject transaction support code into the method - thus we don’t have two write any code to handle transaction explicitly.</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>







  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Configuring Spring Application Context</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[Now, we come to the most important part that wires Spring and Hibernate together through some XML configuration. Open the <b>servlet-context.xml</b> file under <b>src/main/webapp/WEB-INF/spring/appServlet</b> and update its content as follows.]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<div style="font-size:1.2em;"><b>Configuring Spring MVC View Resolvers</b></div>

<div style="margin-top:.6em;">As usual, add the following declarations for Spring MVC annotation driven approach:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;mvc:annotation-driven /&gt;
&lt;mvc:resources mapping="/resources/**" location="/resources/" /&gt;
&lt;context:component-scan base-package="net.codejava.spring" /&gt;</pre>

<div style="margin-top:1em;">The following declaration for a common view resolver that converts logical view names to actual JSP pages:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
    &lt;property name="prefix" value="/WEB-INF/views/" /&gt;
    &lt;property name="suffix" value=".jsp" /&gt;
&lt;/bean&gt;</pre>




<div style="font-size:1.2em;margin-top:2em;"><b>Configuring DataSource Bean</b></div>

<div style="margin-top:.6em;">We use Apache Commons DBCP for a data source with connection pooling capability:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close"&gt;
    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;
    &lt;property name="url" value="jdbc:mysql://localhost:3306/usersdb"/&gt;
    &lt;property name="username" value="root"/&gt;
    &lt;property name="password" value="secret"/&gt;
&lt;/bean&gt;</pre>

<div style="margin-top:1em;"><b>NOTE:</b> Change database URL, username and password according to values in your environment. This data source will be injected to a SessionFactory bean below.</div>




<div style="font-size:1.2em;margin-top:2em;"><b>Configuring SessionFactory Bean</b></div>

<div style="margin-top:.6em;">Spring 4 provides support for Hibernate 4’s <b>SessionFactory</b> through a <b>LocalSessionFactoryBean</b> which is actually a <b>FactoryBean</b> that creates a Hibernate’s <b>SessionFactory</b> which is then injected to Hibernate-based DAO beans. Here’s the bean declaration:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;bean id="sessionFactory"
    class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
    &lt;property name="configLocation" value="classpath:hibernate.cfg.xml" /&gt;
&lt;/bean&gt;</pre>

<div style="margin-top:1em;">Note that this <b>LocalSessionFactoryBean</b> requires a <b>DataSource</b> bean which is declared previously. The <b>configLocation</b> property specifies where Hibernate configuration file will be searched for. In this case, it is the <b>hibernate.cfg.xml</b> file in the classpath.</div>




<div style="font-size:1.2em;margin-top:2em;"><b>Configuring TransactionManager Bean</b></div>

<div style="margin-top:.6em;">The following declaration is for automatic transaction support for the <b>SessionFactory</b>:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;tx:annotation-driven /&gt;
&lt;bean id="transactionManager"
    class="org.springframework.orm.hibernate4.HibernateTransactionManager"&gt;
    &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
&lt;/bean&gt;</pre>

<div style="margin-top:1em;">As mentioned in the <b>UserDAOImpl</b> class, we can specify transaction support by using the <b>@Transactional</b> annotation for transaction-aware methods.</div>




<div style="font-size:1.2em;margin-top:2em;"><b>Configuring DAO Bean</b></div>

<div style="margin-top:.6em;">And finally, configuration for our <b>UserDAOImpl</b> bean - pretty simple:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;bean id="userDao" class="net.codejava.spring.dao.UserDAOImpl"&gt;
    &lt;constructor-arg&gt;
        &lt;ref bean="sessionFactory" /&gt;
    &lt;/constructor-arg&gt;
&lt;/bean&gt;</pre>

<div style="margin-top:1em;">This bean will be then injected to a Spring MVC controller class which is described below.</div>
<div style="margin-top:.425em;"><b>NOTE:</b> For the whole content of Spring application context configuration file, see the corresponding file in the attached project.</div>

    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>









  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;"> Coding Controller Classes</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">Write our Spring MVC controller class (HomeController.java) under the net.codejava.spring package with the following code:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">package net.codejava.spring;
 
import java.util.List;
 
import net.codejava.spring.dao.UserDAO;
import net.codejava.spring.model.User;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
 
/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
     
    @Autowired
    private UserDAO userDao;
     
    @RequestMapping(value="/")
    public ModelAndView home() {
        List<User> listUsers = userDao.list();
        ModelAndView model = new ModelAndView("home");
        model.addObject("userList", listUsers);
        return model;
    }
     
}</pre>

<div style="margin-top:1em;">Here, an implementation of the <b>UserDAO</b> is injected automatically by Spring (because <b>@Autowired</b> annotation is used). Remember the <b>UserDAOImpl</b> bean we declared in the Spring application context configuration file previously? It is injected to this controller automatically so that the handling method home() can use it to list all users from the database. And eventually, the home() method returns a view named home which is resolved an actual JSP page which is described below.</div>

    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>









  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Coding View Page</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">Create a <b>home.jsp</b> under the <b>src/main/webapp/WEB-INF/views</b> directory with the following content:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;%@page contentType="text/html" pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;
 
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
        &lt;title&gt;Home&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div align="center"&gt;
            &lt;h1&gt;Contact List&lt;/h1&gt;
            &lt;table border="1"&gt;
                &lt;th&gt;No&lt;/th&gt;
                &lt;th&gt;Username&lt;/th&gt;
                &lt;th&gt;Email&lt;/th&gt;
                 
                &lt;c:forEach var="user" items="${userList}" varStatus="status"&gt;
                &lt;tr&gt;
                    &lt;td&gt;${status.index + 1}&lt;/td&gt;
                    &lt;td&gt;${user.username}&lt;/td&gt;
                    &lt;td&gt;${user.email}&lt;/td&gt;
                             
                &lt;/tr&gt;
                &lt;/c:forEach&gt;             
            &lt;/table&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</pre>

<div style="margin-top:1em;">This JSP page simply displays a list of users which is passed by the controller, by using JSTL tags.</div>

    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>









  

  <c:entry style="margin-top:2em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Testing the Application</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">Deploy the SpringMvcHibernateXML application on Tomcat server and access its default page via the following URL: <b>http://localhost:8080/SpringMvcHibernateXML</b>.
<br />
<br />
Congratulations! You have completed our first part of Spring-Hibernate Integration series. You can download the attached project and experiment yourself. A deployable WAR file is also provided for your convenience.</div>



    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>














  

  <c:entry style="margin-top:4em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Bootstrapping Spring Dispatcher Servlet</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[<div style="font-size:1em;font-family:monospace;">Instead of using XML in <b>web.xml</b> to register the Spring Dispatcher Servlet, we can move the bootstrap code into a Java class that implements the <b>ServletContainerInitializer</b> interface which is introduced from Servlet 3.0. Spring framework provides an implementation - the <b>SpringServletContainerInitializer</b> class which delegates a Servlet context to any implementations of the <b>WebApplicationInitializer</b> interface.</div>]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">Thus, let’s create <b>SpringWebAppInitializer</b> class to put our bootstrap code like the following:</div>

<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">package net.codejava.spring.config;
 
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration;
 
import org.springframework.web.WebApplicationInitializer;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.servlet.DispatcherServlet;
 
public class SpringWebAppInitializer implements WebApplicationInitializer {
 
    @Override
    public void onStartup(ServletContext servletContext) throws ServletException {
        AnnotationConfigWebApplicationContext appContext = new AnnotationConfigWebApplicationContext();
        appContext.register(ApplicationContextConfig.class);
         
        ServletRegistration.Dynamic dispatcher = servletContext.addServlet(
                "SpringDispatcher", new DispatcherServlet(appContext));
        dispatcher.setLoadOnStartup(1);
        dispatcher.addMapping("/");
         
    }
}</pre>

<div style="margin-top:1em;">Here, code in the onStartup() method is invoked when the Servlet container initializes the application. This method creates Spring Dispatcher Servlet dynamically to handle all requests coming through the application (denoted by the mapping “/”). The Spring Dispatcher Servlet takes an AnnotationConfigWebApplicationContext which is responsible for Spring-related initializations using annotations. The actual class that does the configurations is ApplicationContextConfig, which is covered in section 4 below.</div>
<div><b>NOTE:</b> The spring-web-VERSION.jar must present on the classpath for this bootstrap mechanism takes effect.</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  

  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Mapping Model Class using JPA Annotations</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">Instead of using Hibernate XML mapping for model class, we embed JPA annotations directly into the model class as follows (User.java):</div>

<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">package net.codejava.spring.model;
 
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
 
@Entity
@Table(name = "USERS")
public class User {
    private int id;
    private String username;
    private String password;
    private String email;
 
    @Id
    @GeneratedValue
    @Column(name = "USER_ID")
    public int getId() {
        return id;
    }
 
    // other getters and setters are hidden for brevity
 
}</pre>

<div style="margin-top:1em;">Note that if the attribute names of the model class are identical to column names in database, we don’t need to specify column mapping explicitly.</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  

  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Extending DAO Classes</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">Now we extend it for full CRUD operations. Hence, update the <b>UserDAO</b> interface as the following code:</div>

<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">package net.codejava.spring.dao;
 
import java.util.List;
 
import net.codejava.spring.model.User;
 
public interface UserDAO {
    public List<User> list();
     
    public User get(int id);
     
    public void saveOrUpdate(User user);
     
    public void delete(int id);
}</pre>

<div style="margin-top:2em;">Its implementation - UserDAOImpl class is then updated as the following code:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">package net.codejava.spring.dao;
 
import java.util.List;
 
import net.codejava.spring.model.User;
 
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
 
@Repository
public class UserDAOImpl implements UserDAO {
    @Autowired
    private SessionFactory sessionFactory;
 
    public UserDAOImpl() {
         
    }
     
    public UserDAOImpl(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
 
    @Override
    @Transactional
    public List<User> list() {
        @SuppressWarnings("unchecked")
        List<User> listUser = (List<User>) sessionFactory.getCurrentSession()
                .createCriteria(User.class)
                .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();
 
        return listUser;
    }
 
    @Override
    @Transactional
    public void saveOrUpdate(User user) {
        sessionFactory.getCurrentSession().saveOrUpdate(user);
    }
 
    @Override
    @Transactional
    public void delete(int id) {
        User userToDelete = new User();
        userToDelete.setId(id);
        sessionFactory.getCurrentSession().delete(userToDelete);
    }
 
    @Override
    @Transactional
    public User get(int id) {
        String hql = "from User where id=" + id;
        Query query = sessionFactory.getCurrentSession().createQuery(hql);
         
        @SuppressWarnings("unchecked")
        List<User> listUser = (List<User>) query.list();
         
        if (listUser != null && !listUser.isEmpty()) {
            return listUser.get(0);
        }
         
        return null;
    }
}</pre>
<div style="margin-top:2em;">We’ll see how the SessionFactory and TransationManager are configured in the next section below.</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  

  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Configuring Spring Application Context using Java-based Configuration</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">Now, we come to the most important and interesting part of the application, which configures beans definitions using Java code instead of XML. Create <b>ApplicationContextConfig</b> class with the following Spring annotations:</div>

<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">@Configuration
@ComponentScan("net.codejava.spring")
@EnableTransactionManagement
public class ApplicationContextConfig {
 
    // @Bean configurations go here...
 
}</pre>

<div style="margin-top:2em;">The @Configuration annotation is required for any Java-based configuration in Spring. The @ComponentScan annotation tells Spring to scan the specified package for annotated classes (the HomeController class in case of this tutorial). The @EnableTransactionManager annotation enables Spring’s annotation-driven transaction management capability. Let’s see how each component is configured using Java code.</div>



<div style="font-size:1.2em;margin-top:2em;"><b>Configuring Spring MVC View Resolvers</b></div>

<div style="margin-top:.6em;">The following method configures a view resolver that converts logical view names to actual JSP pages:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">@Bean(name = "viewResolver")
public InternalResourceViewResolver getViewResolver() {
    InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
    viewResolver.setPrefix("/WEB-INF/views/");
    viewResolver.setSuffix(".jsp");
    return viewResolver;
}</pre>



<div style="font-size:1.2em;margin-top:2em;"><b>Configuring DataSource Bean</b></div>

<div style="margin-top:.6em;">The following method configures a DataSource to be used with Hibernate’s SessionFactory:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">@Bean(name = "dataSource")
public DataSource getDataSource() {
    BasicDataSource dataSource = new BasicDataSource();
    dataSource.setDriverClassName("com.mysql.jdbc.Driver");
    dataSource.setUrl("jdbc:mysql://localhost:3306/usersdb");
    dataSource.setUsername("root");
    dataSource.setPassword("secret");
 
    return dataSource;
}</pre>
<div style="margin-top:1em;">
  <b>NOTE:</b><br />
<ul style="list-style-type:disc;margin-left:1.5em;">
  <li>We create a DataSource from Apache Commons DBCP for standard database connection pooling capability.</li>
  <li>Remember to change attributes of the DataSource according to your environment.</li>
</ul>
</div>
<div style="margin-top:.6em;">This data source will be injected to a Hibernate’s SessionFactory bean as below.</div>




<div style="font-size:1.2em;margin-top:2em;"><b>Configuring SessionFactory Bean</b></div>

<div style="margin-top:.6em;">The following method configures a SessionFactory bean:</div>

<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">@Autowired
@Bean(name = "sessionFactory")
public SessionFactory getSessionFactory(DataSource dataSource) {
 
    LocalSessionFactoryBuilder sessionBuilder = new LocalSessionFactoryBuilder(dataSource);
 
    sessionBuilder.addAnnotatedClasses(User.class);
 
    return sessionBuilder.buildSessionFactory();
}</pre>

<div style="margin-top:2em;"><b>NOTE:</b> For Java-based configuration, Spring provides the <b>LocalSessionFactoryBuilder</b> that facilitates the creation of Hibernate’s <b>SessionFactory</b>. For XML configuration, a <b>LocalSessionFactoryBean</b> is used instead. Notice this statement tells Hibernate to load the User class into its mapping definitions:</div>

<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">sessionBuilder.addAnnotatedClasses(User.class);</pre>

<div style="margin-top:1em;">If you want to add more classes:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">sessionBuilder.addAnnotatedClasses(User.class, Object.class);</pre>

<div style="margin-top:1em;">Or scan packages for annotated classes:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">sessionBuilder.scanPackages("net.codejava.model");</pre>

<div style="margin-top:1em;">In case you want to specify a specific Hibernate property:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">sessionBuilder.setProperty("hibernate.show_sql", "true");</pre>

<div style="margin-top:1em;">Or specify a set of Hibernate properties:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">sessionBuilder.addProperties(getHibernateProperties());</pre>

<div style="margin-top:1em;">Whereas the <b>getHibernateProperties()</b> method is implemented as followings:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">private Properties getHibernateProperties() {
    Properties properties = new Properties();
    properties.put("hibernate.show_sql", "true");
    properties.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
    return properties;
}</pre>

<div style="margin-top:1em;">This SessionFactory bean will be wired into the UserDAO bean below.</div>







<div style="font-size:1.2em;margin-top:2em;"><b>Configuring TransactionManager Bean</b></div>
<div style="margin-top:.6em;">The following method configures a HibernateTransactionManager for the SessionFactory:</div>

<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">@Autowired
@Bean(name = "transactionManager")
public HibernateTransactionManager getTransactionManager(
        SessionFactory sessionFactory) {
    HibernateTransactionManager transactionManager = new HibernateTransactionManager(
            sessionFactory);
 
    return transactionManager;
}</pre>

<div style="margin-top:1em;">By configuring a transaction manager, code in the DAO class doesn’t have to take care of transaction management explicitly. Instead, the @Transactional annotation is used to tell Spring automatically inserts transaction management code into the bytecode.</div>







<div style="font-size:1.2em;margin-top:2em;"><b>Configuring DAO Bean</b></div>
<div style="margin-top:.6em;">The following method configures a bean which is a UserDAO implementation:</div>

<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">@Autowired
@Bean(name = "userDao")
public UserDAO getUserDao(SessionFactory sessionFactory) {
    return new UserDAOImpl(sessionFactory);
}</pre>

<div style="margin-top:1em;">This UserDAO bean is injected into the controller class which is listed below.</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  

  

  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Updating Spring Controller Class</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">The HomeController class is now updated to handle CRUD operations of a list of users:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">package net.codejava.spring.controller;
 
import java.util.List;
 
import javax.servlet.http.HttpServletRequest;
 
import net.codejava.spring.dao.UserDAO;
import net.codejava.spring.model.User;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
 
/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
     
    @Autowired
    private UserDAO userDao;
 
    @RequestMapping("/")
    public ModelAndView handleRequest() throws Exception {
        List<User> listUsers = userDao.list();
        ModelAndView model = new ModelAndView("UserList");
        model.addObject("userList", listUsers);
        return model;
    }
     
    @RequestMapping(value = "/new", method = RequestMethod.GET)
    public ModelAndView newUser() {
        ModelAndView model = new ModelAndView("UserForm");
        model.addObject("user", new User());
        return model;      
    }
     
    @RequestMapping(value = "/edit", method = RequestMethod.GET)
    public ModelAndView editUser(HttpServletRequest request) {
        int userId = Integer.parseInt(request.getParameter("id"));
        User user = userDao.get(userId);
        ModelAndView model = new ModelAndView("UserForm");
        model.addObject("user", user);
        return model;      
    }
     
    @RequestMapping(value = "/delete", method = RequestMethod.GET)
    public ModelAndView deleteUser(HttpServletRequest request) {
        int userId = Integer.parseInt(request.getParameter("id"));
        userDao.delete(userId);
        return new ModelAndView("redirect:/");     
    }
     
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    public ModelAndView saveUser(@ModelAttribute User user) {
        userDao.saveOrUpdate(user);
        return new ModelAndView("redirect:/");
    }  
}</pre>

<div style="margin-top:2em;">This controller class is responsible for handling workflow of the application such as listing users, creating new, editing and deleting a user.</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  

  

  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Updating User Listing Page</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">The UserList.jsp uses <a target="_blank" href="http://www.codejava.net/java-ee/jstl/introduction-to-jstl">JSTL</a> to enumerate the list of users passed from the controller:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;%@page contentType="text/html" pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;
 
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
        &lt;title&gt;Home&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div align="center"&gt;
            &lt;h1&gt;Users List&lt;/h1&gt;
            &lt;h2&gt;&lt;a href="/new"&gt;New User&lt;/a&gt;&lt;/h2&gt;
             
            &lt;table border="1"&gt;
                &lt;th&gt;No&lt;/th&gt;
                &lt;th&gt;Username&lt;/th&gt;
                &lt;th&gt;Email&lt;/th&gt;
                &lt;th&gt;Actions&lt;/th&gt;
                 
                &lt;c:forEach var="user" items="${userList}" varStatus="status"&gt;
                &lt;tr&gt;
                    &lt;td&gt;${status.index + 1}&lt;/td&gt;
                    &lt;td&gt;${user.username}&lt;/td&gt;
                    &lt;td&gt;${user.email}&lt;/td&gt;
                    &lt;td&gt;
                        &lt;a href="/edit?id=${user.id}"&gt;Edit&lt;/a&gt;
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        &lt;a href="/delete?id=${user.id}"&gt;Delete&lt;/a&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;/c:forEach&gt;             
            &lt;/table&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</pre>

<div style="margin-top:1em;">This page lists all users and provides corresponding actions like create new, edit and delete.</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  

  

  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Coding User Form Page</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">The UserForm.jsp uses Spring’s form tags to map between the User object in the model and the HTML form:</div>
<pre style="font-size:.9em;border:solid 1px #D8D6D6;padding:1em; margin:.625em 0;background-color:#F7F7F7;">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;New or Edit User&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div align="center"&gt;
        &lt;h1&gt;New/Edit User&lt;/h1&gt;
        &lt;table&gt;
            &lt;form:form action="save" method="post" modelAttribute="user"&gt;
            &lt;form:hidden path="id"/&gt;
            &lt;tr&gt;
                &lt;td&gt;Username:&lt;/td&gt;
                &lt;td&gt;&lt;form:input path="username"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;Email:&lt;/td&gt;
                &lt;td&gt;&lt;form:input path="email"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;Password:&lt;/td&gt;
                &lt;td&gt;&lt;form:password path="password"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td colspan="2" align="center"&gt;
                    &lt;input type="submit" value="Save"&gt;
                &lt;/td&gt;
            &lt;/tr&gt;        
            &lt;/form:form&gt;
        &lt;/table&gt;
    &lt;/div&gt;
     
&lt;/body&gt;
&lt;/html&gt;</pre>

<div style="margin-top:1em;">This page is used when creating new user or editing an existing one.</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  

  

  <c:entry style="margin-top:1em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Final Project Structure</h1>]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">For your reference, the following screenshot shows final project structure in Eclipse/STS:</div>
<div style="margin-bottom:.6em;">
<img src="/images/j2ee/Spring_MVC_Hibernate_Java-based_project_structure.png" /></div>
<div style="margin-bottom:.6em;">Congratulations! You have completed our second part of the Spring-Hibernate integration series. For your convenience, we provide downloads for the project and a deployable WAR file in the attachments section.</div>
    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>















  <c:entry style="margin-top:6em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Unit test DAO layer</h1>
<b>Refer to:</b><br />
http://howtodoinjava.com/2015/04/17/how-you-should-unit-test-dao-layer/<br/><br/>
    ]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

    ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>




  

  

  <c:entry style="margin-top:6em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Bringing Thymeleaf and Natural Templates</h1>
<b>Refer to:</b><br />
https://looksok.wordpress.com/2014/06/28/spring-website-layouts-ssi-with-thymeleaf-templates/ <br />
https://doanduyhai.wordpress.com/2012/04/14/spring-mvc-part-iii-thymeleaf-integration <br />
http://blog.codeleak.pl/2013/11/thymeleaf-template-layouts-in-spring.html <br />
http://www.thymeleaf.org/doc/articles/layouts.html <br />
http://www.thymeleaf.org/doc/articles/petclinic.html <br/>
https://doanduyhai.wordpress.com/2012/04/14/spring-mvc-part-iv-thymeleaf-advanced-usage/ <br/>
http://stackoverflow.com/questions/18309864/secauthorize-and-secauthentication-annotations-dont-work<br />
http://www.thymeleaf.org/doc/articles/springsecurity.html<br />
<br/>
    ]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[After some years with JSP/JSTL and Apache Tiles I started discovering Thymeleaf for my Spring MVC applications. Thymeleaf is a really great view engine and it simplifies and speeds up the development despite that lack of good IntelliJ (vote here: <b>http://youtrack.jetbrains.com/issue/IDEABKL-6713</b>) support at the moment (there is an <b><a target="_blank" href="https://github.com/thymeleaf/thymeleaf-extras-eclipse-plugin">Eclipse plugin</a></b> though). While learning how to use Thymeleaf I investigated different possibilities of working with layouts.
<br /><br />
        Apart from the native fragment inclusion mechanism there are at least two options to work with layouts: Thymeleaf integration with Apache Tile and Thymeleaf Layout Dialect. Both seem to work fine, but inspired by this comment about a simple and custom option, I gave it a try. In this post I will show I created the solution.]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="Basic project configuration" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<div style="margin-top:.6em;">Some basic configuration steps will be needed:</div>
<ul style="list-style-type:disc;margin-left:1.5em;margin-top:.5em;">
<li>The <b>pom.xml</b> file will be modified in order to add the Thymeleaf dependencies to it and remove the JSP-related ones.</li>
<li>The <b>web.xml</b> file will be modified in order to remove JSP-related servlets and filters.</li>
</ul>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="pom.xml" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<!-- thymeleaf -->
<dependency>
    <groupId>org.thymeleaf</groupId>
    <artifactId>thymeleaf-spring4</artifactId>
    <version>3.0.0.ALPHA03</version>
    <scope>compile</scope>
    <optional>true</optional>
</dependency>
<dependency>
    <groupId>org.thymeleaf</groupId>
    <artifactId>thymeleaf</artifactId>
    <version>3.0.0.ALPHA03</version>
    <scope>compile</scope>
</dependency>
<dependency>
    <groupId>org.thymeleaf.extras</groupId>
    <artifactId>thymeleaf-extras-springsecurity4</artifactId>
    <version>3.0.0.ALPHA03</version>
</dependency>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="mvc-view-config.xml" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<bean id="templateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
    <property name="prefix" value="/WEB-INF/thymeleaf/" />
    <property name="suffix" value=".html" />
    <property name="templateMode" value="HTML5" />
    <!-- Template cache is set to false (default is true). -->
    <property name="cacheable" value="false" />
</bean>

<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
    <property name="templateResolver" ref="templateResolver" />
    <property name="additionalDialects">
        <set>
            <bean class="org.thymeleaf.extras.springsecurity4.dialect.SpringSecurityDialect" />
        </set>
    </property>
</bean>

<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    <!--<property name="contentNegotiationManager" ref="cnManager"/>-->
    <property name="viewResolvers">
        <list>
            <!-- Used here for 'xml' and 'atom' views  -->
            <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
                <property name="order" value="1"/>
            </bean>
            <!-- Used for Thymeleaf views  -->
            <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
                <property name="templateEngine" ref="templateEngine" />
                <property name="order" value="2"/>
            </bean>
        </list>
    </property>
</bean>





<mvc:interceptors>
    <bean class="**.ThymeleafLayoutInterceptor" />
</mvc:interceptors>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="ThymeleafLayoutInterceptor.java" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[public class ThymeleafLayoutInterceptor extends HandlerInterceptorAdapter {

    private static final String DEFAULT_LAYOUT = "layouts/default";
    private static final String DEFAULT_VIEW_ATTRIBUTE_NAME = "view";

    private String defaultLayout = DEFAULT_LAYOUT;
    private String viewAttributeName = DEFAULT_VIEW_ATTRIBUTE_NAME;

    public void setDefaultLayout(String defaultLayout) {
        this.defaultLayout = defaultLayout;
    }

    public void setViewAttributeName(String viewAttributeName) {
        this.viewAttributeName = viewAttributeName;
    }

    @Override
    public void postHandle(
        HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 
                                          throws Exception {
        if (modelAndView == null || !modelAndView.hasView()) {
            return;
        }
        String originalViewName = modelAndView.getViewName();
        if (isRedirectOrForward(originalViewName)) {
            return;
        }
        String layoutName = getLayoutName(handler);
        modelAndView.setViewName(layoutName);
        modelAndView.addObject(this.viewAttributeName, originalViewName);
    }

    private boolean isRedirectOrForward(String viewName) {
        return viewName.startsWith("redirect:") || viewName.startsWith("forward:");
    }

    private String getLayoutName(Object handler) {
        HandlerMethod handlerMethod = (HandlerMethod) handler;
        Layout layout = getMethodOrTypeAnnotation(handlerMethod);
        if (layout == null) {
            return this.defaultLayout;
        } else {
            return layout.value();
        }
    }

    private Layout getMethodOrTypeAnnotation(HandlerMethod handlerMethod) {
        Layout layout = handlerMethod.getMethodAnnotation(Layout.class);
        if (layout == null) {
            return handlerMethod.getBeanType().getAnnotation(Layout.class);
        }
        return layout;
    }
}]]>
    </c:sourceContent>

    <c:sourceContent type="" title="Layout.java" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Layout {
    String value() default "";
}]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<ul style="list-style-type:disc;margin-left:1.5em;margin-top:.5em;">
<li>The <b>Thymeleaf template resolver</b> that will be in charge of reading the template files to be processed. For this application we will use a <b>ServletContextTemplateResolver.</b></li>
<li>The Thymeleaf template engine instance, of class <b>SpringTemplateEngine</b>.</li>
<li>The Thymeleaf view resolver, a <b>ThymeleafViewResolver</b> instance implementing Spring’s <b>org.springframework.web.servlet.ViewResolver</b> interface. This bean will substitute the original <b>InternalResourceViewResolver</b> bean which enabled JSP support in the original application.</li>
</ul>
    ]]>
    </c:sourceContent>





    <c:sourceContent type="html" title="Creating the layout file" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
In <b>WEB-INF/views</b> directory I <b>created a layouts folder</b> where I placed the my first layout file called default.html:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<!DOCTYPE html>
<html 
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org"
      xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"> 
<head>...</head>
<body>
<div th:raplace="fragments/header :: header">
    Header
</div>
<div th:replace="${view} :: content">
    Content
</div>
<div th:replace="fragments/footer :: footer">
    Footer
</div>
</body>
</html>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
The <b>${view}</b> variable will contain the view name returned by the @Controller and the content fragment from <b>${view}</b> file will be placed here.

    ]]>
    </c:sourceContent>







    <c:sourceContent type="html" title="Creating the view file" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
I edited <b>WEB-INF/views/homeNotSignedIn.html</b> and I defined the content fragment like this:
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<!DOCTYPE html>
<html
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org"
      xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"> 
<head>...</head>
<body>
<div class="container" th:fragment="content">
    <!-- /* Handle the flash message */-->
    <th:block th:if="${message != null}">
        <div th:replace="fragments/alert :: alert (type=${#strings.toLowerCase(message.type)}, message=${message.message})">&nbsp;</div>
    </th:block>
    <p>
        Hello <span sec:authentication="name">miquel</span>!
        Welcome to the Spring MVC Quickstart application!
    </p>
</div>
</body>
</html>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
So the only change was defining the fragment named content and removing duplicated fragment inclusions. No additional changes are required. The @Controller returns the original view name, as it was before:    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
@Controller
class HomeController {  
 @RequestMapping(value = "/", method = RequestMethod.GET)
 String index(Principal principal) {
  return principal != null ? "home/homeSignedIn" : "home/homeNotSignedIn";
 }
}
    ]]>
    </c:sourceContent>




    <c:sourceContent type="html" title="Convert JSP page to Thymeleaf" id="sourceContent1"
                     style="margin-top:5.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<ul style="list-style-type:disc;margin-left:1.5em;margin-top:.5em;">
<li>Rename *.jsp to *.html.</li>
<li>Remove all <b>&lt;%@ taglib %&gt;</b> directives as we do not need any JSP tag libraries</li>
<li>Replace the <b>jsp:include</b> tags which add head, header and footer to the page with tags containing the thymeleaf attributes <b>th:substituteby</b> or <b>th:include</b>. Those page <b>fragments</b> have been kept in the fragments folder and converted to thymeleaf as well</li>
</ul>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<!-- ownersList.html -->
<!DOCTYPE html> 
<html lang="en"> 
  <head th:substituteby="fragments/headTag :: headTag">
 
    <!-- ============================================================================ -->
    <!-- This <head> is only used for static prototyping purposes (natural templates) -->
    <!-- and is therefore entirely optionl, as this markup fragment will be included  -->
    <!-- from "fragments.html" at runtime.                                            -->
    <!-- ============================================================================ --> 
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <title>PetClinic :: a Spring Framework demonstration</title>
 
    <link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.0/css/bootstrap.min.css"
      th:href="@{/webjars/bootstrap/2.3.0/css/bootstrap.min.css}" rel="stylesheet" />
    <link href="../../../resources/css/petclinic.css"
      th:href="@{/resources/css/petclinic.css}" rel="stylesheet" />
 
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"
      th:src="@{/webjars/jquery/1.9.0/jquery.js}"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js"
      th:src="@{/webjars/jquery-ui/1.9.2/js/jquery-ui-1.9.2.custom.js}"></script>
 
    <link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/themes/smoothness/jquery-ui.css"
      th:href="@{/webjars/jquery-ui/1.9.2/css/smoothness/jquery-ui-1.9.2.custom.css}"
      rel="stylesheet" /> 
  </head> 
  <body> 
    <div class="container"> 
      <div th:include="fragments/bodyHeader" th:remove="tag"> 
        <!-- =========================================================================== -->
        <!-- This div is only used for static prototyping purposes (natural templates)   -->
        <!-- and is therefore entirely optionl, as this markup fragment will be included -->
        <!-- from "fragments.html" at runtime.                                           -->
        <!-- =========================================================================== --> 
        <img th:src="@{/resources/images/banner-graphic.png}"
          src="../../../resources/images/banner-graphic.png"/> 
        <div class="navbar" style="width: 601px;">
          <div class="navbar-inner">
            <ul class="nav">
              <li style="width: 100px;">
                <a href="../welcome.html" th:href="@{/}">
                  <i class="icon-home"></i>Home
                </a>
              </li>
              <li style="width: 130px;">
                <a href="../owners/findOwners.html" th:href="@{/owners/find.html}">
                  <i class="icon-search"></i>Find owners
                </a>
              </li>
              <li style="width: 140px;">
                <a href="../vets/vetList.html" th:href="@{/vets.html}">
                  <i class="icon-th-list"></i>Veterinarians
                </a>
              </li>
              <li style="width: 90px;">
                <a href="../exception.html" th:href="@{/oups.html}"
                  title="trigger a RuntimeException to see how it is handled">
                  <i class="icon-warning-sign"></i>Error
                </a>
              </li>
              <li style="width: 80px;">
                <a href="#" title="not available yet. Work in progress!!">
                  <i class=" icon-question-sign"></i>Help
                </a>
              </li>
            </ul>
          </div>
        </div> 
      </div> 
      <!-- ... --> 
      <table th:substituteby="fragments/footer :: footer" class="footer"> 
        <!-- =========================================================================== -->
        <!-- This table section is only used for static prototyping purposes (natural    -->
        <!-- templates) and is therefore entirely optionl, as this markup fragment will  -->
        <!-- be included from "fragments.html" at runtime.                               -->
        <!-- =========================================================================== --> 
        <tr>
          <td></td>
          <td align="right">
            <img src="../../../resources/images/springsource-logo.png"
              th:src="@{/resources/images/springsource-logo.png}"
              alt="Sponsored by SpringSource" />
          </td>
        </tr> 
      </table> 
    </div> 
  </body> 
</html>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
Note how our ownersList.html contains more code at its head, header and footer sections than the original JSP file. Doing it this way is merely optional, and its only aim is to allow the ownersList.html Thymeleaf-enabled template to display statically as a prototype (something nearly impossible with JSP).
<br /><br />
Is this additional code worth it? If you need or want to use design prototypes, indeed! You will see clearly how much a difference this is at the last section of this article. And anyway… remember this prototyping code is optional!
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<!-- ownersList.html -->
<h2>Owners</h2>
 
<table class="table table-striped">
  <thead>
    <tr>
      <th style="width: 150px;">Name</th>
      <th style="width: 200px;">Address</th>
      <th>City</th>
      <th>Telephone</th>
      <th style="width: 100px;">Pets</th>
    </tr>
  </thead>
  <tbody>
    <tr th:each="owner : ${selections}">
      <td>
        <a href="ownerDetails.html"
          th:href="@{|/owners/${owner.id}|}"
          th:text="|${owner.firstName} ${owner.lastName}|">Mary Smith</a>
      </td>
      <td th:text="${owner.address}">45, Oxford Street</td>
      <td th:text="${owner.city}">Cambridge</td>
      <td th:text="${owner.telephone}">555-555-555</td>
      <td>
        <span th:each="pet : ${owner.pets}" th:text="${pet.name}" th:remove="tag">
          Rob
        </span>
      </td>
    </tr>
  </tbody>
</table>
    ]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
In the code above you can see how we used HTML code instead of a collection of JSP tags from an external library. Not only this makes our code much clearer and more readable, but also more standard and understandable by browsers, which will allow us to use this template as a static prototype. Again, we will see the advantages of this in the next section.
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  

  <c:entry style="margin-top:6em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Spring Security hello world example</h1>
<b>Refer to:</b><br />
http://www.mkyong.com/spring-security/spring-security-hello-world-example/<br />
http://kh-yiu.blogspot.jp/2012/12/spring-mvc-security-custom.html<br/><br/>
    ]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[In this section, we will show you how to integrate Spring Security with a Spring MVC web application to secure a URL access. After implementing Spring Security, to access the content of an “admin” page, users need to key in the correct “username” and “password”.]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="Directory Structure" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<img src="/images/j2ee/spring-security-custom-login-xml-directory.png" style="max-width:100%" />
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="Spring Security Dependencies" id="sourceContent1"
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[
<!-- Spring Security -->
<dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-web</artifactId>
  <version>${spring.security.version}</version>
</dependency>

<dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-config</artifactId>
  <version>${spring.security.version}</version>
</dependency>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Spring MVC Web Application" id="sourceContent1"
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[

<div>A simple controller :</div>
<ul style="list-style-type:decimal;margin:.5em 0; margin-left:2.5em;color:gray;">
  <li>login-page=”/login” – The page to display the custom login form</li>
<li>authentication-failure-url=”/login?error” – If authentication failed, forward to page /login?error</li>
<li>logout-success-url=”/login?logout” – If logout successful, forward to view /logout</li>
<li>username-parameter=”username” – The name of the request which contains the “username”. In HTML, this is the name of the input text.</li>
<li>&lt;csrf/&gt; – Enable the Cross Site Request Forgery (CSRF) protection, refer to this link. In XML, by default, CSRF protection is disabled.</li>
</ul>

<div>
 Normally, we don’t involve in the authentication like login or logout processing, let Spring handle it, we just handle the successful or failed page to display.</div>

    ]]>
    </c:sourceContent>

    <c:sourceContent type="" title="spring-security.xml (Should be migrated to spring-dispatcher-servlet.xml)" id="sourceContent1"
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:red;font-style:italic;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/security
  http://www.springframework.org/schema/security/spring-security-3.2.xsd">

  <http auto-config="true"  use-expressions="false">
    <intercept-url pattern="/admin**" access="ROLE_USER" />
    <form-login 
        login-page="/login" 
        default-target-url="/welcome" 
        login-processing-url="/j_spring_security_check"
      authentication-failure-url="/login?error" 
      username-parameter="username"
      password-parameter="password" />
    <logout logout-success-url="/login?logout" logout-url="/j_spring_security_logout" />
    <!-- enable csrf protection -->
    <csrf/>
  </http>

  <authentication-manager>
    <authentication-provider>
      <user-service>
      <user name="mkyong" password="123456" authorities="ROLE_USER" />
      </user-service>
    </authentication-provider>
  </authentication-manager>

</beans:beans>]]>
    </c:sourceContent>
    <c:sourceContent type="" title="mvc-dispatcher-servlet.xml" id="sourceContent1"
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;font-style:italic;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"  
  xmlns:security="http://www.springframework.org/schema/security"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security-4.0.xsd">

  <context:component-scan base-package="com.mkyong.*" />

  <!-- To prevent browser's back button on displaying secured resource after logout -->
  <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    <property name="cacheSeconds" value="0" />
  </bean>
  
  <bean
    class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/pages/" />
    <property name="suffix" value=".jsp" />
  </bean>


  <security:http pattern="/resources/**" security="none"/>
  <!-- if you will apply security="none" then no csrf token will be generated. 
        page will not pass through security filter. Use role ANONYMOUS. -->
  <!-- <security:http pattern="/login" security="none"/> -->

  <security:http auto-config="true" use-expressions="true"> 
     <security:form-login login-page="/login" 
              default-target-url="/welcome" 
              authentication-failure-url="/login?error"
              username-parameter="username"
              password-parameter="password" /> 
      <security:intercept-url pattern="/login" access="isAnonymous()" />
      <security:intercept-url pattern="/**"  access="isAuthenticated()" />
      <security:logout logout-success-url="/login?logout" logout-url="/j_spring_security_logout" />
    <security:csrf/>
  </security:http>
  
  <security:authentication-manager>
    <security:authentication-provider>    
      <security:user-service>
        <security:user name="user1" password="demo" authorities="ROLE_REGISTERED_USER" />
        <security:user name="user2" password="demo" authorities="ROLE_FREE_USER" />
      </security:user-service>
    </security:authentication-provider>
  </security:authentication-manager>


  <security:authentication-manager>
     <security:authentication-provider
          user-service-ref="myUserDetailService">
          <!--password-encoder hash="md5" /-->
     </security:authentication-provider>
  </security:authentication-manager>

</beans>]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;font-style:italic;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[
<ul style="list-style-type:disc;margin-left:1.5em;margin-bottom:1em;">
  <li><b>use-expression="true":</b> allows us to use expression such as hasRole(...), hasAnyRole(...), isAuthenticated( ), and so on, to define access rules</li>
  <li><b>login-page="/login.go":</b> defines the URL at which the login page is located</li>
  <li><b>default-target-url="/home.go":</b> defines the URL toward which the user will be redirected once he successfully logged in</li>
  <li><b>authentication-failure-url="/login.go?errorLogin":</b> defines the URL toward which the user will be redirected when the login fails. In our example, we redirect the user to the login page with an additional "errorLogin" parameter in the URL. This existence of this parameter will be checked in a Spring Controller class. If it exists, an attribute will be added to the model before returning the view to be displayed. Within the JSP page, we check this model attribute to eventually display an error message. </li>
  <li><b>&lt;security:intercept-url pattern="/home.go" access="hasRole('ADMIN')" /&gt;</b>: indicates that the "/home.go" URL is subject to access rules.</li>
  <li><b>&lt;security:logout logout-success-url="/home.go" /&gt;</b>: defines the URL at which the user is redirected after he logged out.</li>
</ul>
<div>To integrate Spring security with a Spring MVC web application, just declares <b>DelegatingFilterProxy</b> as a servlet filter to intercept any incoming request.</div>]]>
    </c:sourceContent>
    <c:sourceContent type="" title="web.xml" id="sourceContent1"
                     style="margin-top:0.3em;"
                     titleStyle="padding-left:0;font-style:italic;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[<web-app id="WebApp_ID" version="2.4"
  xmlns="http://java.sun.com/xml/ns/j2ee" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
  http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

  <display-name>Spring MVC Application</display-name>

  <!-- Spring MVC -->
  <servlet>
    <servlet-name>mvc-dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet
    </servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>mvc-dispatcher</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener
    </listener-class>
  </listener>

  <!-- Loads Spring Security config file -->
  <!--context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      /WEB-INF/spring-security.xml
    </param-value>
  </context-param-->

  <!-- Spring Security -->
  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy
    </filter-class>
  </filter>

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

</web-app>]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:.5em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[

<div>In above congratulation, the /admin and sub-folders of it are all password protected.
<br />
<b>Cross Site Request Forgery (CSRF) Protection</b>
<br />
If CSRF is enabled, you have to include a _csrf.token in the page you want to login or logout. Refer to below login.jsp and admin.jsp (logout form). Otherwise, both login and logout function will be failed.
<br />
<b>Password in clear-text?</b>
<br />
A pretty bad idea, you should always hash the password with SHA algorithm, this tutorial show you how – Spring Security password hashing example.</div>

    ]]>
    </c:sourceContent>
    
    <c:sourceContent type="" title="login.jsp" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;font-style:italic;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<html>
<head>
<title>Login Page</title>
<style>
.error {
  padding: 15px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  border-radius: 4px;
  color: #a94442;
  background-color: #f2dede;
  border-color: #ebccd1;
}

.msg {
  padding: 15px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  border-radius: 4px;
  color: #31708f;
  background-color: #d9edf7;
  border-color: #bce8f1;
}

#login-box {
  width: 300px;
  padding: 20px;
  margin: 100px auto;
  background: #fff;
  -webkit-border-radius: 2px;
  -moz-border-radius: 2px;
  border: 1px solid #000;
}
</style>
</head>
<body onload='document.loginForm.username.focus();'>
  <h1>Spring Security Custom Login Form (XML)</h1>
  <div id="login-box">
    <h2>Login with Username and Password</h2>
    <c:if test="${not empty error}">
      <div class="error">${error}</div>
    </c:if>
    <c:if test="${not empty msg}">
      <div class="msg">${msg}</div>
    </c:if>

    <form name='loginForm'
      action="<c:url value='j_spring_security_check' />" method='POST'>
      <table>
      <tr>
        <td>User:</td>
        <td><input type='text' name='username' value=''></td>
      </tr>
      <tr>
        <td>Password:</td>
        <td><input type='password' name='password' /></td>
      </tr>
      <tr>
        <td colspan='2'><input name="submit" type="submit"
          value="submit" /></td>
      </tr>
      </table>
      <input type="hidden" name="${_csrf.parameterName}"
      value="${_csrf.token}" />
    </form>
  </div>
</body>
</html>]]>
    </c:sourceContent>
    
    <c:sourceContent type="" title="hello.jsp" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;font-style:italic;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[<%@page session="false"%>
<%@taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
<html>
<body>
<sec:authentication property="name" />
<sec:authentication property="authorities" />
<br />
<sec:authorize access="hasRole('ADMIN')">
  User has ADMIN role
</sec:authorize>
<br />
  <h1>Title : ${title}</h1> 
  <h1>Message : ${message}</h1> 
</body>
</html>]]>
    </c:sourceContent>
    
    <c:sourceContent type="" title="admin.jsp + logout" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;font-style:italic;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@page session="true"%>
<html>
<body>
  <h1>Title : ${title}</h1>
  <h1>Message : ${message}</h1>

  <c:url value="/j_spring_security_logout" var="logoutUrl" />

  <!-- csrt for log out-->
  <form action="${logoutUrl}" method="post" id="logoutForm">
    <input type="hidden" 
    name="${_csrf.parameterName}"
    value="${_csrf.token}" />
  </form>
  
  <script>
    function formSubmit() {
      document.getElementById("logoutForm").submit();
    }
  </script>

  <c:if test="${pageContext.request.userPrincipal.name != null}">
    <h2>
      Welcome : ${pageContext.request.userPrincipal.name} | <a
        href="javascript:formSubmit()"> Logout</a>
    </h2>
  </c:if>

</body>
</html>]]>
    </c:sourceContent>
    
    <c:sourceContent type="" title="HelloController.java" id="sourceContent1"
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;font-style:italic;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[package com.mkyong.web.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class HelloController {

  @RequestMapping(value = { "/", "/welcome**" }, method = RequestMethod.GET)
  public ModelAndView welcomePage() {
    ModelAndView model = new ModelAndView();
    model.addObject("title", "Spring Security Custom Login Form");
    model.addObject("message", "This is welcome page!");
    model.setViewName("hello");
    return model;
  }

  @RequestMapping(value = "/admin**", method = RequestMethod.GET)
  public ModelAndView adminPage() {
    ModelAndView model = new ModelAndView();
    model.addObject("title", "Spring Security Custom Login Form");
    model.addObject("message", "This is protected page!");
    model.setViewName("admin");

    return model;
  }

  //Spring Security see this :
  @RequestMapping(value = "/login", method = RequestMethod.GET)
  public ModelAndView login(
    @RequestParam(value = "error", required = false) String error,
    @RequestParam(value = "logout", required = false) String logout) {

    ModelAndView model = new ModelAndView();
    if (error != null) {
      model.addObject("error", "Invalid username and password!");
    }

    if (logout != null) {
      model.addObject("msg", "You've been logged out successfully.");
    }
    model.setViewName("login");

    return model;
  }
}]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="Demo" id="sourceContent1"
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;font-style:italic;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
  <![CDATA[

<div>That’s all, but wait… where’s the login form? No worry, if you do not define any custom login form, Spring will create a simple login form automatically. Read this “<a target="_blank" href="http://www.mkyong.com/spring-security/spring-security-form-login-example/">Spring Security form login example</a>” to understand how to create a custom login form in Spring Security.

</div>

<h4 style="font-size:1em;margin:.5em 0;margin-bottom:0em;font-weight:bold;">1. Welcome Page – http://localhost:8080/spring-security-helloworld-xml/welcome</h4>
<div>
  <img src="/images/j2ee/spring-security-helloworld-welcome.png" style="max-width:100%" /> 
</div>

<h4 style="font-size:1em;margin:.5em 0;margin-bottom:0em;font-weight:bold;">2. Try to access /admin page, Spring Security will intercept the request and redirect to /spring_security_login, and a predefined login form is displayed.</h4>
<div>
  <img src="/images/j2ee/spring-security-helloworld-login.png" style="max-width:100%" /> 
</div>

<h4 style="font-size:1em;margin:.5em 0;margin-bottom:0em;font-weight:bold;">3. If username and password is incorrect, error messages will be displayed, and Spring will redirect to this URL /spring_security_login?login_error.

</h4>
<div>
  <img src="/images/j2ee/spring-security-helloworld-login-error.png" style="max-width:100%" /> 
</div>

<h4 style="font-size:1em;margin:.5em 0;margin-bottom:0em;font-weight:bold;">4. If username and password are correct, Spring will redirect the request to the original requested URL and display the page.</h4>
<div>
  <img src="/images/j2ee/spring-security-helloworld-admin.png" style="max-width:100%" /> 
</div>
  ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
]]>
      </c:comment1>
    </c:comment>
  </c:entry>





  <c:entry style="margin-top:6em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">Spring Security (DAO Authentication)</h1>
    ]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="UserEntity" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
@Entity
@Table(name="USERS")
public class UserEntity implements Serializable {
    private String id;
    private String name;
    private String passwd;

    @Enumerated(EnumType.STRING)
    private UserStatus status;
    
    @ManyToMany
    @JoinTable(name="USERS_ROLES_REFERENCES",
               joinColumn=@JoinColumn(name="USER_ID"),
               inverseJoinColumns=@JoinColumn(name="ROLE_ID"))
    private Collection<RoleEntity> listOfRoles = new ArrayList<RoleEntity>();
    private Date createDate;

    public UserEntity() {}
}
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="RoleEntity" id="sourceContent1"
      style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
@Entity
@Table(name="ROLES")
public class RoleEntity implements Serializable {
    private String id;
    private String name;
    private String passwd;
    private String status;
    private Date createDate;

    @ManyToMany(mappedBy="listOfRoles")
    private Collection<UserEntity> listOfUsers = new ArrayList<UserEntity>();

    public RoleEntity() {}
}
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="UserStatus" id="sourceContent1"
      style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
public enum UserStatus  {
    ACTIVE,
    LOCKED
}
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="IUserDAO" id="sourceContent1"
      style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
...
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="UserDaoImpl" id="sourceContent1"
      style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
@Repository
public class UserDaoImpl implements IUserDAO {
    @Override
    public UserEntity findByName(String username) {
        Criteria criteria = sessionFactory.getCurrentSession().createCriteria(UserEntity.class);
        
        criteria.add(Restrictions.eq("name", username));

        return (UserEntity)criteria.uniqueResult();
    }
}
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="UserDetailsImpl" id="sourceContent1"
      style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
import java.util.Collection;
import java.util.HashSet;
 
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
 
public class UserDetailsImpl implements UserDetails{
 private static final long serialVersionUID = -6509897037222767090L;
  
 private Collection<grantedauthority> authorities = new HashSet<grantedauthority>();
 private String password;
 private String username;
  
 public UserDetailsImpl(String username, String password, Collection<grantedauthority> authorities){
  this.username = username; 
  this.password = password;
  this.authorities = authorities;
 }
 
 public Collection getAuthorities() {
  return this.authorities;
 }
 
 public String getPassword() {
  return this.password;
 }
 
 public String getUsername() {
  return this.username;
 }
 
 public boolean isAccountNonExpired() {
  return true;
 }
 
 public boolean isAccountNonLocked() {
  return true;
 }
 
 public boolean isCredentialsNonExpired() {
  return true;
 }
 
 public boolean isEnabled() {
  return true;
 }
 
}

    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="UserDetailServiceImpl" id="sourceContent1"
      style="margin-top:1em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
/*
  This class will be used by Spring Security to pickup users and authenticate them internally
*/
@Service("userDetailService")
public class UserDetailServiceImpl 
          implements org.springframework.security.core.userdetails.UserDetailService {

     // just to emulate user data and credentials retrieval from a DB, or whatsoever authentication service
     private static Map<String, UserDetails> userRepository = new HashMap<String, UserDetails>();
      
     static{
        GrantedAuthority authorityAdmin = new GrantedAuthorityImpl("ADMIN");
        GrantedAuthority authorityGuest = new GrantedAuthorityImpl("GUEST");
         
        Set<GrantedAuthority> authorities1 = new HashSet<GrantedAuthority>();
        authorities1.add(authorityAdmin);
        UserDetails user1 = new UserDetailsImpl("user1", "password1", authorities1);
        userRepository.put("user1", user1);
         
        Set<GrantedAuthority> authorities2 = new HashSet<GrantedAuthority>();
        authorities2.add(authorityGuest);
        UserDetails user2 = new UserDetailsImpl("user2", "password2", authorities2);
        userRepository.put("user2", user2);
         
        Set<GrantedAuthority> authorities3 = new HashSet<GrantedAuthority>();
        authorities3.add(authorityAdmin);
        authorities3.add(authorityGuest);
        UserDetails user3 = new UserDetailsImpl("user3", "password3", authorities3);
        userRepository.put("user3", user3);
     }
      
     public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        UserDetails matchingUser = userRepository.get(username);         
        if(matchingUser == null)
            throw new UsernameNotFoundException("Wrong username or password");         
        return matchingUser;
     }
}

    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="Update spring-security.xml (Should be migrated to spring-dispatcher-servlet.xml)" id="sourceContent1"
      style="margin-top:1em;"
                     titleStyle="padding-left:0;color:red;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<beans:bean id="daoAuthenticationProvider"
      class="org.springframework.security.authectication.dao.DaoAuthenticationProvider">
      <beans:property name="userDetailsService" ref="userDetailsService" />
</beans:bean>

<beans:bean id="authenticationManager" 
      class="org.springframework.security.authentication.ProviderManager">
      <beans:property name="providers">
          <beans:list>
              <beans:ref local="daoAuthenticationProvider" />
          </beans:list>
      </beans:property>
</beans:bean>

<authentication-manager>
    <authentication-provider user-service-ref="userDetailsService">
        <password-encoder hash="md5" />
    </authentication-provider>
</authentication-manager>
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
]]>
      </c:comment1>
    </c:comment>
  </c:entry>





  <c:entry style="margin-top:3em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">OAuth (Basic Authentication)</h1>
    ]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="Update spring-security.xml" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<security:http pattern="/resources/**" security="none"/>
<security:http pattern="/login" security="none"/>
<security:http auto-config="true" use-expressions="true" create-session="stateless">
    <security:intercept-url pattern="/**" access="isAuthenticated()" />
    <!-- Add Http Basic -->
    <security:http-basic />
</security:http>

<security:authentication-manager>
    <security:authentication-provider>
        <security:user-service>
            <security:user name="user1" password="demo" authorities="ROLE_REGISTERED_USER" />
            <security:user name="user2" password="demo" authorities="ROLE_FREE_USER" />
        </security:user-service>
    </security:authentication-provider>
</security:authentication-manager>
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
]]>
      </c:comment1>
    </c:comment>
  </c:entry>





  <c:entry style="margin-top:3em;">
    <c:title><![CDATA[<h1 style="font-size:2.1em;color:blue;">OAuth2.0 (Token Authentication)</h1>
    ]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="dependencies" id="sourceContent1"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<properties>
  <spring.version>4.0.7.RELEASE</spring.version>
  <log4j.version>1.2.17</log4j.version>
  <jdk.version>1.8</jdk.version>
  <context.path>SpringRestSecurityOauth</context.path>
  <spring.security.version>3.2.5.RELEASE</spring.security.version>
</properties>


<!-- log4j -->
<dependency>
  <groupId>log4j</groupId>
  <artifactId>log4j</artifactId>
  <version>${log4j.version}</version>
</dependency>

<!-- Spring Security -->
<dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-web</artifactId>
  <version>${spring.security.version}</version>
</dependency>
<dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-config</artifactId>
  <version>${spring.security.version}</version>
</dependency>
<dependency>
  <groupId>org.springframework.security.oauth</groupId>
  <artifactId>spring-security-oauth2</artifactId>
  <version>1.0.0.RELEASE</version>
</dependency>
<dependency>
  <groupId>com.google.code.gson</groupId>
  <artifactId>gson</artifactId>
  <version>2.2.2</version>
</dependency>
<dependency>
  <groupId>org.codehaus.jackson</groupId>
  <artifactId>jackson-mapper-asl</artifactId>
  <version>1.9.10</version>
</dependency>
<dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-context-support</artifactId>
  <version>${spring.version}</version>
</dependency>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="security config" id="sourceContent1"
                     style="margin-top:2em;"
                     titleStyle="padding-left:0;color:#545454;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:sec="http://www.springframework.org/schema/security"
     xmlns:mvc="http://www.springframework.org/schema/mvc"
     xsi:schemaLocation="
      http://www.springframework.org/schema/security/oauth2
      http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security-3.2.xsd
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.0.xsd ">

  <!-- @author Nagesh.Chauhan(neel4soft@gmail.com) -->
  <!-- This is default url to get a token from OAuth -->
  <http pattern="/oauth/token" create-session="stateless"
    authentication-manager-ref="clientAuthenticationManager"
    xmlns="http://www.springframework.org/schema/security">
    <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
    <anonymous enabled="false" />
    <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
    <!-- include this only if you need to authenticate clients via request 
      parameters -->
    <custom-filter ref="clientCredentialsTokenEndpointFilter"
      after="BASIC_AUTH_FILTER" />
    <access-denied-handler ref="oauthAccessDeniedHandler" />
  </http>

  <!-- This is where we tells spring security what URL should be protected 
    and what roles have access to them -->
  <http pattern="/api/**" create-session="never"
    entry-point-ref="oauthAuthenticationEntryPoint"
    access-decision-manager-ref="accessDecisionManager"
    xmlns="http://www.springframework.org/schema/security">
    <anonymous enabled="false" />
    <intercept-url pattern="/api/**" access="ROLE_APP" />
    <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
    <access-denied-handler ref="oauthAccessDeniedHandler" />
  </http>


  <bean id="oauthAuthenticationEntryPoint"
    class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
    <property name="realmName" value="test" />
  </bean>

  <bean id="clientAuthenticationEntryPoint"
    class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
    <property name="realmName" value="test/client" />
    <property name="typeName" value="Basic" />
  </bean>

  <bean id="oauthAccessDeniedHandler"
    class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

  <bean id="clientCredentialsTokenEndpointFilter"
    class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
    <property name="authenticationManager" ref="clientAuthenticationManager" />
  </bean>

  <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
    xmlns="http://www.springframework.org/schema/beans">
    <constructor-arg>
      <list>
        <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
        <bean class="org.springframework.security.access.vote.RoleVoter" />
        <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
      </list>
    </constructor-arg>
  </bean>

  <authentication-manager id="clientAuthenticationManager"
    xmlns="http://www.springframework.org/schema/security">
    <authentication-provider user-service-ref="clientDetailsUserService" />
  </authentication-manager>


  <!-- This is simple authentication manager, with a hardcoded user/password 
    combination. We can replace this with a user defined service to get few users 
    credentials from DB -->
  <authentication-manager alias="authenticationManager"
    xmlns="http://www.springframework.org/schema/security">
    <authentication-provider>
      <user-service>
        <user name="beingjavaguys" password="spring@java" authorities="ROLE_APP" />
      </user-service>
    </authentication-provider>
  </authentication-manager>

  <bean id="clientDetailsUserService"
    class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
    <constructor-arg ref="clientDetails" />
  </bean>


  <!-- This defined token store, we have used inmemory tokenstore for now 
    but this can be changed to a user defined one -->
  <bean id="tokenStore"
    class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

  <!-- This is where we defined token based configurations, token validity 
    and other things -->
  <bean id="tokenServices"
    class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
    <property name="tokenStore" ref="tokenStore" />
    <property name="supportRefreshToken" value="true" />
    <property name="accessTokenValiditySeconds" value="120" />
    <property name="clientDetailsService" ref="clientDetails" />
  </bean>

  <bean id="userApprovalHandler"
    class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
    <property name="tokenServices" ref="tokenServices" />
  </bean>

  <oauth:authorization-server
    client-details-service-ref="clientDetails" token-services-ref="tokenServices"
    user-approval-handler-ref="userApprovalHandler">
    <oauth:authorization-code />
    <oauth:implicit />
    <oauth:refresh-token />
    <oauth:client-credentials />
    <oauth:password />
  </oauth:authorization-server>

  <oauth:resource-server id="resourceServerFilter"
    resource-id="test" token-services-ref="tokenServices" />

  <oauth:client-details-service id="clientDetails">
    <!-- client -->
    <oauth:client client-id="restapp"
      authorized-grant-types="authorization_code,client_credentials"
      authorities="ROLE_APP" scope="read,write,trust" secret="secret" />

    <oauth:client client-id="restapp"
      authorized-grant-types="password,authorization_code,refresh_token,implicit"
      secret="restapp" authorities="ROLE_APP" />

  </oauth:client-details-service>

  <sec:global-method-security
    pre-post-annotations="enabled" proxy-target-class="true">
    <!--you could also wire in the expression handler up at the layer of the 
      http filters. See https://jira.springsource.org/browse/SEC-1452 -->
    <sec:expression-handler ref="oauthExpressionHandler" />
  </sec:global-method-security>

  <oauth:expression-handler id="oauthExpressionHandler" />
  <oauth:web-expression-handler id="oauthWebExpressionHandler" />
</beans>
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
]]>
      </c:comment1>
    </c:comment>
  </c:entry>




</c:component>
