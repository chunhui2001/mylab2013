<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract style="font-size:1em;line-height:1.6em;">
    <![CDATA[
<img src="/images/j2ee/dubbo/dubbo-architecture.png" style="max-width:100%" />

<h3 style="margin-top:.625em;color:green;">Dubbo 四个基本组件：Registry、Monitor、Provider、Consumer。</h3>

<ul style="margin-left:.5em;line-height:1.425em;">
    <li style="margin-bottom: .3em;">
      &#x278A; <b>Provider:</b> 暴露服务的服务提供方。
    </li>
    <li style="margin-bottom: .3em;">
      &#x278B; <b>Consumer:</b> 调用远程服务的服务消费方。
    </li>
    <li style="margin-bottom: .3em;">
     &#x278C; <b>Registry:</b> 服务注册与发现的注册中心。
    </li>
    <li style="margin-bottom: .3em;">
     &#x278D; <b>Monitor:</b> 统计服务的调用次数和调用时间的监控中心。(不属于核心组件)
    </li>
    <li style="margin-bottom: .3em;">
     &#x278E; <b>Dubbo Admin:</b> 服务接口管理。(不属于核心组件)
    </li>
</ul>

<h3 style="margin-top:.625em;color:green;">每个组件的职责</h3>
<ul style="margin-left:.5em;line-height:1.425em;">
    <li style="margin-bottom: .3em;">
      &#10004; 0.服务容器负责启动，加载，运行服务提供者。 >> Provider
    </li>
    <li style="margin-bottom: .3em;">
      &#10004; 1.服务提供者在启动时，向注册中心注册自己提供的服务。 >> Provider
    </li>
    <li style="margin-bottom: .3em;">
     &#10004; 2.服务消费者在启动时，向注册中心订阅自己所需的服务。 >> Consumer
    </li>
    <li style="margin-bottom: .3em;">
     &#10004; 3.注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。 >> Registry
    </li>
    <li style="margin-bottom: .3em;">
     &#10004; 4.服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用。 >> Consumer
    </li>
    <li style="margin-bottom: .3em;">
     &#10004; 5.服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。 >> Monitor
    </li>
</ul>
]]>
  </c:abstract>
  

  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Dubbo注册中心 &mdash; Registry]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div>
  对于服务提供方，它需要发布服务，而且由于应用系统的复杂性，服务的数量、类型也不断膨胀；
对于服务消费方，它最关心如何获取到它所需要的服务，而面对复杂的应用系统，需要管理大量的服务调用。
而且，对于服务提供方和服务消费方来说，他们还有可能兼具这两种角色，即既需要提供服务，有需要消费服务。
</div>
<div style="margin-top:.625em;">
通过将服务统一管理起来，可以有效地优化内部应用对服务发布/使用的流程和管理。服务注册中心可以通过特定协议来完成服务对外的统一。
</div>
        ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="Dubbo 提供的几种注册中心类型" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[

<ul style="margin-left:.5em;line-height:1.425em;">
    <li style="margin-bottom: .3em;">
      &#x278A; Multicast 注册中心
    </li>
    <li style="margin-bottom: .3em;">
      &#x278B; Zookeeper 注册中心
    </li>
    <li style="margin-bottom: .3em;">
     &#x278C; Redis 注册中心
    </li>
    <li style="margin-bottom: .3em;">
     &#x278D; Simple 注册中心
    </li>
</ul>
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Dubbo+Zookeeper+Spring 的简单实现]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
       <ul style="margin-left:.5em;line-height:1.425em;">
    <li style="margin-bottom: .3em;">
      &#x278A;  安装 Zookeeper 并启动；
    </li>
    <li style="margin-bottom: .3em;">
      &#x278B; 创建 MAVEN 项目，依赖 Dubbo+Zookeeper+Spring；
    </li>
    <li style="margin-bottom: .3em;">
     &#x278C; 安装 Dubbo-admin，实现监控。
    </li>
</ul>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="项目结构" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<ul style="margin-left:.5em;line-height:1.425em;">
    <li style="margin-bottom: .3em;">
      &#x278A; dubbo-api: 存放公共接口；
    </li>
    <li style="margin-bottom: .3em;">
      &#x278B; dubbo-consumer:　调用远程服务；
    </li>
    <li style="margin-bottom: .3em;">
     &#x278C; dubbo-provider: 提供远程服务。
    </li>
</ul>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="dubbo-api" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
在该项目中定义服务接口：该接口需单独打包，在服务提供方和消费方共享。
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.325em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
package com.alibaba.dubbo.demo;
import java.util.List;

public interface DemoService {
    List<String> getPermissions(Long id);
}
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="dubbo-provider" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
在该项目中实现公共接口的具体实现逻辑
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.325em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
package com.alibaba.dubbo.demo.impl;

import com.alibaba.dubbo.demo.DemoService;

import java.util.ArrayList;
import java.util.List;
public class DemoServiceImpl implements DemoService {
    public List<String> getPermissions(Long id) {
        List<String> demo = new ArrayList<String>();
        demo.add(String.format("Permission_%d", id - 1));
        demo.add(String.format("Permission_%d", id));
        demo.add(String.format("Permission_%d", id + 1));
        return demo;
    }
}
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="用 Spring 配置声明暴露服务 resources/META-INF/spring/provider.xml" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://code.alibabatech.com/schema/dubbo
       http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
    <!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识-->
    <dubbo:application name="demotest-provider" owner="programmer" organization="dubbox"/>
    <!--使用 zookeeper 注册中心暴露服务，注意要先开启 zookeeper-->
    <dubbo:registry address="zookeeper://localhost:2181"/>
    <!-- 用dubbo协议在20880端口暴露服务 -->
    <dubbo:protocol name="dubbo" port="20880" />
    <!--使用 dubbo 协议实现定义好的 api.PermissionService 接口-->
    <dubbo:service interface="com.alibaba.dubbo.demo.DemoService" ref="demoService" protocol="dubbo" />
    <!--具体实现该接口的 bean-->
    <bean id="demoService" class="com.alibaba.dubbo.demo.impl.DemoServiceImpl"/>
</beans>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="Spring DataSource resources/META-INF/spring/datasource.xml" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                <property name="jdbcUrl" value="${db.url}"/>
                <property name="username" value="${db.user}"/>
                <property name="password" value="${db.password}"/>
                <property name="connectionTestQuery" value="select 1"/>
                <property name="connectionTimeout" value="${db.connectionTimeout}"/>
                <property name="minimumIdle" value="${db.minIdle}"/>
                <property name="maximumPoolSize" value="${db.maxPoolSize}"/>
                <property name="dataSourceProperties">
                    <map>
                        <entry key="cachePrepStmts" value="true"/>
                        <entry key="prepStmtCacheSize" value="${db.prepStmtCacheSize}"/>
                        <entry key="prepStmtCacheSqlLimit" value="${db.prepStmtCacheSqlLimit}"/>
                    </map>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath:/META-INF/mappers/*.xml"/>
        <property name="configLocation" value="classpath:/META-INF/applicationContext-mybatis.xml"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.huobi.local.shop.mappers"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

</beans>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="Spring Content 配置文件 resources/META-INF/spring/context.xml" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="propertyPlaceholder" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"/>

    <bean id="environment" class="com.huobi.bitex.commons.util.Environment">
        <property name="env" value="${info.env.name}"/>
    </bean>

    <import resource="classpath:/META-INF/spring/service.xml"/>
    <import resource="classpath:/META-INF/spring/datasource.xml"/>
    <import resource="classpath:/META-INF/spring/elastic-job.xml"/>

    <bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <bean id="redisClient" class="com.huobi.bitex.commons.cache.RedisClient">
        <property name="poolConfig" ref="redisPoolConfig"/>
        <property name="timeout" value="0"/>
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="database" value="${redis.db}"/>
    </bean>
</beans>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.325em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
package com.alibaba.dubbo.provider;


@ComponentScan("com.")
@EnableConfigurationProperties
@ImportResource("classpath*:/META-INF/spring/context.xml")
public class Main {

    private static final Logger LOG = LoggerFactory.getLogger(Main.class);

    public static void main(String[] args) throws Exception {
        TimeZone.setDefault(TimeZone.getTimeZone("GMT+9"));
        ApplicationContext ctx = new SpringApplicationBuilder(Main.class)
            .web(WebApplicationType.NONE).run(args);
        String file = ctx.getBean(AppCheck.class).createLockFile();
        ctx.getBean("SHUTDOWN_LATCH", CountDownLatch.class).await();
    }

    @Bean
    public AppCheck appCheck() {
        return new AppCheck();
    }

    @Bean("SHUTDOWN_LATCH")
    public CountDownLatch shutdownLatch() {
        return new CountDownLatch(1);
    }

    private static class AppCheck {

        @Value("${lockfile}")
        private String lockFile;

        String createLockFile() throws IOException {
            if (!new File(lockFile).createNewFile()) {
                LOG.info(format("服务创建文件异常", kv("lock", lockFile)));
            }
            return lockFile;
        }
    }
}
    ]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="dubbo-consumer" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
调用所需要的远程服务
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="resources/META-INF/spring/consumer.xml" id="sourceContent1"
                     style="margin-top:.325em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://code.alibabatech.com/schema/dubbo 
       http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
    <dubbo:application name="demotest-consumer" owner="programmer" organization="dubbox"/>
    <!--向 zookeeper 订阅 provider 的地址，由 zookeeper 定时推送-->
    <dubbo:registry address="zookeeper://localhost:2181"/>
    <!--使用 dubbo 协议调用定义好的 api.PermissionService 接口-->
    <dubbo:reference id="permissionService" interface="com.alibaba.dubbo.demo.DemoService"/>
</beans>
    ]]>
    </c:sourceContent>
    <c:sourceContent type="" title="" id="sourceContent1"
                     style="margin-top:.325em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
package com.alibaba.dubbo.consumer;

import com.alibaba.dubbo.demo.DemoService;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Consumer {
    public static void main(String[] args) {
        // 测试常规服务
        ClassPathXmlApplicationContext context =
                new ClassPathXmlApplicationContext("consumer.xml");
        context.start();
        System.out.println("consumer start");
        DemoService demoService = context.getBean(DemoService.class);
        System.out.println("consumer");
        System.out.println(demoService.getPermissions(1L));
    }
}
    ]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[Dubbo管理控制台]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div>
  <img src="/images/j2ee/dubbo/dubbo-admin.png" />
</div>

<h3 style="color:green;margin-top:.625em;">管理控制台功能</h3>
<ul style="margin-left:.5em;line-height:1.425em;">
    <li style="margin-bottom: .3em;">
      &#x278A; 路由规则，动态配置，服务降级
    </li>
    <li style="margin-bottom: .3em;">
      &#x278B; 访问控制，权重调整
    </li>
    <li style="margin-bottom: .3em;">
      &#x278C; 负载均衡
    </li>
</ul>
        ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="html" title="提供者" id="sourceContent1"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<img style="width:100%" src="/images/j2ee/dubbo/dubbo-admin-provider.png" />
    ]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="消费者" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:.95em;line-height:1.6em;font-family:monospace;">
      <![CDATA[
<img style="width:100%" src="/images/j2ee/dubbo/dubbo-admin-consumer.png" />
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>



</c:component>
