<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
   I recently needed to add drag & drop functionality to an angularjs web application Iâ€™m working on, none of the existing directives did exactly what I needed so I built my own. In building the directive, I needed a service to create UUIDs, so I built one of them too.
]]>
  </c:abstract>





  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title>UUID service</c:title>
    <c:desc>
      <c:desc1> <![CDATA[
      
      ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1.2em;line-height:1.3;font-family:monospace;">
                     <![CDATA[
var module;

try {
    module = angular.module('lvl.services');  
} catch (e) {
    module  = angular.module('lvl.services', []);
}

module.factory('uuid', function() {
    var svc = {
        new: function() {
            function _p8(s) {
                var p = (Math.random().toString(16)+"000000000").substr(2,8);
                return s ? "-" + p.substr(0,4) + "-" + p.substr(4,4) : p ;
            }
            return _p8() + _p8(true) + _p8(true) + _p8();
        },
        
        empty: function() {
          return '00000000-0000-0000-0000-000000000000';
        }
    };
    
    return svc;
});
  ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title>Drag and drop Directive</c:title>
    <c:desc>
      <c:desc1> <![CDATA[
      
      ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1.2em;line-height:1.3;font-family:monospace;">
                     <![CDATA[
var module = angular.module("lvl.directives.dragdrop", ['lvl.services']);

module.directive('lvlDraggable', ['$rootScope', 'uuid', function($rootScope, uuid) {
      return {
          restrict: 'A',
          link: function(scope, el, attrs, controller) {
            console.log("linking draggable element");

              angular.element(el).attr("draggable", "true");
              var id = angular.element(el).attr("id");
              if (!id) {
                  id = uuid.new()
                  angular.element(el).attr("id", id);
              }
              
              el.bind("dragstart", function(e) {
                  e.dataTransfer.setData('text', id);

                  $rootScope.$emit("LVL-DRAG-START");
              });
              
              el.bind("dragend", function(e) {
                  $rootScope.$emit("LVL-DRAG-END");
              });
          }
      }
  }]);

module.directive('lvlDropTarget', ['$rootScope', 'uuid', function($rootScope, uuid) {
      return {
          restrict: 'A',
          scope: {
              onDrop: '&'
          },
          link: function(scope, el, attrs, controller) {
              var id = angular.element(el).attr("id");
              if (!id) {
                  id = uuid.new()
                  angular.element(el).attr("id", id);
              }
                         
              el.bind("dragover", function(e) {
                if (e.preventDefault) {
                  e.preventDefault(); // Necessary. Allows us to drop.
                }
                
                e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.
                return false;
              });
              
              el.bind("dragenter", function(e) {
                // this / e.target is the current hover target.
                angular.element(e.target).addClass('lvl-over');
              });
              
              el.bind("dragleave", function(e) {
                angular.element(e.target).removeClass('lvl-over');  // this / e.target is previous target element.
              });
              
              el.bind("drop", function(e) {
                if (e.preventDefault) {
                  e.preventDefault(); // Necessary. Allows us to drop.
                }

                if (e.stopPropogation) {
                  e.stopPropogation(); // Necessary. Allows us to drop.
                }
                var data = e.dataTransfer.getData("text");
                  var dest = document.getElementById(id);
                  var src = document.getElementById(data);
                  
                  scope.onDrop({dragEl: src, dropEl: dest});
              });

              $rootScope.$on("LVL-DRAG-START", function() {
                  var el = document.getElementById(id);
                  angular.element(el).addClass("lvl-target");
              });
              
              $rootScope.$on("LVL-DRAG-END", function() {
                  var el = document.getElementById(id);
                  angular.element(el).removeClass("lvl-target");
                  angular.element(el).removeClass("lvl-over");
              });
          }
      }
  }]);
  ]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>




  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title>Html Structure</c:title>
    <c:desc>
      <c:desc1> <![CDATA[
      
      ]]></c:desc1>
    </c:desc>
    <c:sourceContent type="" title="" id="sourceContent1" 
                     style="background-color:white;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1.2em;line-height:1.3;font-family:monospace;">
                     <![CDATA[
<html>
  <head>
    <title>Drag and Drop Demo</title>
    <script src="script/lib/angular.js"></script>
    <script src="script/lvl-uuid.js"></script>
    <script src="script/lvl-drag-drop.js"></script>
    <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet">
    <style>
      .lvl-over {
        /* applied to a drop target when a draggable object is over it */
        border: 2px dashed black !important;
      }

      .lvl-target {
        /* applied to all drop targets when a drag operation begins, used to indicate drop targets on a page */
        background-color: #ddd;
        opacity: .5;
      }

      [draggable] {
        -moz-user-select: none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        user-select: none;
        /* Required to make elements draggable in old WebKit */
        -khtml-user-drag: element;
        -webkit-user-drag: element;
        cursor: move;
        border:1px solid black;
      }

      .peg {
        text-align: center;
        font-weight: bold;
        border:1px black solid;
        width: 75px;
        margin: 10px;
      }

      .slot {
        margin-right:2px;
        margin-top:2px;
        width:25;
        height:25px;
          display:inline-block;
          border: none;
      }

      .red {
        background-color: red;
      }

      .blue {
        background-color: blue;
      }

      .green {
        background-color: green;
      }

      .black {
        background-color: black;
        color: white;
      }

      .grey {
        background-color: grey;
      }

      pre strong {
        font-size:12pt;
      }
    </style>
  </head>
  <body ng-app="ddApp">
    <h1>Drag and Drop Directives</h1>
    <p>Simple directives to enable drag and drop in your application</p>

    <div ng-controller="ddController" style="margin-top:50px;">
      <div class="row">
        <div class="col-md-1 col-md-offset-1">
          <p>Click and drag a color onto the grid to the right</p>
          <div class="peg green" x-lvl-draggable="true" data-color="green">Green</div>
          <div class="peg red" x-lvl-draggable="true" data-color="red">Red</div>
          <div class="peg blue" x-lvl-draggable="true" data-color="blue">Blue</div>
          <div class="peg black" x-lvl-draggable="true" data-color="black">Black</div>
          <div class="peg grey" x-lvl-draggable="true" data-color="grey">Grey</div>
        </div>
  
        <div class="col-md-10">
          <div ng-repeat="r in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]">
            <span class="slot" ng-repeat="c in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]" x-lvl-draggable='true' x-lvl-drop-target="true" x-on-drop="dropped(dragEl, dropEl)"></span>
          </div>
        </div>
      </div>
    </div>
    <h3>Relevant Html</h3>
    <pre>
    <em><strong>
    &lt;!-- include the uuid service as well as the directive --&gt;
    &lt;script src="script/lvl-uuid.js"&gt;&lt;/script&gt;
    &lt;script src="script/lvl-drag-drop.js"&gt;&lt;/script&gt;
    </strong></em>
    
    &lt;style&gt;
      <em><strong>.lvl-over</strong></em> {
        /* applied to a drop target when a draggable object is over it */
        border: 2px dashed black !important;
      }

      <em><strong>.lvl-target</strong></em> {
        /* 
        applied to all drop targets when a drag operation begins 
        removed when the drag operation ends
        used to indicate drop targets on a page 
        */
        background-color: #ddd;
        opacity: .5;
      }

      [draggable] {
        /* not applied by the directive, but useful to indicate a draggable element */
        -moz-user-select: none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        user-select: none;
        cursor: move;
        border:1px solid black;
      }
    &lt;/style&gt;

    &lt;div ng-controller="ddController" style="margin-top:50px;"&gt;
      &lt;div class="row"&gt;
        &lt;div class="col-md-1 col-md-offset-1"&gt;
          &lt;p&gt;Click and drag a color onto the grid to the right&lt;/p&gt;
          &lt;div class="peg green" <em><strong>x-lvl-draggable="true"</strong></em> data-color="green"&gt;Green&lt;/div&gt;
          &lt;div class="peg red" <em><strong>x-lvl-draggable="true"</strong></em> data-color="red"&gt;Red&lt;/div&gt;
          &lt;div class="peg blue" <em><strong>x-lvl-draggable="true"</strong></em> data-color="blue"&gt;Blue&lt;/div&gt;
          &lt;div class="peg black" <em><strong>x-lvl-draggable="true"</strong></em> data-color="black"&gt;Black&lt;/div&gt;
          &lt;div class="peg grey" <em><strong>x-lvl-draggable="true"</strong></em> data-color="grey"&gt;Grey&lt;/div&gt;
        &lt;/div&gt;
  
        &lt;div class="col-md-10"&gt;
          &lt;div ng-repeat="r in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"&gt;
            &lt;span class="slot circle" ng-repeat="c in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]" <em><strong>x-lvl-drop-target="true" x-on-drop="dropped(dragEl, dropEl)"</strong></em>&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    </pre>

    <h3>Page Script</h3>
    <pre>
    angular
      .module('ddApp', [<em><strong>'lvl.directives.dragdrop'</strong></em>]) // register the directive with your app module
      .controller('ddController', ['$scope' , function($scope){
        <em><strong>$scope.dropped = function(dragEl, dropEl)</em></strong> { // function referenced by the drop target
          //this is application logic, for the demo we just want to color the grid squares
          //the directive provides a native dom object, wrap with jqlite
          var drop = angular.element(dropEl);
          var drag = angular.element(dragEl);
        
          //clear the previously applied color, if it exists
          var bgClass = drop.attr('data-color');
          if (bgClass) {
            drop.removeClass(bgClass);
          }

          //add the dragged color
          bgClass = drag.attr("data-color");
          drop.addClass(bgClass);
          drop.attr('data-color', bgClass);

          //if element has been dragged from the grid, clear dragged color
          if (drag.attr("x-lvl-drop-target")) {
            drag.removeClass(bgClass);
          }
        }
      }]);
    </pre>
  </body>
  <script>
    angular
      .module('ddApp', ['lvl.directives.dragdrop']) // register the directive with your app module
      .controller('ddController', ['$scope' , function($scope){ // function referenced by the drop target
        $scope.dropped = function(dragEl, dropEl) {
          //this is application logic, for the demo we just want to color the grid squares
          //the directive provides a native dom object, wrap with jqlite
          var drop = angular.element(dropEl);
          var drag = angular.element(dragEl);
        
          //clear the previously applied color, if it exists
          var bgClass = drop.attr('data-color');
          if (bgClass) {
            drop.removeClass(bgClass);
          }

          //add the dragged color
          bgClass = drag.attr("data-color");
          drop.addClass(bgClass);
          drop.attr('data-color', bgClass);

          //if element has been dragged from the grid, clear dragged color
          if (drag.attr("x-lvl-drop-target")) {
            drag.removeClass(bgClass);
          }
        }
      }]);
  </script>
</html>]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>

</c:component>
