<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
Java 或者其他运行在 JVM(java 虚拟机)上面的程序都需要最终编译为字节码,然后被JVM加载运行,那么这个加载到虚拟机的过程就是 classloader 类加载器所干的事情.直白一点,就是 通过一个类的全限定类名称来获取描述此类的二进制字节流 的过程.
]]>
  </c:abstract>

  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[类加载器三杰]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
jvm 有三类 classloader，分别是 <b>bootstrap classloader, extended classloader 以及 application classloader</b>。
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="▪▪ bootstrap classloader (BootClassLoader) - 没有父类" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
bootstrap classloader 是系统在启动 jvm 时默认加载的。当用户在命令行输入java Test时，系统会首先加载jvm。在 windows 系统下，jvm 的路径通常位于 %JAVA_HOME%/jdk/jre/client/jvm.dll 和 %JAVA_HOME%/jdk/jre/server/jvm.dll.
</div>

<div style="margin-top:.325em;">
  <p style="color:red;">bootstrap classloader 在 jvm 启动之后自动加载。bootstrap classloader 由 c 实现，不属于 java 类。
    <br />
System.out.println(System.getProperty("sun.boot.class.path"));
</p>
</div>

<div style="margin-top:.325em;">
  <p style="color:black;">bootstrap classloader 负责将 $JAVA_HOME/lib 或者 -Xbootclasspath 参数指定路径下面的文件(按照文件名识别,如 rt.jar) 加载到虚拟机内存中。启动类加载器无法直接被 java 代码引用, 如果需要把加载请求委派给启动类加载器, 直接返回null即可.</p>
</div>

<div style="margin-top:.325em;">
bootstrap classloader 加载后，会载入 extended classloader，并将 extended classloader 的父类设为 bootstrap classloader。然后，bootstrap classloader 接着载入 system classloader，并将 system classloader 的父类设为 extended classloader。至此，<b>bootstrap 》extended 》application</b> 三级继承结构形成。
</div>

]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="▪▪ extended classloader (ExtClassLoader) - 父类加载器为 null" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div style="margin-top:.325em;">
  <p style="color:green;">extended classloader 由 java 实现，通常为 sun.misc.Lancher$ExtClassLoader.
    <br /> 
  System.out.println(System.getProperty("java.ext.dirs"));</p>
</div>
<div style="margin-top:.325em;">
  <p style="color:black;">extended classloader 
负责加载 $JAVA_HOME/lib/ext 目录中的文件或者 java.ext.dirs 系统变量所指定的路径的类库。</p>
</div>
]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="▪▪ application classloader (AppClassLoader) - 父类加载器为 ExtClassLoader" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div style="margin-top:.325em;">
  <p style="color:blue;">application classloader 由 java 实现，通常为 sun.misc.Lancher$AppClassLoader.
    <br />
  System.out.println(System.getProperty("java.class.path"));</p>
</div>
<div style="margin-top:.325em;">
  <p style="color:black;">system classloader 负责加载 java.class.path 路径下的 .class 文件以及 jar 包。java.class.path 对应用户自身的类路径。</p>
</div>

<div style="margin-top:.325em;">主要负责java -classpath / -Djava.class.path 所指的目录下的类与 jar 包装入工作.</div>

<div style="margin-top:.625em;">
一般是系统的默认加载器, 比如用 main 方法启动就是用此类加载器, 也就是说如果没有自定义过类加载器, 同时它也是 getSystemClassLoader() 的返回值.
</div>
]]>
    </c:sourceContent>
    <c:sourceContent type="html" title="▪▪ User Custom ClassLoader 用户自定义类加载器(java.lang.ClassLoader的子类) - 父类加载器为AppClassLoader" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div style="margin-top:.325em;">
  在程序运行期间, 通过 java.lang.ClassLoader 的子类动态加载 class 文件, 体现 java 动态实时类装入特性.
</div>

<div style="margin-top:.325em;">
Tomcat, Spring Boot 都有自己定义的类加载器
</div>
]]>
    </c:sourceContent>


    <c:sourceContent type="" title="每个类加载器都有一个父加载器" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
ClassLoader cl = Test.class.getClassLoader();
 
System.out.println("ClassLoader is:"+cl.toString());
System.out.println("ClassLoader\'s parent is:"+cl.getParent().toString());

>>>> ClassLoader is:sun.misc.Launcher$AppClassLoader@73d16e93
>>>> ClassLoader's parent is:sun.misc.Launcher$ExtClassLoader@15db9742
]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[类从何处加载？加载到何处? ]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
<div>
  在遇到这个未知的类时，虚拟机肯定正在运行一个方法调用（静态方法或者实例方法），这个方法挂在哪个类上面，那这个类就是调用者 Class 对象。前面我们提到每个 Class 对象里面都有一个 classLoader 属性记录了当前的类是由谁来加载的。
</div>
<div style="margin-top:1em;">
jvm 由<b>方法区，堆，栈，pc寄存器和本地方法栈</b>构成。<b>类加载器的任务就是将 class 二进制文件加载到方法区</b>，供虚拟机模制出在堆中存放的对象。
</div>

<h4 style="margin-top:1em;">在JVM中表示两个class对象是否为同一个类对象存在两个必要条件: </h4>
<ul style="margin-left: 1.5em;list-style-type: disc;margin-top: .625em;color:black;">
    <li>类的完整类名必须一致，包括包名。</li>
    <li>加载这个类的ClassLoader(指ClassLoader实例对象)必须相同。</li>
</ul>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="JVM structrue" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[双亲委托机制]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[


<img width="450px" src="/images/java/classloader.png" />

<div>classloader 加载类的过程为:</div>
<ul style="margin-left: 1.5em;list-style-type: disc;margin-top: .3em;color:black;">
    <li>收到类加载的请求</li>
    <li>首先不会自己尝试加载此类,而是委托给父类的加载器去完成.</li>
    <li>如果父类加载器没有,继续寻找父类加载器.</li>
    <li>搜索了一圈,发现都找不到,然后才是自己尝试加载此类.</li>
</ul>
<div style="margin-top:.625em;">
这种机制又叫双亲委派机制。<b>父类加载器无法加载子类加载器的类, 但是可以持有子类加载器所加载类的实例, 从而实现父类加载器的代码可以调用子类加载器的代码的形式。</b></div>
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<b style="font-size:1.5em;">避免重复造轮子</b>双亲委派机制的好处是，避免多个类加载器加载同一个类到不同的jvm方法区中。因为如果类A由 ClassLoaderA 加载，同时，又被 ClassLoaderB 加载，这样，内存中就会存在两份不同的A的定义，于是形成A既是 ClassLoaderA 罩的，又是 ClassLoaderB 罩着，造成灾难性后果。
]]>
    </c:sourceContent>

    <c:sourceContent type="html" title="用户自定义类的加载顺序" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
首先调用 AppClassLoader 加载类，AppClassLoader 调用 ExtClassLoader，ExtClassLoader 调用 BootClassLoader，BootClassLoader 在 sun.boot.class.path 寻找改类，没找到，加载失败；ExtClassLoader 也未加载类，失败，最后由 AppClassLoader 加载成功。从这个加载顺序可以看出来，三个类加载器的对类的可见性是不同的。
</div>

<div style="margin-top:.625em;">
java 中的类是由 java 的全名以及类的 classloader 来限定的。只有当二者完全一样才会认为是同一个类。否则是不同的类。因此，可以定义一个同名的类，包名也一样，只要保证该类被不同的类加载器加载即可。
</div>
]]>
    </c:sourceContent>


    <c:sourceContent type="html" title="当前类加载器和线程上下文类加载器" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<h4 style="color:deeppink;">当前类加载器</h4>
<div style="margin-top:.325em;">
当前类加载器是指当前方法所在的类使用的类加载器。在程序中使用Class.forName或者Class.getResource抑或Class.class时就是使用的该类加载器。
</div>

<h4 style="margin-top:.625em;color:deeppink;">线程上下文类加载器</h4>
<div style="margin-top:.325em;">
<b>线程上下文类加载器可以不遵循双亲委派机制。</b>线程的上下文类加载器有 Thread.currentThread().setContextClassLoader() 来为当前线程设置线程上下文类加载器。如果没有设置当前线程的上下文类加载器，则继承父类的上下文类加载器。
</div>


<h4 style="margin-top:.625em;color:deeppink;">为什么还需要线程上下文类加载器？</h4>
<div style="margin-top:.325em;">
考虑一种情况，当我们的程序必须由 jvm 的核心代码去加载第三方类的时候。比如 jndi: jndi 的核心是 rt.jar 包中实现的，由 Bootstrap classloader 负责加载，但是 jndi 必须加载第三方厂商的具体的 jndi 实现，这个时候调用 Bootstrap 加载只对其子类加载器可见的类，就会出现失败。这个时候就可以使用线程上下文类加载器。
</div>
<div style="margin-top:.325em;">
大部分 java app 服务器(jboss, tomcat..) 也是采用线程上下文类加载器来处理 web 服务。
还有一些采用 hotswap 特性的框架, 也使用了线程上下文类加载器, 比如 seasar (full stack framework in japenese)。线程上下文从根本解决了一般应用不能违背双亲委派模式的问题。<b>使 java 类加载体系显得更灵活。</b>
</div>

<div style="margin-top:.325em;">
使用线程上下文加载类, 也要注意, 保证多个需要通信的线程间的类加载器应该是同一个,
防止因为不同的类加载器, 导致类型转换异常(ClassCastException).
</div>


]]>
    </c:sourceContent>
    

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>



  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[自定义加载器]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[

<div>
  ClassLoader 里面有三个重要的方法 loadClass()、findClass() 和 defineClass()。
</div>
<div style="margin-top:.625em">
  loadClass() 方法是加载目标类的入口，它首先会查找当前 ClassLoader 以及它的双亲里面是否已经加载了目标类，如果没有找到就会让双亲尝试加载，如果双亲都加载不了，就会调用 findClass() 让自定义加载器自己来加载目标类。ClassLoader 的 findClass() 方法是需要子类来覆盖的，不同的加载器将使用不同的逻辑来获取目标类的字节码。拿到这个字节码之后再调用 defineClass() 方法将字节码转换成 Class 对象。
</div>
<div style="margin-top:.625em">
  自定义类加载器不易破坏双亲委派规则，不要轻易覆盖 loadClass 方法。否则可能会导致自定义加载器无法加载内置的核心类库。在使用自定义加载器时，要明确好它的父加载器是谁，将父加载器通过子类的构造器传入。如果父类加载器是 null，那就表示父加载器是「根加载器」。
</div>

      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>




  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[钻石依赖]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[

<div>
  项目管理上有一个著名的概念叫着「钻石依赖」，是指软件依赖导致同一个软件包的两个版本需要共存而不能冲突。
</div>
<div style="margin-top:.625em">
  我们平时使用的 maven 是这样解决钻石依赖的，它会从多个冲突的版本中选择一个来使用，如果不同的版本之间兼容性很糟糕，那么程序将无法正常编译运行。Maven 这种形式叫「扁平化」依赖管理。
</div>
<div style="margin-top:.625em">
  使用 ClassLoader 可以解决钻石依赖问题。不同版本的软件包使用不同的 ClassLoader 来加载，位于不同 ClassLoader 中名称一样的类实际上是不同的类。下面让我们使用 URLClassLoader 来尝试一个简单的例子，它默认的父加载器是 AppClassLoader
</div>
<div style="margin-top:.625em">
  ClassLoader 固然可以解决依赖冲突问题，不过它也限制了不同软件包的操作界面必须使用反射或接口的方式进行动态调用。Maven 没有这种限制，它依赖于虚拟机的默认懒惰加载策略，运行过程中如果没有显示使用定制的 ClassLoader，那么从头到尾都是在使用 AppClassLoader，而不同版本的同名类必须使用不同的 ClassLoader 加载，所以 Maven 不能完美解决钻石依赖。
</div>


      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[

]]>
    </c:sourceContent>

    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>


  <c:entry style="margin-top:1em;color:rgb(175, 0, 190);font-size:2.2em;">
    <c:title><![CDATA[在 JavaAgent 中的应用]]></c:title>
    <c:desc>
      <c:desc1> <![CDATA[
自己想实现一个JavaAgent来增强字节码, 按照上面的双亲委派模型, 如果我们在 javaagent 中想要访问应用里面的 api 包或者类, 这是不可能的, 因为按照双亲委派模型, 通俗来说就是, 子加载器可以访问父加载器中的类, 但是反过来就行不通。
      ]]></c:desc1>
    </c:desc>

    <c:sourceContent type="html" title="" id="sourceContent1" 
                     style="background-color:white;margin-top:1em;"
                     titleStyle="padding-left:0;color:black;font-size:1.2em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.625em;font-family:monospace;">
                     <![CDATA[
<div>
  我们可以自定义自己的类加载器继承应用代码类加载器(可以在 javaagent 中完成, javaagent 每加载一个类,就会回调传回真实的类加载器),然后我们在Application ClassLoader 中用自定义的类加载器去加载子类,并创建好实例(newInstance()), 将实例的引用保存 在变量中.
</div>
<div style="margin-top:.625em">
  真实运行的时候,就会通过这个变量,去访问我们自定义加载器的内容,又由于我们的自定义类加载器是继承自应用代码的类加载器的,所以自定义类加载器中的代码可以访问应用的代码.
</div>
]]>
    </c:sourceContent>


    <c:comment>
      <c:comment1>
        <![CDATA[
        ]]>
      </c:comment1>
    </c:comment>
  </c:entry>



</c:component>
