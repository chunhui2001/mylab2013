<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
      <![CDATA[
    <a href="https://developers.google.com/appengine/docs/java/tools/uploadinganapp"> https://developers.google.com/appengine/docs/java/tools/uploadinganapp</a>
    <br />
    <a href="https://developers.google.com/appengine/docs/java/tools/maven"> https://developers.google.com/appengine/docs/java/tools/maven</a>
 ]]> </c:abstract>

  <c:entry style="margin-top:2em;">
    <c:title>使用maven3 创建自定义的archetype</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>

    <c:sourceContent title="maven-archetype-plugin" id="sourceContent1"><![CDATA[<plugins>
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-archetype-plugin</artifactId>
        <version>2.2</version>
    </plugin>
</plugins>]]></c:sourceContent>

    <c:sourceContent title="maven-archetype-plugin" id="sourceContent1"><![CDATA[1、进入 maven project 的根目录，运行 maven 命令：
mvn archetype:create-from-project
然后会在target目录下面生成generated-sources目录，这个就是生成的 archetype

    
进入generated-sourced/archetype目录，运行maven命令：
mvn install
这样就把自定义的archetype安装到本地仓库了。
archetype安装的地址是在maven安装目录下面的conf/settings.xml文件中指定的(<localRepository>字节)。
默认会在  ~/.m2  目录下面生成一个archetype-catalog.xml文件（和默认的settings.xml在同一个目录），
声明了该archetype的groupId、artifactId和其他属性。
因为Eclipse创建maven项目过程中，选择的“Default Local”指向的地址就是 ~/.m2，
所以文件archetype-catalog.xml会被eclipse自动读取，
使用eclipse创建maven项目的时候可以在"Default Local"一项中找到刚才自定义archetype名字。

    
当eclipse的maven设置中，User Settings选择的settings.xml指向的本地仓库地址和maven安装目录下
的那个settings.xml中指向路径一样的时候，eclipse才能读取得到刚才安装的自定义的archetype的源文件，
这样eclipse才能复制源文件并创建项目。

    
如果想要卸载刚才安装的archetype，只需要将~/.m2目录下面的archetype-catalog.xml文件中对应的<archetype>字节段删掉，
并且把本地仓库中相应groupId和artifactId下面的文件删掉就可以了。

    
安装到本地仓库中的archetype只可以被自己使用，如果想要共享，那么在第四步的时候使用deploy命令，不要使用install命令。]]></c:sourceContent>
  </c:entry>
  
  <c:entry style="margin-top:2em;">
    <c:title>用 archetype 构建 webapp</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>

    <c:sourceContent title="maven-archetype-quickstart" id="sourceContent1">
      <![CDATA[mvn archetype:generate
      
mvn install
      
java -cp target/simple-1.0-SNAPSHOT.jar org.sonatype.mavenbook.App
Hello World!]]>
    </c:sourceContent>
    
    <c:sourceContent title="maven-archetype-webapp" id="sourceContent1" style="border-bottom:none;margin-top:1em;">
<![CDATA[mvn archetype:generate 
    -DgroupId=com.mycompany.app 
    -DartifactId=my-webapp 
    -DarchetypeArtifactId=maven-archetype-webapp]]></c:sourceContent>
    <c:sourceContent id="sourceContent1" 
                     style="border-top:none;border-bottom:none;"><![CDATA[<!-- 默认生成的 pom.xml -->
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-webapp</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <finalName>my-webapp</finalName>
  </build>
</project>]]></c:sourceContent>
    <c:sourceContent title="" id="sourceContent1" style="border-top:none;"><![CDATA[// 运行 Servlet 容器
mvn -Djetty.port=9999 jetty:run

// 生成 WAR
mvn clean package]]></c:sourceContent>
  </c:entry>

  <c:entry style="margin-top:2em;">
    <c:title>用 archetype 构建 GAE 用</c:title>
  <c:desc>
    <c:desc1> <![CDATA[]]></c:desc1>
  </c:desc>
  <c:sourceContent type="html" title="guestbook-archetype" id="sourceContent1">
    <![CDATA[
  <span>  1. 在命令行窗口中输入以下 mvn 命令: </span><br />
  <div style="padding-left:1em;color:rgb(165, 0, 253);font-family:'Courier 10 Pitch', Courier, monospace;font-size:1.3em;">mvn archetype:generate</div>
  <br />
  <span>2. 按照接下来的提示输入:</span><br />
   <div style="padding-left:1em;color:rgb(165, 0, 253);font-family:'Courier 10 Pitch', Courier, monospace;font-size:1.3em;">com.google.appengine.archetypes:guestbook-archetype</div>
   <br />
   <span>3. 紧接着输入 GAE app 的版本: </span><br />
   <div style="padding-left:1em;color:rgb(165, 0, 253);font-family:'Courier 10 Pitch', Courier, monospace;font-size:1.3em;">1</div>
   <br />
   <span>4. 接下来会显示一个 archetype 的版本号列表，选择最近发布的版本: </span><br />
   <div style="padding-left:1em;color:rgb(165, 0, 253);font-family:'Courier 10 Pitch', Courier, monospace;font-size:1.3em;">1.8.4</div>
   <br />
   <span>5. 接下来输入 groupId、artifactId、version、package，例如:</span><br />
   <div style="padding-left:1em;color:rgb(165, 0, 253);font-family:'Courier 10 Pitch', Courier, monospace;font-size:1.3em;">groupId=com.myapp.gaeapp<br />
   artifactId=gaeapp<br />
   version=1.0SNAPSPOT<br />
   package=com.myapp.gaeapp</div>
   
   <br />
   <span>6. 编译项目:</span><br />
   <div style="padding-left:1em;color:rgb(165, 0, 253);font-family:'Courier 10 Pitch', Courier, monospace;font-size:1.3em;">mvn verify</div>
   
   <br />
   <span>7. 运行开发服务器:</span><br />
   <div style="padding-left:1em;color:rgb(165, 0, 253);font-family:'Courier 10 Pitch', Courier, monospace;font-size:1.3em;">mvn appengine:devserver</div>
   
   <br />
   <span>8. 部署到云端: (需在 pom.xml 中添加以下配置节点)</span><br />
   <div style="padding-left:1em;color:rgb(165, 0, 253);font-family:'Courier 10 Pitch', Courier, monospace;font-size:1.3em;">
     &lt;configuration&gt; <br />
    &nbsp; &nbsp; &nbsp; &nbsp;  &lt;email&gt;your_automated_ci@email.com&lt;/email&gt;<br />
    &nbsp; &nbsp; &nbsp; &nbsp;  &lt;oauth2&gt;false&lt;/oauth2&gt;<br />
    &nbsp; &nbsp; &nbsp; &nbsp;  &lt;noCookies&gt;true&lt;/noCookies&gt;<br />
    &nbsp; &nbsp; &nbsp; &nbsp;  &lt;passin&gt;true&lt;/passin&gt;<br />
    &lt;/configuration&gt;<br />
   </div>
   
   <br />
   <span>9. 部署</span><br />
   <div style="padding-left:1em;color:rgb(165, 0, 253);font-family:'Courier 10 Pitch', Courier, monospace;font-size:1.3em;">
    mvn clean appengine:update
   </div>
  ]]></c:sourceContent>

    <c:sourceContent type="html" title="skeleton-archetype" id="sourceContent1" style="margin-top:1em;">
      <![CDATA[
      1. 构建, 在命令行窗口中输入以下 mvn 命令: <br />
 &nbsp;&nbsp;&nbsp; mvn archetype:generate \ <br />
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -DarchetypeGroupId=com.google.appengine.archetypes \<br />
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -DarchetypeArtifactId=appengine-skeleton-archetype \<br />
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -DarchetypeVersion=1.9.0 \<br />
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -DgroupId=com.mycompany.myapp \<br />
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -DartifactId=myapp 、<br />
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Dversion=BETA2 \<br />
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Dpackage=com.mycompany \<br />
  
  ]]>
    </c:sourceContent>


  </c:entry>


  <c:entry style="margin-top:2em;">
    <c:title>用 archetype 构建 Struts 用</c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>

    <c:sourceContent title="struts2-archetype-starter" id="sourceContent1"><![CDATA[mvn archetype:generate -B  
    -DgroupId=com.test.mysite 
    -DartifactId=mysite 
    -DarchetypeGroupId=org.apache.struts 
    -DarchetypeArtifactId=struts2-archetype-starter

// 运行 Servlet 容器
mvn -Djetty.port=9999 jetty:run]]></c:sourceContent>
  </c:entry>

</c:component>