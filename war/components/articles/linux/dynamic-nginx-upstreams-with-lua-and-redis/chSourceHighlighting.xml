<?xml version="1.0" encoding="utf-8"?>
<c:component type="chSourceHighlighting" componentId="chSourceHighlighting_1" xmlns:c="http://com.snnmo.website">
  <c:abstract>
    <![CDATA[
Now, to the implementation. The idea behind dynamic upstreams is to simply invoke a standard <b>proxy_pass</b> to a backend address:port pair that was defined in redis key. 
]]>
  </c:abstract>




  <c:entry style="font-size:1.8em;color:#0134A0;font-weight:bold;font-style:oblique;">
    <c:title></c:title>
    <c:desc>
      <c:desc1> <![CDATA[]]></c:desc1>
    </c:desc>
 
    <c:sourceContent type="" title="Lets assume that we have a few sample keys:" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
site1.com 192.168.1.1:3000
site2.com 192.168.1.2:4000
    ]]>
    </c:sourceContent>
 
    <c:sourceContent type="" title="Nginx configuration should look like this:" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
server {
  listen 80;
  server_name _;
  server_name_in_redirect off;
  port_in_redirect off;
  root /root/html;

  location / {
    set $upstream "";
    rewrite_by_lua '
      -- load global route cache into current request scope
      -- by default vars are not shared between requests
      local routes = _G.routes

      -- setup routes cache if empty
      if routes == nil then
        routes = {}
        ngx.log(ngx.ALERT, "Route cache is empty.")
      end

      -- try cached route first
      local route = routes[ngx.var.http_host]
      if route == nil then
        local redis  = require "redis"
        local client = redis.connect("localhost", 6379)
        route        = client:get(ngx.var.http_host)
      end

      -- fallback to redis for lookups
      if route ~= nil then
        ngx.var.upstream = route
        routes[ngx.var.http_host] = route
        _G.routes = routes
      else
        ngx.exit(ngx.HTTP_NOT_FOUND)
      end
    ';

    proxy_buffering             off;
    proxy_set_header            Host $host;
    proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_redirect              off;
    proxy_connect_timeout       10;
    proxy_send_timeout          30;
    proxy_read_timeout          30;
    proxy_pass                  http://$upstream;
  }
}
    ]]>
    </c:sourceContent>
 
    <c:sourceContent type="html" title="" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
If you notice, there is a <b>_G</b> variable used, which points to the global environment. This quick hack allows us to to persist route data between requests since lua extensions works only in per-request mode.
    ]]>
    </c:sourceContent>
 
    <c:sourceContent type="" title="Another example" id="sourceContent1"
                     style="margin-top:1em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
location /lua {
    default_type text/html;
    set $upstream "";

    rewrite_by_lua '
        local req_agent  = ngx.req.get_headers()["User-Agent"];
         if string.find(ngx.req.get_headers()["User-Agent"], "Chrome") then
            ngx.var.upstream = "http://127.0.0.1:9000";
         elseif string.find(ngx.req.get_headers()["User-Agent"], "Firefox") then
            ngx.var.upstream = "http://127.0.0.1:9002";
         else
            ngx.var.upstream = "http://127.0.0.1:9001";
         end
    ';

    content_by_lua '
         ngx.say(ngx.req.get_headers()["User-Agent"]);
         ngx.say(ngx.var.upstream);
    ';
}

    ]]>
    </c:sourceContent>



    <c:sourceContent type="" title="Lua extensions" id="sourceContent1"
                     style="margin-top:3em;"
                     titleStyle="margin:0; background-color:rgb(235, 234, 234);color:rgb(11, 95, 208);padding:.5em 1em;font-weight:bold;font-size:1em;position:relative;padding-left:0;color:black;font-size:1.3em;background-color:white;"
                     bodyStyle="background-color:white;padding:0;font-size:1em;line-height:1.8em;font-family:monospace;">
      <![CDATA[
# Enable repository 
$ sudo gedit /etc/apt/sources.list

# Append below line to bottom of the file
deb http://us.archive.ubuntu.com/ubuntu precise main universe

# Install socket library
$ apt-get install liblua5.1-socket2

# Install redis library
$ mkdir -p /usr/local/lib/lua/5.1
$ cd /usr/local/lib/lua/5.1
$ wget https://raw.github.com/nrk/redis-lua/version-2.0/src/redis.lua
    ]]>
    </c:sourceContent>
    <c:comment>
      <c:comment1>
        <![CDATA[]]>
      </c:comment1>
    </c:comment>
  </c:entry>




</c:component>
